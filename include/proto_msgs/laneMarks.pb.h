// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laneMarks.proto

#ifndef PROTOBUF_laneMarks_2eproto__INCLUDED
#define PROTOBUF_laneMarks_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "header.pb.h"
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
namespace sim_msg {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class LaneMark;
class LaneMarkDefaultTypeInternal;
extern LaneMarkDefaultTypeInternal _LaneMark_default_instance_;
class LaneMarks;
class LaneMarksDefaultTypeInternal;
extern LaneMarksDefaultTypeInternal _LaneMarks_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
class Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
}  // namespace sim_msg

namespace sim_msg {

namespace protobuf_laneMarks_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_laneMarks_2eproto

// ===================================================================

class LaneMark : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.LaneMark) */ {
 public:
  LaneMark();
  virtual ~LaneMark();

  LaneMark(const LaneMark& from);

  inline LaneMark& operator=(const LaneMark& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMark& default_instance();

  static inline const LaneMark* internal_default_instance() {
    return reinterpret_cast<const LaneMark*>(
               &_LaneMark_default_instance_);
  }

  void Swap(LaneMark* other);

  // implements Message ----------------------------------------------

  inline LaneMark* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneMark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneMark& from);
  void MergeFrom(const LaneMark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneMark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.Vec3 points = 4;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 4;
  const ::sim_msg::Vec3& points(int index) const;
  ::sim_msg::Vec3* mutable_points(int index);
  ::sim_msg::Vec3* add_points();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
      points() const;

  // repeated .sim_msg.Vec3 backward_points = 5;
  int backward_points_size() const;
  void clear_backward_points();
  static const int kBackwardPointsFieldNumber = 5;
  const ::sim_msg::Vec3& backward_points(int index) const;
  ::sim_msg::Vec3* mutable_backward_points(int index);
  ::sim_msg::Vec3* add_backward_points();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
      mutable_backward_points();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
      backward_points() const;

  // int32 color = 1;
  void clear_color();
  static const int kColorFieldNumber = 1;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // int32 type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // float confidence = 3;
  void clear_confidence();
  static const int kConfidenceFieldNumber = 3;
  float confidence() const;
  void set_confidence(float value);

  // @@protoc_insertion_point(class_scope:sim_msg.LaneMark)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 > points_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 > backward_points_;
  ::google::protobuf::int32 color_;
  ::google::protobuf::int32 type_;
  float confidence_;
  mutable int _cached_size_;
  friend struct  protobuf_laneMarks_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneMarks : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.LaneMarks) */ {
 public:
  LaneMarks();
  virtual ~LaneMarks();

  LaneMarks(const LaneMarks& from);

  inline LaneMarks& operator=(const LaneMarks& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneMarks& default_instance();

  static inline const LaneMarks* internal_default_instance() {
    return reinterpret_cast<const LaneMarks*>(
               &_LaneMarks_default_instance_);
  }

  void Swap(LaneMarks* other);

  // implements Message ----------------------------------------------

  inline LaneMarks* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneMarks* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneMarks& from);
  void MergeFrom(const LaneMarks& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneMarks* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.LaneMark left = 2;
  int left_size() const;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  const ::sim_msg::LaneMark& left(int index) const;
  ::sim_msg::LaneMark* mutable_left(int index);
  ::sim_msg::LaneMark* add_left();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
      mutable_left();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
      left() const;

  // repeated .sim_msg.LaneMark right = 3;
  int right_size() const;
  void clear_right();
  static const int kRightFieldNumber = 3;
  const ::sim_msg::LaneMark& right(int index) const;
  ::sim_msg::LaneMark* mutable_right(int index);
  ::sim_msg::LaneMark* add_right();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
      mutable_right();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
      right() const;

  // .sim_msg.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::sim_msg::Header& header() const;
  ::sim_msg::Header* mutable_header();
  ::sim_msg::Header* release_header();
  void set_allocated_header(::sim_msg::Header* header);

  // double remain_length = 4;
  void clear_remain_length();
  static const int kRemainLengthFieldNumber = 4;
  double remain_length() const;
  void set_remain_length(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.LaneMarks)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark > left_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark > right_;
  ::sim_msg::Header* header_;
  double remain_length_;
  mutable int _cached_size_;
  friend struct  protobuf_laneMarks_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMark

// int32 color = 1;
inline void LaneMark::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 LaneMark::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.color)
  return color_;
}
inline void LaneMark::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.color)
}

// int32 type = 2;
inline void LaneMark::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 LaneMark::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.type)
  return type_;
}
inline void LaneMark::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.type)
}

// float confidence = 3;
inline void LaneMark::clear_confidence() {
  confidence_ = 0;
}
inline float LaneMark::confidence() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.confidence)
  return confidence_;
}
inline void LaneMark::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.confidence)
}

// repeated .sim_msg.Vec3 points = 4;
inline int LaneMark::points_size() const {
  return points_.size();
}
inline void LaneMark::clear_points() {
  points_.Clear();
}
inline const ::sim_msg::Vec3& LaneMark::points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.points)
  return points_.Get(index);
}
inline ::sim_msg::Vec3* LaneMark::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMark.points)
  return points_.Mutable(index);
}
inline ::sim_msg::Vec3* LaneMark::add_points() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMark.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
LaneMark::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMark.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
LaneMark::points() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMark.points)
  return points_;
}

// repeated .sim_msg.Vec3 backward_points = 5;
inline int LaneMark::backward_points_size() const {
  return backward_points_.size();
}
inline void LaneMark::clear_backward_points() {
  backward_points_.Clear();
}
inline const ::sim_msg::Vec3& LaneMark::backward_points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.backward_points)
  return backward_points_.Get(index);
}
inline ::sim_msg::Vec3* LaneMark::mutable_backward_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMark.backward_points)
  return backward_points_.Mutable(index);
}
inline ::sim_msg::Vec3* LaneMark::add_backward_points() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMark.backward_points)
  return backward_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
LaneMark::mutable_backward_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMark.backward_points)
  return &backward_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
LaneMark::backward_points() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMark.backward_points)
  return backward_points_;
}

// -------------------------------------------------------------------

// LaneMarks

// .sim_msg.Header header = 1;
inline bool LaneMarks::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void LaneMarks::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
inline const ::sim_msg::Header& LaneMarks::header() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.header)
  return header_ != NULL ? *header_
                         : *::sim_msg::Header::internal_default_instance();
}
inline ::sim_msg::Header* LaneMarks::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::sim_msg::Header;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.header)
  return header_;
}
inline ::sim_msg::Header* LaneMarks::release_header() {
  // @@protoc_insertion_point(field_release:sim_msg.LaneMarks.header)
  
  ::sim_msg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void LaneMarks::set_allocated_header(::sim_msg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.LaneMarks.header)
}

// repeated .sim_msg.LaneMark left = 2;
inline int LaneMarks::left_size() const {
  return left_.size();
}
inline void LaneMarks::clear_left() {
  left_.Clear();
}
inline const ::sim_msg::LaneMark& LaneMarks::left(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.left)
  return left_.Get(index);
}
inline ::sim_msg::LaneMark* LaneMarks::mutable_left(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.left)
  return left_.Mutable(index);
}
inline ::sim_msg::LaneMark* LaneMarks::add_left() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMarks.left)
  return left_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
LaneMarks::mutable_left() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMarks.left)
  return &left_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
LaneMarks::left() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMarks.left)
  return left_;
}

// repeated .sim_msg.LaneMark right = 3;
inline int LaneMarks::right_size() const {
  return right_.size();
}
inline void LaneMarks::clear_right() {
  right_.Clear();
}
inline const ::sim_msg::LaneMark& LaneMarks::right(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.right)
  return right_.Get(index);
}
inline ::sim_msg::LaneMark* LaneMarks::mutable_right(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.right)
  return right_.Mutable(index);
}
inline ::sim_msg::LaneMark* LaneMarks::add_right() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMarks.right)
  return right_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
LaneMarks::mutable_right() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMarks.right)
  return &right_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
LaneMarks::right() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMarks.right)
  return right_;
}

// double remain_length = 4;
inline void LaneMarks::clear_remain_length() {
  remain_length_ = 0;
}
inline double LaneMarks::remain_length() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.remain_length)
  return remain_length_;
}
inline void LaneMarks::set_remain_length(double value) {
  
  remain_length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMarks.remain_length)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_laneMarks_2eproto__INCLUDED
