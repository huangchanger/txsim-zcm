// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sim_msg {
constexpr Control_PedalControl::Control_PedalControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : steer_(0)
  , throttle_(0)
  , brake_(0){}
struct Control_PedalControlDefaultTypeInternal {
  constexpr Control_PedalControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_PedalControlDefaultTypeInternal() {}
  union {
    Control_PedalControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_PedalControlDefaultTypeInternal _Control_PedalControl_default_instance_;
constexpr Control_AccControl::Control_AccControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_(0)
  , front_wheel_angle_(0){}
struct Control_AccControlDefaultTypeInternal {
  constexpr Control_AccControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_AccControlDefaultTypeInternal() {}
  union {
    Control_AccControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_AccControlDefaultTypeInternal _Control_AccControl_default_instance_;
constexpr Control_AccSteerControl::Control_AccSteerControl(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : acc_(0)
  , steer_(0){}
struct Control_AccSteerControlDefaultTypeInternal {
  constexpr Control_AccSteerControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_AccSteerControlDefaultTypeInternal() {}
  union {
    Control_AccSteerControl _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_AccSteerControlDefaultTypeInternal _Control_AccSteerControl_default_instance_;
constexpr Control_BodyCommand::Control_BodyCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : turn_light_(0)

  , horn_(false)
  , position_lamp_(false)
  , low_beam_(false)
  , high_beam_(false)
  , warn_light_(false)
  , fog_lamp_(0)
{}
struct Control_BodyCommandDefaultTypeInternal {
  constexpr Control_BodyCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_BodyCommandDefaultTypeInternal() {}
  union {
    Control_BodyCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_BodyCommandDefaultTypeInternal _Control_BodyCommand_default_instance_;
constexpr Control_ChassisCommand::Control_ChassisCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epb_(false){}
struct Control_ChassisCommandDefaultTypeInternal {
  constexpr Control_ChassisCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_ChassisCommandDefaultTypeInternal() {}
  union {
    Control_ChassisCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_ChassisCommandDefaultTypeInternal _Control_ChassisCommand_default_instance_;
constexpr Control_PowerTrainCommand::Control_PowerTrainCommand(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : switch_off_engine_(false){}
struct Control_PowerTrainCommandDefaultTypeInternal {
  constexpr Control_PowerTrainCommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Control_PowerTrainCommandDefaultTypeInternal() {}
  union {
    Control_PowerTrainCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Control_PowerTrainCommandDefaultTypeInternal _Control_PowerTrainCommand_default_instance_;
constexpr Control::Control(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , pedal_cmd_(nullptr)
  , acc_cmd_(nullptr)
  , body_cmd_(nullptr)
  , chassis_cmd_(nullptr)
  , powertrain_cmd_(nullptr)
  , acc_steer_cmd_(nullptr)
  , control_mode_(0)

  , contrl_type_(0)

  , gear_cmd_(0)
{}
struct ControlDefaultTypeInternal {
  constexpr ControlDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlDefaultTypeInternal() {}
  union {
    Control _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlDefaultTypeInternal _Control_default_instance_;
constexpr ControlSAIC::ControlSAIC(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : torquereq_(0)
  , steerreq_(0)
  , brakepressurereq_(0)
  , accreq_(0)
  , drivemodereq_(0){}
struct ControlSAICDefaultTypeInternal {
  constexpr ControlSAICDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlSAICDefaultTypeInternal() {}
  union {
    ControlSAIC _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlSAICDefaultTypeInternal _ControlSAIC_default_instance_;
}  // namespace sim_msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_control_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_control_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_control_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_control_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PedalControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PedalControl, steer_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PedalControl, throttle_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PedalControl, brake_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccControl, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccControl, front_wheel_angle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccSteerControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccSteerControl, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_AccSteerControl, steer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, horn_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, turn_light_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, position_lamp_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, low_beam_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, high_beam_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, warn_light_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_BodyCommand, fog_lamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_ChassisCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_ChassisCommand, epb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PowerTrainCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control_PowerTrainCommand, switch_off_engine_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, header_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, control_mode_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, contrl_type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, gear_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, pedal_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, acc_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, body_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, chassis_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, powertrain_cmd_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Control, acc_steer_cmd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, torquereq_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, steerreq_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, drivemodereq_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, brakepressurereq_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ControlSAIC, accreq_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Control_PedalControl)},
  { 8, -1, sizeof(::sim_msg::Control_AccControl)},
  { 15, -1, sizeof(::sim_msg::Control_AccSteerControl)},
  { 22, -1, sizeof(::sim_msg::Control_BodyCommand)},
  { 34, -1, sizeof(::sim_msg::Control_ChassisCommand)},
  { 40, -1, sizeof(::sim_msg::Control_PowerTrainCommand)},
  { 46, -1, sizeof(::sim_msg::Control)},
  { 61, -1, sizeof(::sim_msg::ControlSAIC)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_PedalControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_AccControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_AccSteerControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_BodyCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_ChassisCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_PowerTrainCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Control_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ControlSAIC_default_instance_),
};

const char descriptor_table_protodef_control_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rcontrol.proto\022\007sim_msg\032\014header.proto\"\277"
  "\n\n\007Control\022\037\n\006header\030\001 \001(\0132\017.sim_msg.Hea"
  "der\0223\n\014control_mode\030\002 \001(\0162\035.sim_msg.Cont"
  "rol.CONTROL_MODE\0222\n\013contrl_type\030\003 \001(\0162\035."
  "sim_msg.Control.CONTROL_TYPE\022,\n\010gear_cmd"
  "\030\004 \001(\0162\032.sim_msg.Control.GEAR_MODE\0220\n\tpe"
  "dal_cmd\030\005 \001(\0132\035.sim_msg.Control.PedalCon"
  "trol\022,\n\007acc_cmd\030\006 \001(\0132\033.sim_msg.Control."
  "AccControl\022.\n\010body_cmd\030\007 \001(\0132\034.sim_msg.C"
  "ontrol.BodyCommand\0224\n\013chassis_cmd\030\010 \001(\0132"
  "\037.sim_msg.Control.ChassisCommand\022:\n\016powe"
  "rtrain_cmd\030\t \001(\0132\".sim_msg.Control.Power"
  "TrainCommand\0227\n\racc_steer_cmd\030\n \001(\0132 .si"
  "m_msg.Control.AccSteerControl\032>\n\014PedalCo"
  "ntrol\022\r\n\005steer\030\001 \001(\001\022\020\n\010throttle\030\002 \001(\001\022\r"
  "\n\005brake\030\003 \001(\001\0324\n\nAccControl\022\013\n\003acc\030\001 \001(\001"
  "\022\031\n\021front_wheel_angle\030\002 \001(\001\032-\n\017AccSteerC"
  "ontrol\022\013\n\003acc\030\001 \001(\001\022\r\n\005steer\030\002 \001(\001\032\307\001\n\013B"
  "odyCommand\022\014\n\004horn\030\001 \001(\010\022.\n\nturn_light\030\002"
  " \001(\0162\032.sim_msg.Control.TurnLight\022\025\n\rposi"
  "tion_lamp\030\003 \001(\010\022\020\n\010low_beam\030\004 \001(\010\022\021\n\thig"
  "h_beam\030\005 \001(\010\022\022\n\nwarn_light\030\006 \001(\010\022*\n\010fog_"
  "lamp\030\007 \001(\0162\030.sim_msg.Control.FogLamp\032\035\n\016"
  "ChassisCommand\022\013\n\003epb\030\001 \001(\010\032.\n\021PowerTrai"
  "nCommand\022\031\n\021switch_off_engine\030\001 \001(\010\"V\n\014C"
  "ONTROL_MODE\022\r\n\tCM_MANUAL\020\000\022\021\n\rCM_AUTO_DR"
  "IVE\020\001\022\021\n\rCM_ONLY_STEER\020\002\022\021\n\rCM_ONLY_SPEE"
  "D\020\003\"J\n\tGEAR_MODE\022\016\n\nNO_CONTROL\020\000\022\010\n\004PARK"
  "\020\001\022\013\n\007REVERSE\020\002\022\013\n\007NEUTRAL\020\003\022\t\n\005DRIVE\020\004\""
  "I\n\014CONTROL_TYPE\022\021\n\rPEDAL_CONTROL\020\000\022\017\n\013AC"
  "C_CONTROL\020\001\022\025\n\021ACC_STEER_CONTROL\020\002\">\n\tTu"
  "rnLight\022\022\n\016TURN_LIGHT_OFF\020\000\022\r\n\tTURN_LEFT"
  "\020\001\022\016\n\nTURN_RIGHT\020\002\"T\n\007FogLamp\022\020\n\014FOG_LAM"
  "P_OFF\020\000\022\022\n\016FRONT_FOG_LAMP\020\001\022\021\n\rREAR_FOG_"
  "LAMP\020\002\022\020\n\014ALL_FOG_LAMP\020\003\"r\n\013ControlSAIC\022"
  "\021\n\ttorqueReq\030\001 \001(\001\022\020\n\010steerReq\030\002 \001(\001\022\024\n\014"
  "driveModeReq\030\003 \001(\005\022\030\n\020brakePressureReq\030\004"
  " \001(\001\022\016\n\006accReq\030\005 \001(\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_control_2eproto_deps[1] = {
  &::descriptor_table_header_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_control_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_control_2eproto = {
  false, false, 1508, descriptor_table_protodef_control_2eproto, "control.proto", 
  &descriptor_table_control_2eproto_once, descriptor_table_control_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_control_2eproto::offsets,
  file_level_metadata_control_2eproto, file_level_enum_descriptors_control_2eproto, file_level_service_descriptors_control_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_control_2eproto_getter() {
  return &descriptor_table_control_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_control_2eproto(&descriptor_table_control_2eproto);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_CONTROL_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[0];
}
bool Control_CONTROL_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_CONTROL_MODE Control::CM_MANUAL;
constexpr Control_CONTROL_MODE Control::CM_AUTO_DRIVE;
constexpr Control_CONTROL_MODE Control::CM_ONLY_STEER;
constexpr Control_CONTROL_MODE Control::CM_ONLY_SPEED;
constexpr Control_CONTROL_MODE Control::CONTROL_MODE_MIN;
constexpr Control_CONTROL_MODE Control::CONTROL_MODE_MAX;
constexpr int Control::CONTROL_MODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_GEAR_MODE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[1];
}
bool Control_GEAR_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_GEAR_MODE Control::NO_CONTROL;
constexpr Control_GEAR_MODE Control::PARK;
constexpr Control_GEAR_MODE Control::REVERSE;
constexpr Control_GEAR_MODE Control::NEUTRAL;
constexpr Control_GEAR_MODE Control::DRIVE;
constexpr Control_GEAR_MODE Control::GEAR_MODE_MIN;
constexpr Control_GEAR_MODE Control::GEAR_MODE_MAX;
constexpr int Control::GEAR_MODE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_CONTROL_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[2];
}
bool Control_CONTROL_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_CONTROL_TYPE Control::PEDAL_CONTROL;
constexpr Control_CONTROL_TYPE Control::ACC_CONTROL;
constexpr Control_CONTROL_TYPE Control::ACC_STEER_CONTROL;
constexpr Control_CONTROL_TYPE Control::CONTROL_TYPE_MIN;
constexpr Control_CONTROL_TYPE Control::CONTROL_TYPE_MAX;
constexpr int Control::CONTROL_TYPE_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_TurnLight_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[3];
}
bool Control_TurnLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_TurnLight Control::TURN_LIGHT_OFF;
constexpr Control_TurnLight Control::TURN_LEFT;
constexpr Control_TurnLight Control::TURN_RIGHT;
constexpr Control_TurnLight Control::TurnLight_MIN;
constexpr Control_TurnLight Control::TurnLight_MAX;
constexpr int Control::TurnLight_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Control_FogLamp_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_control_2eproto);
  return file_level_enum_descriptors_control_2eproto[4];
}
bool Control_FogLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Control_FogLamp Control::FOG_LAMP_OFF;
constexpr Control_FogLamp Control::FRONT_FOG_LAMP;
constexpr Control_FogLamp Control::REAR_FOG_LAMP;
constexpr Control_FogLamp Control::ALL_FOG_LAMP;
constexpr Control_FogLamp Control::FogLamp_MIN;
constexpr Control_FogLamp Control::FogLamp_MAX;
constexpr int Control::FogLamp_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Control_PedalControl::_Internal {
 public:
};

Control_PedalControl::Control_PedalControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.PedalControl)
}
Control_PedalControl::Control_PedalControl(const Control_PedalControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&steer_, &from.steer_,
    static_cast<size_t>(reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&steer_)) + sizeof(brake_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.PedalControl)
}

inline void Control_PedalControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&steer_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&steer_)) + sizeof(brake_));
}

Control_PedalControl::~Control_PedalControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.PedalControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_PedalControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_PedalControl::ArenaDtor(void* object) {
  Control_PedalControl* _this = reinterpret_cast< Control_PedalControl* >(object);
  (void)_this;
}
void Control_PedalControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_PedalControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_PedalControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.PedalControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&steer_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&brake_) -
      reinterpret_cast<char*>(&steer_)) + sizeof(brake_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_PedalControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double steer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double throttle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          throttle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double brake = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          brake_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_PedalControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.PedalControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double steer = 1;
  if (!(this->_internal_steer() <= 0 && this->_internal_steer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_steer(), target);
  }

  // double throttle = 2;
  if (!(this->_internal_throttle() <= 0 && this->_internal_throttle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_throttle(), target);
  }

  // double brake = 3;
  if (!(this->_internal_brake() <= 0 && this->_internal_brake() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_brake(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.PedalControl)
  return target;
}

size_t Control_PedalControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.PedalControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double steer = 1;
  if (!(this->_internal_steer() <= 0 && this->_internal_steer() >= 0)) {
    total_size += 1 + 8;
  }

  // double throttle = 2;
  if (!(this->_internal_throttle() <= 0 && this->_internal_throttle() >= 0)) {
    total_size += 1 + 8;
  }

  // double brake = 3;
  if (!(this->_internal_brake() <= 0 && this->_internal_brake() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_PedalControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_PedalControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_PedalControl::GetClassData() const { return &_class_data_; }

void Control_PedalControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_PedalControl *>(to)->MergeFrom(
      static_cast<const Control_PedalControl &>(from));
}


void Control_PedalControl::MergeFrom(const Control_PedalControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.PedalControl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_steer() <= 0 && from._internal_steer() >= 0)) {
    _internal_set_steer(from._internal_steer());
  }
  if (!(from._internal_throttle() <= 0 && from._internal_throttle() >= 0)) {
    _internal_set_throttle(from._internal_throttle());
  }
  if (!(from._internal_brake() <= 0 && from._internal_brake() >= 0)) {
    _internal_set_brake(from._internal_brake());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_PedalControl::CopyFrom(const Control_PedalControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.PedalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_PedalControl::IsInitialized() const {
  return true;
}

void Control_PedalControl::InternalSwap(Control_PedalControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control_PedalControl, brake_)
      + sizeof(Control_PedalControl::brake_)
      - PROTOBUF_FIELD_OFFSET(Control_PedalControl, steer_)>(
          reinterpret_cast<char*>(&steer_),
          reinterpret_cast<char*>(&other->steer_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_PedalControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[0]);
}

// ===================================================================

class Control_AccControl::_Internal {
 public:
};

Control_AccControl::Control_AccControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.AccControl)
}
Control_AccControl::Control_AccControl(const Control_AccControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_, &from.acc_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_wheel_angle_) -
    reinterpret_cast<char*>(&acc_)) + sizeof(front_wheel_angle_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.AccControl)
}

inline void Control_AccControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&front_wheel_angle_) -
    reinterpret_cast<char*>(&acc_)) + sizeof(front_wheel_angle_));
}

Control_AccControl::~Control_AccControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.AccControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_AccControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_AccControl::ArenaDtor(void* object) {
  Control_AccControl* _this = reinterpret_cast< Control_AccControl* >(object);
  (void)_this;
}
void Control_AccControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_AccControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_AccControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.AccControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_wheel_angle_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(front_wheel_angle_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_AccControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double front_wheel_angle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          front_wheel_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_AccControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.AccControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc(), target);
  }

  // double front_wheel_angle = 2;
  if (!(this->_internal_front_wheel_angle() <= 0 && this->_internal_front_wheel_angle() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_front_wheel_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.AccControl)
  return target;
}

size_t Control_AccControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.AccControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    total_size += 1 + 8;
  }

  // double front_wheel_angle = 2;
  if (!(this->_internal_front_wheel_angle() <= 0 && this->_internal_front_wheel_angle() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_AccControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_AccControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_AccControl::GetClassData() const { return &_class_data_; }

void Control_AccControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_AccControl *>(to)->MergeFrom(
      static_cast<const Control_AccControl &>(from));
}


void Control_AccControl::MergeFrom(const Control_AccControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.AccControl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_acc() <= 0 && from._internal_acc() >= 0)) {
    _internal_set_acc(from._internal_acc());
  }
  if (!(from._internal_front_wheel_angle() <= 0 && from._internal_front_wheel_angle() >= 0)) {
    _internal_set_front_wheel_angle(from._internal_front_wheel_angle());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_AccControl::CopyFrom(const Control_AccControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.AccControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_AccControl::IsInitialized() const {
  return true;
}

void Control_AccControl::InternalSwap(Control_AccControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control_AccControl, front_wheel_angle_)
      + sizeof(Control_AccControl::front_wheel_angle_)
      - PROTOBUF_FIELD_OFFSET(Control_AccControl, acc_)>(
          reinterpret_cast<char*>(&acc_),
          reinterpret_cast<char*>(&other->acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_AccControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[1]);
}

// ===================================================================

class Control_AccSteerControl::_Internal {
 public:
};

Control_AccSteerControl::Control_AccSteerControl(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.AccSteerControl)
}
Control_AccSteerControl::Control_AccSteerControl(const Control_AccSteerControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&acc_, &from.acc_,
    static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&acc_)) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.AccSteerControl)
}

inline void Control_AccSteerControl::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&acc_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&acc_)) + sizeof(steer_));
}

Control_AccSteerControl::~Control_AccSteerControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.AccSteerControl)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_AccSteerControl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_AccSteerControl::ArenaDtor(void* object) {
  Control_AccSteerControl* _this = reinterpret_cast< Control_AccSteerControl* >(object);
  (void)_this;
}
void Control_AccSteerControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_AccSteerControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_AccSteerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.AccSteerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&acc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&steer_) -
      reinterpret_cast<char*>(&acc_)) + sizeof(steer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_AccSteerControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double acc = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          steer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_AccSteerControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.AccSteerControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_acc(), target);
  }

  // double steer = 2;
  if (!(this->_internal_steer() <= 0 && this->_internal_steer() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.AccSteerControl)
  return target;
}

size_t Control_AccSteerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.AccSteerControl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double acc = 1;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    total_size += 1 + 8;
  }

  // double steer = 2;
  if (!(this->_internal_steer() <= 0 && this->_internal_steer() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_AccSteerControl::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_AccSteerControl::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_AccSteerControl::GetClassData() const { return &_class_data_; }

void Control_AccSteerControl::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_AccSteerControl *>(to)->MergeFrom(
      static_cast<const Control_AccSteerControl &>(from));
}


void Control_AccSteerControl::MergeFrom(const Control_AccSteerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.AccSteerControl)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_acc() <= 0 && from._internal_acc() >= 0)) {
    _internal_set_acc(from._internal_acc());
  }
  if (!(from._internal_steer() <= 0 && from._internal_steer() >= 0)) {
    _internal_set_steer(from._internal_steer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_AccSteerControl::CopyFrom(const Control_AccSteerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.AccSteerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_AccSteerControl::IsInitialized() const {
  return true;
}

void Control_AccSteerControl::InternalSwap(Control_AccSteerControl* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control_AccSteerControl, steer_)
      + sizeof(Control_AccSteerControl::steer_)
      - PROTOBUF_FIELD_OFFSET(Control_AccSteerControl, acc_)>(
          reinterpret_cast<char*>(&acc_),
          reinterpret_cast<char*>(&other->acc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_AccSteerControl::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[2]);
}

// ===================================================================

class Control_BodyCommand::_Internal {
 public:
};

Control_BodyCommand::Control_BodyCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.BodyCommand)
}
Control_BodyCommand::Control_BodyCommand(const Control_BodyCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&turn_light_, &from.turn_light_,
    static_cast<size_t>(reinterpret_cast<char*>(&fog_lamp_) -
    reinterpret_cast<char*>(&turn_light_)) + sizeof(fog_lamp_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.BodyCommand)
}

inline void Control_BodyCommand::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&turn_light_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fog_lamp_) -
    reinterpret_cast<char*>(&turn_light_)) + sizeof(fog_lamp_));
}

Control_BodyCommand::~Control_BodyCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.BodyCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_BodyCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_BodyCommand::ArenaDtor(void* object) {
  Control_BodyCommand* _this = reinterpret_cast< Control_BodyCommand* >(object);
  (void)_this;
}
void Control_BodyCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_BodyCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_BodyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.BodyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&turn_light_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fog_lamp_) -
      reinterpret_cast<char*>(&turn_light_)) + sizeof(fog_lamp_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_BodyCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool horn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          horn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.TurnLight turn_light = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_turn_light(static_cast<::sim_msg::Control_TurnLight>(val));
        } else goto handle_unusual;
        continue;
      // bool position_lamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          position_lamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool low_beam = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          low_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool high_beam = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          high_beam_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool warn_light = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          warn_light_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.FogLamp fog_lamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_fog_lamp(static_cast<::sim_msg::Control_FogLamp>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_BodyCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.BodyCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool horn = 1;
  if (this->_internal_horn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_horn(), target);
  }

  // .sim_msg.Control.TurnLight turn_light = 2;
  if (this->_internal_turn_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_turn_light(), target);
  }

  // bool position_lamp = 3;
  if (this->_internal_position_lamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_position_lamp(), target);
  }

  // bool low_beam = 4;
  if (this->_internal_low_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_low_beam(), target);
  }

  // bool high_beam = 5;
  if (this->_internal_high_beam() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_high_beam(), target);
  }

  // bool warn_light = 6;
  if (this->_internal_warn_light() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_warn_light(), target);
  }

  // .sim_msg.Control.FogLamp fog_lamp = 7;
  if (this->_internal_fog_lamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_fog_lamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.BodyCommand)
  return target;
}

size_t Control_BodyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.BodyCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Control.TurnLight turn_light = 2;
  if (this->_internal_turn_light() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_turn_light());
  }

  // bool horn = 1;
  if (this->_internal_horn() != 0) {
    total_size += 1 + 1;
  }

  // bool position_lamp = 3;
  if (this->_internal_position_lamp() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam = 4;
  if (this->_internal_low_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam = 5;
  if (this->_internal_high_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool warn_light = 6;
  if (this->_internal_warn_light() != 0) {
    total_size += 1 + 1;
  }

  // .sim_msg.Control.FogLamp fog_lamp = 7;
  if (this->_internal_fog_lamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fog_lamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_BodyCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_BodyCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_BodyCommand::GetClassData() const { return &_class_data_; }

void Control_BodyCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_BodyCommand *>(to)->MergeFrom(
      static_cast<const Control_BodyCommand &>(from));
}


void Control_BodyCommand::MergeFrom(const Control_BodyCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.BodyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_turn_light() != 0) {
    _internal_set_turn_light(from._internal_turn_light());
  }
  if (from._internal_horn() != 0) {
    _internal_set_horn(from._internal_horn());
  }
  if (from._internal_position_lamp() != 0) {
    _internal_set_position_lamp(from._internal_position_lamp());
  }
  if (from._internal_low_beam() != 0) {
    _internal_set_low_beam(from._internal_low_beam());
  }
  if (from._internal_high_beam() != 0) {
    _internal_set_high_beam(from._internal_high_beam());
  }
  if (from._internal_warn_light() != 0) {
    _internal_set_warn_light(from._internal_warn_light());
  }
  if (from._internal_fog_lamp() != 0) {
    _internal_set_fog_lamp(from._internal_fog_lamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_BodyCommand::CopyFrom(const Control_BodyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.BodyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_BodyCommand::IsInitialized() const {
  return true;
}

void Control_BodyCommand::InternalSwap(Control_BodyCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control_BodyCommand, fog_lamp_)
      + sizeof(Control_BodyCommand::fog_lamp_)
      - PROTOBUF_FIELD_OFFSET(Control_BodyCommand, turn_light_)>(
          reinterpret_cast<char*>(&turn_light_),
          reinterpret_cast<char*>(&other->turn_light_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_BodyCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[3]);
}

// ===================================================================

class Control_ChassisCommand::_Internal {
 public:
};

Control_ChassisCommand::Control_ChassisCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.ChassisCommand)
}
Control_ChassisCommand::Control_ChassisCommand(const Control_ChassisCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  epb_ = from.epb_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.ChassisCommand)
}

inline void Control_ChassisCommand::SharedCtor() {
epb_ = false;
}

Control_ChassisCommand::~Control_ChassisCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.ChassisCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_ChassisCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_ChassisCommand::ArenaDtor(void* object) {
  Control_ChassisCommand* _this = reinterpret_cast< Control_ChassisCommand* >(object);
  (void)_this;
}
void Control_ChassisCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_ChassisCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_ChassisCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.ChassisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  epb_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_ChassisCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool epb = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          epb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_ChassisCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.ChassisCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool epb = 1;
  if (this->_internal_epb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_epb(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.ChassisCommand)
  return target;
}

size_t Control_ChassisCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.ChassisCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool epb = 1;
  if (this->_internal_epb() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_ChassisCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_ChassisCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_ChassisCommand::GetClassData() const { return &_class_data_; }

void Control_ChassisCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_ChassisCommand *>(to)->MergeFrom(
      static_cast<const Control_ChassisCommand &>(from));
}


void Control_ChassisCommand::MergeFrom(const Control_ChassisCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.ChassisCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_epb() != 0) {
    _internal_set_epb(from._internal_epb());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_ChassisCommand::CopyFrom(const Control_ChassisCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.ChassisCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_ChassisCommand::IsInitialized() const {
  return true;
}

void Control_ChassisCommand::InternalSwap(Control_ChassisCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(epb_, other->epb_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_ChassisCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[4]);
}

// ===================================================================

class Control_PowerTrainCommand::_Internal {
 public:
};

Control_PowerTrainCommand::Control_PowerTrainCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control.PowerTrainCommand)
}
Control_PowerTrainCommand::Control_PowerTrainCommand(const Control_PowerTrainCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  switch_off_engine_ = from.switch_off_engine_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.PowerTrainCommand)
}

inline void Control_PowerTrainCommand::SharedCtor() {
switch_off_engine_ = false;
}

Control_PowerTrainCommand::~Control_PowerTrainCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.PowerTrainCommand)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control_PowerTrainCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Control_PowerTrainCommand::ArenaDtor(void* object) {
  Control_PowerTrainCommand* _this = reinterpret_cast< Control_PowerTrainCommand* >(object);
  (void)_this;
}
void Control_PowerTrainCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control_PowerTrainCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control_PowerTrainCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.PowerTrainCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch_off_engine_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control_PowerTrainCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool switch_off_engine = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          switch_off_engine_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control_PowerTrainCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.PowerTrainCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool switch_off_engine = 1;
  if (this->_internal_switch_off_engine() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_switch_off_engine(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.PowerTrainCommand)
  return target;
}

size_t Control_PowerTrainCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.PowerTrainCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool switch_off_engine = 1;
  if (this->_internal_switch_off_engine() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control_PowerTrainCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control_PowerTrainCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control_PowerTrainCommand::GetClassData() const { return &_class_data_; }

void Control_PowerTrainCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control_PowerTrainCommand *>(to)->MergeFrom(
      static_cast<const Control_PowerTrainCommand &>(from));
}


void Control_PowerTrainCommand::MergeFrom(const Control_PowerTrainCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.PowerTrainCommand)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_switch_off_engine() != 0) {
    _internal_set_switch_off_engine(from._internal_switch_off_engine());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control_PowerTrainCommand::CopyFrom(const Control_PowerTrainCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.PowerTrainCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_PowerTrainCommand::IsInitialized() const {
  return true;
}

void Control_PowerTrainCommand::InternalSwap(Control_PowerTrainCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(switch_off_engine_, other->switch_off_engine_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Control_PowerTrainCommand::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[5]);
}

// ===================================================================

class Control::_Internal {
 public:
  static const ::sim_msg::Header& header(const Control* msg);
  static const ::sim_msg::Control_PedalControl& pedal_cmd(const Control* msg);
  static const ::sim_msg::Control_AccControl& acc_cmd(const Control* msg);
  static const ::sim_msg::Control_BodyCommand& body_cmd(const Control* msg);
  static const ::sim_msg::Control_ChassisCommand& chassis_cmd(const Control* msg);
  static const ::sim_msg::Control_PowerTrainCommand& powertrain_cmd(const Control* msg);
  static const ::sim_msg::Control_AccSteerControl& acc_steer_cmd(const Control* msg);
};

const ::sim_msg::Header&
Control::_Internal::header(const Control* msg) {
  return *msg->header_;
}
const ::sim_msg::Control_PedalControl&
Control::_Internal::pedal_cmd(const Control* msg) {
  return *msg->pedal_cmd_;
}
const ::sim_msg::Control_AccControl&
Control::_Internal::acc_cmd(const Control* msg) {
  return *msg->acc_cmd_;
}
const ::sim_msg::Control_BodyCommand&
Control::_Internal::body_cmd(const Control* msg) {
  return *msg->body_cmd_;
}
const ::sim_msg::Control_ChassisCommand&
Control::_Internal::chassis_cmd(const Control* msg) {
  return *msg->chassis_cmd_;
}
const ::sim_msg::Control_PowerTrainCommand&
Control::_Internal::powertrain_cmd(const Control* msg) {
  return *msg->powertrain_cmd_;
}
const ::sim_msg::Control_AccSteerControl&
Control::_Internal::acc_steer_cmd(const Control* msg) {
  return *msg->acc_steer_cmd_;
}
void Control::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
Control::Control(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Control)
}
Control::Control(const Control& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_pedal_cmd()) {
    pedal_cmd_ = new ::sim_msg::Control_PedalControl(*from.pedal_cmd_);
  } else {
    pedal_cmd_ = nullptr;
  }
  if (from._internal_has_acc_cmd()) {
    acc_cmd_ = new ::sim_msg::Control_AccControl(*from.acc_cmd_);
  } else {
    acc_cmd_ = nullptr;
  }
  if (from._internal_has_body_cmd()) {
    body_cmd_ = new ::sim_msg::Control_BodyCommand(*from.body_cmd_);
  } else {
    body_cmd_ = nullptr;
  }
  if (from._internal_has_chassis_cmd()) {
    chassis_cmd_ = new ::sim_msg::Control_ChassisCommand(*from.chassis_cmd_);
  } else {
    chassis_cmd_ = nullptr;
  }
  if (from._internal_has_powertrain_cmd()) {
    powertrain_cmd_ = new ::sim_msg::Control_PowerTrainCommand(*from.powertrain_cmd_);
  } else {
    powertrain_cmd_ = nullptr;
  }
  if (from._internal_has_acc_steer_cmd()) {
    acc_steer_cmd_ = new ::sim_msg::Control_AccSteerControl(*from.acc_steer_cmd_);
  } else {
    acc_steer_cmd_ = nullptr;
  }
  ::memcpy(&control_mode_, &from.control_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&control_mode_)) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control)
}

inline void Control::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&header_)) + sizeof(gear_cmd_));
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:sim_msg.Control)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Control::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete pedal_cmd_;
  if (this != internal_default_instance()) delete acc_cmd_;
  if (this != internal_default_instance()) delete body_cmd_;
  if (this != internal_default_instance()) delete chassis_cmd_;
  if (this != internal_default_instance()) delete powertrain_cmd_;
  if (this != internal_default_instance()) delete acc_steer_cmd_;
}

void Control::ArenaDtor(void* object) {
  Control* _this = reinterpret_cast< Control* >(object);
  (void)_this;
}
void Control::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Control::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pedal_cmd_ != nullptr) {
    delete pedal_cmd_;
  }
  pedal_cmd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acc_cmd_ != nullptr) {
    delete acc_cmd_;
  }
  acc_cmd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && body_cmd_ != nullptr) {
    delete body_cmd_;
  }
  body_cmd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && chassis_cmd_ != nullptr) {
    delete chassis_cmd_;
  }
  chassis_cmd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && powertrain_cmd_ != nullptr) {
    delete powertrain_cmd_;
  }
  powertrain_cmd_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acc_steer_cmd_ != nullptr) {
    delete acc_steer_cmd_;
  }
  acc_steer_cmd_ = nullptr;
  ::memset(&control_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&gear_cmd_) -
      reinterpret_cast<char*>(&control_mode_)) + sizeof(gear_cmd_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Control::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .sim_msg.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.CONTROL_MODE control_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_mode(static_cast<::sim_msg::Control_CONTROL_MODE>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_contrl_type(static_cast<::sim_msg::Control_CONTROL_TYPE>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gear_cmd(static_cast<::sim_msg::Control_GEAR_MODE>(val));
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.PedalControl pedal_cmd = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pedal_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.AccControl acc_cmd = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.BodyCommand body_cmd = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_body_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_chassis_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_powertrain_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_acc_steer_cmd(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Control::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .sim_msg.Control.CONTROL_MODE control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_control_mode(), target);
  }

  // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
  if (this->_internal_contrl_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_contrl_type(), target);
  }

  // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
  if (this->_internal_gear_cmd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_gear_cmd(), target);
  }

  // .sim_msg.Control.PedalControl pedal_cmd = 5;
  if (this->_internal_has_pedal_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::pedal_cmd(this), target, stream);
  }

  // .sim_msg.Control.AccControl acc_cmd = 6;
  if (this->_internal_has_acc_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::acc_cmd(this), target, stream);
  }

  // .sim_msg.Control.BodyCommand body_cmd = 7;
  if (this->_internal_has_body_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::body_cmd(this), target, stream);
  }

  // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
  if (this->_internal_has_chassis_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::chassis_cmd(this), target, stream);
  }

  // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
  if (this->_internal_has_powertrain_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::powertrain_cmd(this), target, stream);
  }

  // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
  if (this->_internal_has_acc_steer_cmd()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::acc_steer_cmd(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Header header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .sim_msg.Control.PedalControl pedal_cmd = 5;
  if (this->_internal_has_pedal_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pedal_cmd_);
  }

  // .sim_msg.Control.AccControl acc_cmd = 6;
  if (this->_internal_has_acc_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_cmd_);
  }

  // .sim_msg.Control.BodyCommand body_cmd = 7;
  if (this->_internal_has_body_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *body_cmd_);
  }

  // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
  if (this->_internal_has_chassis_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *chassis_cmd_);
  }

  // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
  if (this->_internal_has_powertrain_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *powertrain_cmd_);
  }

  // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
  if (this->_internal_has_acc_steer_cmd()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acc_steer_cmd_);
  }

  // .sim_msg.Control.CONTROL_MODE control_mode = 2;
  if (this->_internal_control_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_mode());
  }

  // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
  if (this->_internal_contrl_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contrl_type());
  }

  // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
  if (this->_internal_gear_cmd() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_gear_cmd());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Control::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Control::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Control::GetClassData() const { return &_class_data_; }

void Control::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Control *>(to)->MergeFrom(
      static_cast<const Control &>(from));
}


void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::sim_msg::Header::MergeFrom(from._internal_header());
  }
  if (from._internal_has_pedal_cmd()) {
    _internal_mutable_pedal_cmd()->::sim_msg::Control_PedalControl::MergeFrom(from._internal_pedal_cmd());
  }
  if (from._internal_has_acc_cmd()) {
    _internal_mutable_acc_cmd()->::sim_msg::Control_AccControl::MergeFrom(from._internal_acc_cmd());
  }
  if (from._internal_has_body_cmd()) {
    _internal_mutable_body_cmd()->::sim_msg::Control_BodyCommand::MergeFrom(from._internal_body_cmd());
  }
  if (from._internal_has_chassis_cmd()) {
    _internal_mutable_chassis_cmd()->::sim_msg::Control_ChassisCommand::MergeFrom(from._internal_chassis_cmd());
  }
  if (from._internal_has_powertrain_cmd()) {
    _internal_mutable_powertrain_cmd()->::sim_msg::Control_PowerTrainCommand::MergeFrom(from._internal_powertrain_cmd());
  }
  if (from._internal_has_acc_steer_cmd()) {
    _internal_mutable_acc_steer_cmd()->::sim_msg::Control_AccSteerControl::MergeFrom(from._internal_acc_steer_cmd());
  }
  if (from._internal_control_mode() != 0) {
    _internal_set_control_mode(from._internal_control_mode());
  }
  if (from._internal_contrl_type() != 0) {
    _internal_set_contrl_type(from._internal_contrl_type());
  }
  if (from._internal_gear_cmd() != 0) {
    _internal_set_gear_cmd(from._internal_gear_cmd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::InternalSwap(Control* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Control, gear_cmd_)
      + sizeof(Control::gear_cmd_)
      - PROTOBUF_FIELD_OFFSET(Control, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Control::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[6]);
}

// ===================================================================

class ControlSAIC::_Internal {
 public:
};

ControlSAIC::ControlSAIC(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.ControlSAIC)
}
ControlSAIC::ControlSAIC(const ControlSAIC& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&torquereq_, &from.torquereq_,
    static_cast<size_t>(reinterpret_cast<char*>(&drivemodereq_) -
    reinterpret_cast<char*>(&torquereq_)) + sizeof(drivemodereq_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ControlSAIC)
}

inline void ControlSAIC::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&torquereq_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&drivemodereq_) -
    reinterpret_cast<char*>(&torquereq_)) + sizeof(drivemodereq_));
}

ControlSAIC::~ControlSAIC() {
  // @@protoc_insertion_point(destructor:sim_msg.ControlSAIC)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlSAIC::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ControlSAIC::ArenaDtor(void* object) {
  ControlSAIC* _this = reinterpret_cast< ControlSAIC* >(object);
  (void)_this;
}
void ControlSAIC::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlSAIC::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlSAIC::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ControlSAIC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&torquereq_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drivemodereq_) -
      reinterpret_cast<char*>(&torquereq_)) + sizeof(drivemodereq_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlSAIC::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double torqueReq = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          torquereq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double steerReq = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          steerreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 driveModeReq = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          drivemodereq_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double brakePressureReq = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          brakepressurereq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double accReq = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          accreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ControlSAIC::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ControlSAIC)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double torqueReq = 1;
  if (!(this->_internal_torquereq() <= 0 && this->_internal_torquereq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_torquereq(), target);
  }

  // double steerReq = 2;
  if (!(this->_internal_steerreq() <= 0 && this->_internal_steerreq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_steerreq(), target);
  }

  // int32 driveModeReq = 3;
  if (this->_internal_drivemodereq() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_drivemodereq(), target);
  }

  // double brakePressureReq = 4;
  if (!(this->_internal_brakepressurereq() <= 0 && this->_internal_brakepressurereq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_brakepressurereq(), target);
  }

  // double accReq = 5;
  if (!(this->_internal_accreq() <= 0 && this->_internal_accreq() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_accreq(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ControlSAIC)
  return target;
}

size_t ControlSAIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ControlSAIC)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double torqueReq = 1;
  if (!(this->_internal_torquereq() <= 0 && this->_internal_torquereq() >= 0)) {
    total_size += 1 + 8;
  }

  // double steerReq = 2;
  if (!(this->_internal_steerreq() <= 0 && this->_internal_steerreq() >= 0)) {
    total_size += 1 + 8;
  }

  // double brakePressureReq = 4;
  if (!(this->_internal_brakepressurereq() <= 0 && this->_internal_brakepressurereq() >= 0)) {
    total_size += 1 + 8;
  }

  // double accReq = 5;
  if (!(this->_internal_accreq() <= 0 && this->_internal_accreq() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 driveModeReq = 3;
  if (this->_internal_drivemodereq() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_drivemodereq());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlSAIC::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlSAIC::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlSAIC::GetClassData() const { return &_class_data_; }

void ControlSAIC::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ControlSAIC *>(to)->MergeFrom(
      static_cast<const ControlSAIC &>(from));
}


void ControlSAIC::MergeFrom(const ControlSAIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ControlSAIC)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_torquereq() <= 0 && from._internal_torquereq() >= 0)) {
    _internal_set_torquereq(from._internal_torquereq());
  }
  if (!(from._internal_steerreq() <= 0 && from._internal_steerreq() >= 0)) {
    _internal_set_steerreq(from._internal_steerreq());
  }
  if (!(from._internal_brakepressurereq() <= 0 && from._internal_brakepressurereq() >= 0)) {
    _internal_set_brakepressurereq(from._internal_brakepressurereq());
  }
  if (!(from._internal_accreq() <= 0 && from._internal_accreq() >= 0)) {
    _internal_set_accreq(from._internal_accreq());
  }
  if (from._internal_drivemodereq() != 0) {
    _internal_set_drivemodereq(from._internal_drivemodereq());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlSAIC::CopyFrom(const ControlSAIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ControlSAIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSAIC::IsInitialized() const {
  return true;
}

void ControlSAIC::InternalSwap(ControlSAIC* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlSAIC, drivemodereq_)
      + sizeof(ControlSAIC::drivemodereq_)
      - PROTOBUF_FIELD_OFFSET(ControlSAIC, torquereq_)>(
          reinterpret_cast<char*>(&torquereq_),
          reinterpret_cast<char*>(&other->torquereq_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlSAIC::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_control_2eproto_getter, &descriptor_table_control_2eproto_once,
      file_level_metadata_control_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Control_PedalControl* Arena::CreateMaybeMessage< ::sim_msg::Control_PedalControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_PedalControl >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control_AccControl* Arena::CreateMaybeMessage< ::sim_msg::Control_AccControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_AccControl >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control_AccSteerControl* Arena::CreateMaybeMessage< ::sim_msg::Control_AccSteerControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_AccSteerControl >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control_BodyCommand* Arena::CreateMaybeMessage< ::sim_msg::Control_BodyCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_BodyCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control_ChassisCommand* Arena::CreateMaybeMessage< ::sim_msg::Control_ChassisCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_ChassisCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control_PowerTrainCommand* Arena::CreateMaybeMessage< ::sim_msg::Control_PowerTrainCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control_PowerTrainCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Control* Arena::CreateMaybeMessage< ::sim_msg::Control >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Control >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ControlSAIC* Arena::CreateMaybeMessage< ::sim_msg::ControlSAIC >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::ControlSAIC >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
