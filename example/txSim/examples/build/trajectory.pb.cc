// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#include "trajectory.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sim_msg {
constexpr TrajectoryPoint::TrajectoryPoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , t_(0)
  , v_(0)
  , theta_(0)
  , kappa_(0)
  , s_(0)
  , a_(0)
  , z_(0){}
struct TrajectoryPointDefaultTypeInternal {
  constexpr TrajectoryPointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryPointDefaultTypeInternal() {}
  union {
    TrajectoryPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
constexpr Trajectory::Trajectory(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : point_()
  , a_(0)
  , type_(0)
  , flag_(0){}
struct TrajectoryDefaultTypeInternal {
  constexpr TrajectoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrajectoryDefaultTypeInternal() {}
  union {
    Trajectory _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
}  // namespace sim_msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_trajectory_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_trajectory_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_trajectory_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_trajectory_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, theta_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, kappa_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, s_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, a_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrajectoryPoint, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trajectory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trajectory, point_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trajectory, a_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trajectory, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Trajectory, flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::TrajectoryPoint)},
  { 14, -1, sizeof(::sim_msg::Trajectory)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrajectoryPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Trajectory_default_instance_),
};

const char descriptor_table_protodef_trajectory_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020trajectory.proto\022\007sim_msg\"|\n\017Trajector"
  "yPoint\022\t\n\001x\030\001 \001(\001\022\t\n\001y\030\002 \001(\001\022\t\n\001t\030\003 \001(\001\022"
  "\t\n\001v\030\004 \001(\001\022\r\n\005theta\030\005 \001(\001\022\r\n\005kappa\030\006 \001(\001"
  "\022\t\n\001s\030\007 \001(\001\022\t\n\001a\030\010 \001(\001\022\t\n\001z\030\t \001(\001\"\\\n\nTra"
  "jectory\022\'\n\005point\030\001 \003(\0132\030.sim_msg.Traject"
  "oryPoint\022\t\n\001a\030\002 \001(\002\022\014\n\004type\030\003 \001(\005\022\014\n\004fla"
  "g\030\004 \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_trajectory_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trajectory_2eproto = {
  false, false, 255, descriptor_table_protodef_trajectory_2eproto, "trajectory.proto", 
  &descriptor_table_trajectory_2eproto_once, nullptr, 0, 2,
  schemas, file_default_instances, TableStruct_trajectory_2eproto::offsets,
  file_level_metadata_trajectory_2eproto, file_level_enum_descriptors_trajectory_2eproto, file_level_service_descriptors_trajectory_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_trajectory_2eproto_getter() {
  return &descriptor_table_trajectory_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_trajectory_2eproto(&descriptor_table_trajectory_2eproto);
namespace sim_msg {

// ===================================================================

class TrajectoryPoint::_Internal {
 public:
};

TrajectoryPoint::TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.TrajectoryPoint)
}
TrajectoryPoint::TrajectoryPoint(const TrajectoryPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrajectoryPoint)
}

inline void TrajectoryPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

TrajectoryPoint::~TrajectoryPoint() {
  // @@protoc_insertion_point(destructor:sim_msg.TrajectoryPoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrajectoryPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrajectoryPoint::ArenaDtor(void* object) {
  TrajectoryPoint* _this = reinterpret_cast< TrajectoryPoint* >(object);
  (void)_this;
}
void TrajectoryPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrajectoryPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrajectoryPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrajectoryPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double t = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double kappa = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          kappa_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double s = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          s_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double a = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double z = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrajectoryPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrajectoryPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double t = 3;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_t(), target);
  }

  // double v = 4;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_v(), target);
  }

  // double theta = 5;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_theta(), target);
  }

  // double kappa = 6;
  if (!(this->_internal_kappa() <= 0 && this->_internal_kappa() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_kappa(), target);
  }

  // double s = 7;
  if (!(this->_internal_s() <= 0 && this->_internal_s() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_s(), target);
  }

  // double a = 8;
  if (!(this->_internal_a() <= 0 && this->_internal_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_a(), target);
  }

  // double z = 9;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrajectoryPoint)
  return target;
}

size_t TrajectoryPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrajectoryPoint)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 2;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double t = 3;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 4;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 5;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double kappa = 6;
  if (!(this->_internal_kappa() <= 0 && this->_internal_kappa() >= 0)) {
    total_size += 1 + 8;
  }

  // double s = 7;
  if (!(this->_internal_s() <= 0 && this->_internal_s() >= 0)) {
    total_size += 1 + 8;
  }

  // double a = 8;
  if (!(this->_internal_a() <= 0 && this->_internal_a() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 9;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrajectoryPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrajectoryPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrajectoryPoint::GetClassData() const { return &_class_data_; }

void TrajectoryPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TrajectoryPoint *>(to)->MergeFrom(
      static_cast<const TrajectoryPoint &>(from));
}


void TrajectoryPoint::MergeFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrajectoryPoint)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_t() <= 0 && from._internal_t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from._internal_v() <= 0 && from._internal_v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (!(from._internal_theta() <= 0 && from._internal_theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from._internal_kappa() <= 0 && from._internal_kappa() >= 0)) {
    _internal_set_kappa(from._internal_kappa());
  }
  if (!(from._internal_s() <= 0 && from._internal_s() >= 0)) {
    _internal_set_s(from._internal_s());
  }
  if (!(from._internal_a() <= 0 && from._internal_a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrajectoryPoint::CopyFrom(const TrajectoryPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrajectoryPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryPoint::IsInitialized() const {
  return true;
}

void TrajectoryPoint::InternalSwap(TrajectoryPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrajectoryPoint, z_)
      + sizeof(TrajectoryPoint::z_)
      - PROTOBUF_FIELD_OFFSET(TrajectoryPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrajectoryPoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_trajectory_2eproto_getter, &descriptor_table_trajectory_2eproto_once,
      file_level_metadata_trajectory_2eproto[0]);
}

// ===================================================================

class Trajectory::_Internal {
 public:
};

Trajectory::Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  point_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Trajectory)
}
Trajectory::Trajectory(const Trajectory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      point_(from.point_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a_, &from.a_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&a_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Trajectory)
}

inline void Trajectory::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&a_)) + sizeof(flag_));
}

Trajectory::~Trajectory() {
  // @@protoc_insertion_point(destructor:sim_msg.Trajectory)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Trajectory::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Trajectory::ArenaDtor(void* object) {
  Trajectory* _this = reinterpret_cast< Trajectory* >(object);
  (void)_this;
}
void Trajectory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Trajectory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Trajectory::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  ::memset(&a_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&a_)) + sizeof(flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Trajectory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sim_msg.TrajectoryPoint point = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_point(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // float a = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // int32 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 flag = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Trajectory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Trajectory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.TrajectoryPoint point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_point_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_point(i), target, stream);
  }

  // float a = 2;
  if (!(this->_internal_a() <= 0 && this->_internal_a() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_a(), target);
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_type(), target);
  }

  // int32 flag = 4;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Trajectory)
  return target;
}

size_t Trajectory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Trajectory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.TrajectoryPoint point = 1;
  total_size += 1UL * this->_internal_point_size();
  for (const auto& msg : this->point_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // float a = 2;
  if (!(this->_internal_a() <= 0 && this->_internal_a() >= 0)) {
    total_size += 1 + 4;
  }

  // int32 type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // int32 flag = 4;
  if (this->_internal_flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Trajectory::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Trajectory::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Trajectory::GetClassData() const { return &_class_data_; }

void Trajectory::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Trajectory *>(to)->MergeFrom(
      static_cast<const Trajectory &>(from));
}


void Trajectory::MergeFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Trajectory)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  if (!(from._internal_a() <= 0 && from._internal_a() >= 0)) {
    _internal_set_a(from._internal_a());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Trajectory::CopyFrom(const Trajectory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Trajectory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trajectory::IsInitialized() const {
  return true;
}

void Trajectory::InternalSwap(Trajectory* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  point_.InternalSwap(&other->point_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Trajectory, flag_)
      + sizeof(Trajectory::flag_)
      - PROTOBUF_FIELD_OFFSET(Trajectory, a_)>(
          reinterpret_cast<char*>(&a_),
          reinterpret_cast<char*>(&other->a_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Trajectory::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_trajectory_2eproto_getter, &descriptor_table_trajectory_2eproto_once,
      file_level_metadata_trajectory_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::TrajectoryPoint* Arena::CreateMaybeMessage< ::sim_msg::TrajectoryPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::TrajectoryPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Trajectory* Arena::CreateMaybeMessage< ::sim_msg::Trajectory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Trajectory >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
