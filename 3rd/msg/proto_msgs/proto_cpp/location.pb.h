// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_location_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_location_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_location_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_location_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_2eproto;
namespace sim_msg {
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Location* Arena::CreateMaybeMessage<::sim_msg::Location>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Location* New() const final {
    return new Location();
  }

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 2,
    kVelocityFieldNumber = 3,
    kAngularFieldNumber = 4,
    kRpyFieldNumber = 5,
    kAccelerationFieldNumber = 6,
    kTFieldNumber = 1,
  };
  // .sim_msg.Vec3 position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::sim_msg::Vec3& position() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Vec3* release_position();
  ::sim_msg::Vec3* mutable_position();
  void set_allocated_position(::sim_msg::Vec3* position);
  private:
  const ::sim_msg::Vec3& _internal_position() const;
  ::sim_msg::Vec3* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::sim_msg::Vec3* position);
  ::sim_msg::Vec3* unsafe_arena_release_position();

  // .sim_msg.Vec3 velocity = 3;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::sim_msg::Vec3& velocity() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Vec3* release_velocity();
  ::sim_msg::Vec3* mutable_velocity();
  void set_allocated_velocity(::sim_msg::Vec3* velocity);
  private:
  const ::sim_msg::Vec3& _internal_velocity() const;
  ::sim_msg::Vec3* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::sim_msg::Vec3* velocity);
  ::sim_msg::Vec3* unsafe_arena_release_velocity();

  // .sim_msg.Vec3 angular = 4;
  bool has_angular() const;
  private:
  bool _internal_has_angular() const;
  public:
  void clear_angular();
  const ::sim_msg::Vec3& angular() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Vec3* release_angular();
  ::sim_msg::Vec3* mutable_angular();
  void set_allocated_angular(::sim_msg::Vec3* angular);
  private:
  const ::sim_msg::Vec3& _internal_angular() const;
  ::sim_msg::Vec3* _internal_mutable_angular();
  public:
  void unsafe_arena_set_allocated_angular(
      ::sim_msg::Vec3* angular);
  ::sim_msg::Vec3* unsafe_arena_release_angular();

  // .sim_msg.Vec3 rpy = 5;
  bool has_rpy() const;
  private:
  bool _internal_has_rpy() const;
  public:
  void clear_rpy();
  const ::sim_msg::Vec3& rpy() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Vec3* release_rpy();
  ::sim_msg::Vec3* mutable_rpy();
  void set_allocated_rpy(::sim_msg::Vec3* rpy);
  private:
  const ::sim_msg::Vec3& _internal_rpy() const;
  ::sim_msg::Vec3* _internal_mutable_rpy();
  public:
  void unsafe_arena_set_allocated_rpy(
      ::sim_msg::Vec3* rpy);
  ::sim_msg::Vec3* unsafe_arena_release_rpy();

  // .sim_msg.Vec3 acceleration = 6;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::sim_msg::Vec3& acceleration() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Vec3* release_acceleration();
  ::sim_msg::Vec3* mutable_acceleration();
  void set_allocated_acceleration(::sim_msg::Vec3* acceleration);
  private:
  const ::sim_msg::Vec3& _internal_acceleration() const;
  ::sim_msg::Vec3* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::sim_msg::Vec3* acceleration);
  ::sim_msg::Vec3* unsafe_arena_release_acceleration();

  // double t = 1;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sim_msg::Vec3* position_;
  ::sim_msg::Vec3* velocity_;
  ::sim_msg::Vec3* angular_;
  ::sim_msg::Vec3* rpy_;
  ::sim_msg::Vec3* acceleration_;
  double t_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_location_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// double t = 1;
inline void Location::clear_t() {
  t_ = 0;
}
inline double Location::_internal_t() const {
  return t_;
}
inline double Location::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.t)
  return _internal_t();
}
inline void Location::_internal_set_t(double value) {
  
  t_ = value;
}
inline void Location::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:sim_msg.Location.t)
}

// .sim_msg.Vec3 position = 2;
inline bool Location::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Location::has_position() const {
  return _internal_has_position();
}
inline const ::sim_msg::Vec3& Location::_internal_position() const {
  const ::sim_msg::Vec3* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Vec3&>(
      ::sim_msg::_Vec3_default_instance_);
}
inline const ::sim_msg::Vec3& Location::position() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.position)
  return _internal_position();
}
inline void Location::unsafe_arena_set_allocated_position(
    ::sim_msg::Vec3* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Location.position)
}
inline ::sim_msg::Vec3* Location::release_position() {
  
  ::sim_msg::Vec3* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Vec3* Location::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.position)
  
  ::sim_msg::Vec3* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Location::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::sim_msg::Vec3* Location::mutable_position() {
  ::sim_msg::Vec3* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.position)
  return _msg;
}
inline void Location::set_allocated_position(::sim_msg::Vec3* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.position)
}

// .sim_msg.Vec3 velocity = 3;
inline bool Location::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool Location::has_velocity() const {
  return _internal_has_velocity();
}
inline const ::sim_msg::Vec3& Location::_internal_velocity() const {
  const ::sim_msg::Vec3* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Vec3&>(
      ::sim_msg::_Vec3_default_instance_);
}
inline const ::sim_msg::Vec3& Location::velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.velocity)
  return _internal_velocity();
}
inline void Location::unsafe_arena_set_allocated_velocity(
    ::sim_msg::Vec3* velocity) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Location.velocity)
}
inline ::sim_msg::Vec3* Location::release_velocity() {
  
  ::sim_msg::Vec3* temp = velocity_;
  velocity_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Vec3* Location::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.velocity)
  
  ::sim_msg::Vec3* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Location::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaForAllocation());
    velocity_ = p;
  }
  return velocity_;
}
inline ::sim_msg::Vec3* Location::mutable_velocity() {
  ::sim_msg::Vec3* _msg = _internal_mutable_velocity();
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.velocity)
  return _msg;
}
inline void Location::set_allocated_velocity(::sim_msg::Vec3* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity));
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.velocity)
}

// .sim_msg.Vec3 angular = 4;
inline bool Location::_internal_has_angular() const {
  return this != internal_default_instance() && angular_ != nullptr;
}
inline bool Location::has_angular() const {
  return _internal_has_angular();
}
inline const ::sim_msg::Vec3& Location::_internal_angular() const {
  const ::sim_msg::Vec3* p = angular_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Vec3&>(
      ::sim_msg::_Vec3_default_instance_);
}
inline const ::sim_msg::Vec3& Location::angular() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.angular)
  return _internal_angular();
}
inline void Location::unsafe_arena_set_allocated_angular(
    ::sim_msg::Vec3* angular) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Location.angular)
}
inline ::sim_msg::Vec3* Location::release_angular() {
  
  ::sim_msg::Vec3* temp = angular_;
  angular_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Vec3* Location::unsafe_arena_release_angular() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.angular)
  
  ::sim_msg::Vec3* temp = angular_;
  angular_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Location::_internal_mutable_angular() {
  
  if (angular_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaForAllocation());
    angular_ = p;
  }
  return angular_;
}
inline ::sim_msg::Vec3* Location::mutable_angular() {
  ::sim_msg::Vec3* _msg = _internal_mutable_angular();
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.angular)
  return _msg;
}
inline void Location::set_allocated_angular(::sim_msg::Vec3* angular) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular_);
  }
  if (angular) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(angular));
    if (message_arena != submessage_arena) {
      angular = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, angular, submessage_arena);
    }
    
  } else {
    
  }
  angular_ = angular;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.angular)
}

// .sim_msg.Vec3 rpy = 5;
inline bool Location::_internal_has_rpy() const {
  return this != internal_default_instance() && rpy_ != nullptr;
}
inline bool Location::has_rpy() const {
  return _internal_has_rpy();
}
inline const ::sim_msg::Vec3& Location::_internal_rpy() const {
  const ::sim_msg::Vec3* p = rpy_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Vec3&>(
      ::sim_msg::_Vec3_default_instance_);
}
inline const ::sim_msg::Vec3& Location::rpy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.rpy)
  return _internal_rpy();
}
inline void Location::unsafe_arena_set_allocated_rpy(
    ::sim_msg::Vec3* rpy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpy_);
  }
  rpy_ = rpy;
  if (rpy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Location.rpy)
}
inline ::sim_msg::Vec3* Location::release_rpy() {
  
  ::sim_msg::Vec3* temp = rpy_;
  rpy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Vec3* Location::unsafe_arena_release_rpy() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.rpy)
  
  ::sim_msg::Vec3* temp = rpy_;
  rpy_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Location::_internal_mutable_rpy() {
  
  if (rpy_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaForAllocation());
    rpy_ = p;
  }
  return rpy_;
}
inline ::sim_msg::Vec3* Location::mutable_rpy() {
  ::sim_msg::Vec3* _msg = _internal_mutable_rpy();
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.rpy)
  return _msg;
}
inline void Location::set_allocated_rpy(::sim_msg::Vec3* rpy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpy_);
  }
  if (rpy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rpy));
    if (message_arena != submessage_arena) {
      rpy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rpy, submessage_arena);
    }
    
  } else {
    
  }
  rpy_ = rpy;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.rpy)
}

// .sim_msg.Vec3 acceleration = 6;
inline bool Location::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool Location::has_acceleration() const {
  return _internal_has_acceleration();
}
inline const ::sim_msg::Vec3& Location::_internal_acceleration() const {
  const ::sim_msg::Vec3* p = acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Vec3&>(
      ::sim_msg::_Vec3_default_instance_);
}
inline const ::sim_msg::Vec3& Location::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.acceleration)
  return _internal_acceleration();
}
inline void Location::unsafe_arena_set_allocated_acceleration(
    ::sim_msg::Vec3* acceleration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Location.acceleration)
}
inline ::sim_msg::Vec3* Location::release_acceleration() {
  
  ::sim_msg::Vec3* temp = acceleration_;
  acceleration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Vec3* Location::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.acceleration)
  
  ::sim_msg::Vec3* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::sim_msg::Vec3* Location::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Vec3>(GetArenaForAllocation());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::sim_msg::Vec3* Location::mutable_acceleration() {
  ::sim_msg::Vec3* _msg = _internal_mutable_acceleration();
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.acceleration)
  return _msg;
}
inline void Location::set_allocated_acceleration(::sim_msg::Vec3* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration));
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.acceleration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_location_2eproto
