// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: trajectory.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_trajectory_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_trajectory_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_trajectory_2eproto;
namespace sim_msg {
class Trajectory;
struct TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
struct TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Trajectory* Arena::CreateMaybeMessage<::sim_msg::Trajectory>(Arena*);
template<> ::sim_msg::TrajectoryPoint* Arena::CreateMaybeMessage<::sim_msg::TrajectoryPoint>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

// ===================================================================

class TrajectoryPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrajectoryPoint) */ {
 public:
  inline TrajectoryPoint() : TrajectoryPoint(nullptr) {}
  ~TrajectoryPoint() override;
  explicit constexpr TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrajectoryPoint(const TrajectoryPoint& from);
  TrajectoryPoint(TrajectoryPoint&& from) noexcept
    : TrajectoryPoint() {
    *this = ::std::move(from);
  }

  inline TrajectoryPoint& operator=(const TrajectoryPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrajectoryPoint& operator=(TrajectoryPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrajectoryPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrajectoryPoint* internal_default_instance() {
    return reinterpret_cast<const TrajectoryPoint*>(
               &_TrajectoryPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TrajectoryPoint& a, TrajectoryPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrajectoryPoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrajectoryPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrajectoryPoint* New() const final {
    return new TrajectoryPoint();
  }

  TrajectoryPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrajectoryPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrajectoryPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrajectoryPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrajectoryPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrajectoryPoint";
  }
  protected:
  explicit TrajectoryPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kTFieldNumber = 3,
    kVFieldNumber = 4,
    kThetaFieldNumber = 5,
    kKappaFieldNumber = 6,
    kSFieldNumber = 7,
    kAFieldNumber = 8,
    kZFieldNumber = 9,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double t = 3;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // double v = 4;
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // double theta = 5;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double kappa = 6;
  void clear_kappa();
  double kappa() const;
  void set_kappa(double value);
  private:
  double _internal_kappa() const;
  void _internal_set_kappa(double value);
  public:

  // double s = 7;
  void clear_s();
  double s() const;
  void set_s(double value);
  private:
  double _internal_s() const;
  void _internal_set_s(double value);
  public:

  // double a = 8;
  void clear_a();
  double a() const;
  void set_a(double value);
  private:
  double _internal_a() const;
  void _internal_set_a(double value);
  public:

  // double z = 9;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.TrajectoryPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double t_;
  double v_;
  double theta_;
  double kappa_;
  double s_;
  double a_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trajectory_2eproto;
};
// -------------------------------------------------------------------

class Trajectory final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Trajectory) */ {
 public:
  inline Trajectory() : Trajectory(nullptr) {}
  ~Trajectory() override;
  explicit constexpr Trajectory(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Trajectory(const Trajectory& from);
  Trajectory(Trajectory&& from) noexcept
    : Trajectory() {
    *this = ::std::move(from);
  }

  inline Trajectory& operator=(const Trajectory& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trajectory& operator=(Trajectory&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trajectory& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trajectory* internal_default_instance() {
    return reinterpret_cast<const Trajectory*>(
               &_Trajectory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Trajectory& a, Trajectory& b) {
    a.Swap(&b);
  }
  inline void Swap(Trajectory* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trajectory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Trajectory* New() const final {
    return new Trajectory();
  }

  Trajectory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Trajectory>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Trajectory& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Trajectory& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Trajectory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Trajectory";
  }
  protected:
  explicit Trajectory(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kAFieldNumber = 2,
    kTypeFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // repeated .sim_msg.TrajectoryPoint point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::sim_msg::TrajectoryPoint* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryPoint >*
      mutable_point();
  private:
  const ::sim_msg::TrajectoryPoint& _internal_point(int index) const;
  ::sim_msg::TrajectoryPoint* _internal_add_point();
  public:
  const ::sim_msg::TrajectoryPoint& point(int index) const;
  ::sim_msg::TrajectoryPoint* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryPoint >&
      point() const;

  // float a = 2;
  void clear_a();
  float a() const;
  void set_a(float value);
  private:
  float _internal_a() const;
  void _internal_set_a(float value);
  public:

  // int32 type = 3;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flag = 4;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.Trajectory)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryPoint > point_;
  float a_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_trajectory_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TrajectoryPoint

// double x = 1;
inline void TrajectoryPoint::clear_x() {
  x_ = 0;
}
inline double TrajectoryPoint::_internal_x() const {
  return x_;
}
inline double TrajectoryPoint::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.x)
  return _internal_x();
}
inline void TrajectoryPoint::_internal_set_x(double value) {
  
  x_ = value;
}
inline void TrajectoryPoint::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.x)
}

// double y = 2;
inline void TrajectoryPoint::clear_y() {
  y_ = 0;
}
inline double TrajectoryPoint::_internal_y() const {
  return y_;
}
inline double TrajectoryPoint::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.y)
  return _internal_y();
}
inline void TrajectoryPoint::_internal_set_y(double value) {
  
  y_ = value;
}
inline void TrajectoryPoint::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.y)
}

// double t = 3;
inline void TrajectoryPoint::clear_t() {
  t_ = 0;
}
inline double TrajectoryPoint::_internal_t() const {
  return t_;
}
inline double TrajectoryPoint::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.t)
  return _internal_t();
}
inline void TrajectoryPoint::_internal_set_t(double value) {
  
  t_ = value;
}
inline void TrajectoryPoint::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.t)
}

// double v = 4;
inline void TrajectoryPoint::clear_v() {
  v_ = 0;
}
inline double TrajectoryPoint::_internal_v() const {
  return v_;
}
inline double TrajectoryPoint::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.v)
  return _internal_v();
}
inline void TrajectoryPoint::_internal_set_v(double value) {
  
  v_ = value;
}
inline void TrajectoryPoint::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.v)
}

// double theta = 5;
inline void TrajectoryPoint::clear_theta() {
  theta_ = 0;
}
inline double TrajectoryPoint::_internal_theta() const {
  return theta_;
}
inline double TrajectoryPoint::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.theta)
  return _internal_theta();
}
inline void TrajectoryPoint::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void TrajectoryPoint::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.theta)
}

// double kappa = 6;
inline void TrajectoryPoint::clear_kappa() {
  kappa_ = 0;
}
inline double TrajectoryPoint::_internal_kappa() const {
  return kappa_;
}
inline double TrajectoryPoint::kappa() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.kappa)
  return _internal_kappa();
}
inline void TrajectoryPoint::_internal_set_kappa(double value) {
  
  kappa_ = value;
}
inline void TrajectoryPoint::set_kappa(double value) {
  _internal_set_kappa(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.kappa)
}

// double s = 7;
inline void TrajectoryPoint::clear_s() {
  s_ = 0;
}
inline double TrajectoryPoint::_internal_s() const {
  return s_;
}
inline double TrajectoryPoint::s() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.s)
  return _internal_s();
}
inline void TrajectoryPoint::_internal_set_s(double value) {
  
  s_ = value;
}
inline void TrajectoryPoint::set_s(double value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.s)
}

// double a = 8;
inline void TrajectoryPoint::clear_a() {
  a_ = 0;
}
inline double TrajectoryPoint::_internal_a() const {
  return a_;
}
inline double TrajectoryPoint::a() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.a)
  return _internal_a();
}
inline void TrajectoryPoint::_internal_set_a(double value) {
  
  a_ = value;
}
inline void TrajectoryPoint::set_a(double value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.a)
}

// double z = 9;
inline void TrajectoryPoint::clear_z() {
  z_ = 0;
}
inline double TrajectoryPoint::_internal_z() const {
  return z_;
}
inline double TrajectoryPoint::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrajectoryPoint.z)
  return _internal_z();
}
inline void TrajectoryPoint::_internal_set_z(double value) {
  
  z_ = value;
}
inline void TrajectoryPoint::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrajectoryPoint.z)
}

// -------------------------------------------------------------------

// Trajectory

// repeated .sim_msg.TrajectoryPoint point = 1;
inline int Trajectory::_internal_point_size() const {
  return point_.size();
}
inline int Trajectory::point_size() const {
  return _internal_point_size();
}
inline void Trajectory::clear_point() {
  point_.Clear();
}
inline ::sim_msg::TrajectoryPoint* Trajectory::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Trajectory.point)
  return point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryPoint >*
Trajectory::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Trajectory.point)
  return &point_;
}
inline const ::sim_msg::TrajectoryPoint& Trajectory::_internal_point(int index) const {
  return point_.Get(index);
}
inline const ::sim_msg::TrajectoryPoint& Trajectory::point(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Trajectory.point)
  return _internal_point(index);
}
inline ::sim_msg::TrajectoryPoint* Trajectory::_internal_add_point() {
  return point_.Add();
}
inline ::sim_msg::TrajectoryPoint* Trajectory::add_point() {
  ::sim_msg::TrajectoryPoint* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:sim_msg.Trajectory.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrajectoryPoint >&
Trajectory::point() const {
  // @@protoc_insertion_point(field_list:sim_msg.Trajectory.point)
  return point_;
}

// float a = 2;
inline void Trajectory::clear_a() {
  a_ = 0;
}
inline float Trajectory::_internal_a() const {
  return a_;
}
inline float Trajectory::a() const {
  // @@protoc_insertion_point(field_get:sim_msg.Trajectory.a)
  return _internal_a();
}
inline void Trajectory::_internal_set_a(float value) {
  
  a_ = value;
}
inline void Trajectory::set_a(float value) {
  _internal_set_a(value);
  // @@protoc_insertion_point(field_set:sim_msg.Trajectory.a)
}

// int32 type = 3;
inline void Trajectory::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Trajectory.type)
  return _internal_type();
}
inline void Trajectory::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Trajectory::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sim_msg.Trajectory.type)
}

// int32 flag = 4;
inline void Trajectory::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Trajectory::flag() const {
  // @@protoc_insertion_point(field_get:sim_msg.Trajectory.flag)
  return _internal_flag();
}
inline void Trajectory::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void Trajectory::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:sim_msg.Trajectory.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_trajectory_2eproto
