// See README.txt for information and build instructions.
//
// Note: START and END tags are used in comments to define sections used in
// tutorials.  They are not part of the syntax for Protocol Buffers.
//
// To get an in-depth walkthrough of this file and the related examples, see:
// https://developers.google.com/protocol-buffers/docs/tutorials

// [START declaration]
syntax = "proto3";
package sim_msg;
// [END declaration]

import "trajectory.proto";
import "location.proto";

// [START messages]

message ManualVehicleControlInfo
{
  int32 id = 1;  
  Location veh_control_info = 2;
}

message ManualVehicleControlInfoArray
{
  repeated ManualVehicleControlInfo vehicles_control_info = 1;
}

enum ControlState
{
  Autonomous = 0; /*default*/
  Manual = 1;  
}

enum NearestObjectDirection
{
	FRONT = 0;
	BACK_DIRECTION = 1; /*RearVeh_CurrentLane*/
	LEFT = 2;
	LEFT_FRONT = 3;
	LEFT_BACK = 4;
	RIGHT = 5;
	RIGHT_FRONT = 6;
	RIGHT_BACK = 7;
}

message NearestObject
{
	int32 id = 1; /*note : -1 is invalid*/
	double euclid_dist = 2;	
	NearestObjectDirection dir = 3;
}

message Car {
  int32 id = 1;  
  double t = 2;
  double x = 3;
  double y = 4;
  double heading = 5;
  double v = 6;
  double vl = 7;
  double theta = 8;  
  double length = 9;	
  double width = 10;
  double height = 11;
  int32 type = 12;
  int32 laneId = 13;
  double acc = 14;
  int32 age = 15;
  double z = 16;
  uint64 tx_road_id = 17;
  uint64 tx_section_id = 18;
  int64 tx_lane_id = 19;
  uint64 tx_lanelink_id = 20;
  Trajectory planning_line = 21;
  double show_abs_velocity = 22;
  double show_abs_acc = 23;
  double show_relative_velocity = 24; /*vertical along to reference line*/
  double show_relative_acc =25; /*vertical along to reference line*/
  double show_relative_velocity_horizontal = 26; /*horizontal along to reference line*/
  double show_relative_acc_horizontal =27; /*horizontal along to reference line*/
  double show_relative_dist_vertical =28; 
  double show_relative_dist_horizontal =29;
  ControlState control_state = 30;
  repeated NearestObject show_NearestObjectInfo = 31;  /*note: 1. fixed size 8*/ /*std::vector< NearestObject > show_NearestObjectInfo; */
}

message StaticObstacle {
  int32 id = 1;  
  double t = 2;
  double x = 3;
  double y = 4;
  double heading = 5;
  double length = 6;
  double width = 7;
  double height = 8;
  int32 type = 9;
  int32 age = 10;
  double z = 11;
}

message DynamicObstacle {
  int32 id = 1;  
  double t = 2;
  double x = 3;
  double y = 4;
  double heading = 5;
  double length = 6;
  double width = 7;
  double height = 8;
  int32 type = 9;
  double v = 10;
  double vl = 11;
  double acc = 12;
  int32 age = 13;
  double z = 14;
}

message LaneUid {
  uint64 tx_road_id = 1;
  uint64 tx_section_id = 2;
  int64  tx_lane_id = 3;
}

enum Phase
{
  U = 0;
  L = 1;
  T = 2;
  R = 3;
}

message TrafficLight {
  int32 id = 1;  
  double x = 2;
  double y = 3;
  double heading = 4;
  int32 color = 5;
  int32 age = 6;
  double z = 7;
  uint64 tx_road_id = 8;/*deprecated 2020-08-24*/
  uint64 tx_section_id = 9;/*deprecated 2020-08-24*/
  int64 tx_lane_id = 10;/*deprecated 2020-08-24*/
  repeated LaneUid control_lanes = 11;
  repeated Phase   control_phases = 12;
}



message Traffic {
  repeated Car cars = 1;
  repeated StaticObstacle staticObstacles = 2;
  repeated DynamicObstacle dynamicObstacles = 3;
  repeated TrafficLight trafficLights = 4;
}
// [END messages]
