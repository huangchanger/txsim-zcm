// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: planStatus.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "planStatus.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class SteeringExpectationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SteeringExpectation> {
} _SteeringExpectation_default_instance_;
class AccelerationExpectationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AccelerationExpectation> {
} _AccelerationExpectation_default_instance_;
class PlanStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PlanStatus> {
} _PlanStatus_default_instance_;

namespace protobuf_planStatus_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[3];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringExpectation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SteeringExpectation, angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationExpectation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccelerationExpectation, acc_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, indicator_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, class__),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, expect_steering_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanStatus, expect_acc_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(SteeringExpectation)},
  { 5, -1, sizeof(AccelerationExpectation)},
  { 10, -1, sizeof(PlanStatus)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SteeringExpectation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_AccelerationExpectation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PlanStatus_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "planStatus.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 3);
}

}  // namespace

void TableStruct::Shutdown() {
  _SteeringExpectation_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _AccelerationExpectation_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _PlanStatus_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SteeringExpectation_default_instance_.DefaultConstruct();
  _AccelerationExpectation_default_instance_.DefaultConstruct();
  _PlanStatus_default_instance_.DefaultConstruct();
  _PlanStatus_default_instance_.get_mutable()->expect_steering_ = const_cast< ::sim_msg::SteeringExpectation*>(
      ::sim_msg::SteeringExpectation::internal_default_instance());
  _PlanStatus_default_instance_.get_mutable()->expect_acc_ = const_cast< ::sim_msg::AccelerationExpectation*>(
      ::sim_msg::AccelerationExpectation::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\020planStatus.proto\022\007sim_msg\"$\n\023SteeringE"
      "xpectation\022\r\n\005angle\030\001 \001(\001\"&\n\027Acceleratio"
      "nExpectation\022\013\n\003acc\030\001 \001(\001\"\370\001\n\nPlanStatus"
      "\0220\n\017indicator_state\030\001 \001(\0162\027.sim_msg.Indi"
      "catorState\022\037\n\004mode\030\002 \001(\0162\021.sim_msg.PlanM"
      "ode\022*\n\005class\030\003 \001(\0162\033.sim_msg.PlanClassif"
      "ication\0225\n\017expect_steering\030\004 \001(\0132\034.sim_m"
      "sg.SteeringExpectation\0224\n\nexpect_acc\030\005 \001"
      "(\0132 .sim_msg.AccelerationExpectation*\230\001\n"
      "\016IndicatorState\022\033\n\027INDICATOR_STATE_UNKNO"
      "WN\020\000\022\027\n\023INDICATOR_STATE_OFF\020\001\022\030\n\024INDICAT"
      "OR_STATE_LEFT\020\002\022\031\n\025INDICATOR_STATE_RIGHT"
      "\020\003\022\033\n\027INDICATOR_STATE_WARNING\020\004*V\n\010PlanM"
      "ode\022\031\n\025PLAN_MODE_FOLLOW_LANE\020\000\022\031\n\025PLAN_M"
      "ODE_CHANGE_LANE\020\001\022\024\n\020PLAN_MODE_MANUAL\020\002*"
      "\264\001\n\022PlanClassification\022\024\n\020PLAN_GO_STRAIG"
      "HT\020\000\022\022\n\016PLAN_TURN_LEFT\020\001\022\023\n\017PLAN_TURN_RI"
      "GHT\020\002\022\031\n\025PLAN_CHANGE_LANE_LEFT\020\003\022\032\n\026PLAN"
      "_CHANGE_LANE_RIGHT\020\004\022\022\n\016PLAN_PULL_OVER\020\005"
      "\022\024\n\020PLAN_TURN_AROUND\020\006b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 790);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "planStatus.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_planStatus_2eproto

const ::google::protobuf::EnumDescriptor* IndicatorState_descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_enum_descriptors[0];
}
bool IndicatorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlanMode_descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_enum_descriptors[1];
}
bool PlanMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PlanClassification_descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_enum_descriptors[2];
}
bool PlanClassification_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SteeringExpectation::kAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SteeringExpectation::SteeringExpectation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_planStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.SteeringExpectation)
}
SteeringExpectation::SteeringExpectation(const SteeringExpectation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  angle_ = from.angle_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.SteeringExpectation)
}

void SteeringExpectation::SharedCtor() {
  angle_ = 0;
  _cached_size_ = 0;
}

SteeringExpectation::~SteeringExpectation() {
  // @@protoc_insertion_point(destructor:sim_msg.SteeringExpectation)
  SharedDtor();
}

void SteeringExpectation::SharedDtor() {
}

void SteeringExpectation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SteeringExpectation::descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[0].descriptor;
}

const SteeringExpectation& SteeringExpectation::default_instance() {
  protobuf_planStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

SteeringExpectation* SteeringExpectation::New(::google::protobuf::Arena* arena) const {
  SteeringExpectation* n = new SteeringExpectation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SteeringExpectation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.SteeringExpectation)
  angle_ = 0;
}

bool SteeringExpectation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.SteeringExpectation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double angle = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.SteeringExpectation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.SteeringExpectation)
  return false;
#undef DO_
}

void SteeringExpectation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.SteeringExpectation)
  // double angle = 1;
  if (this->angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.SteeringExpectation)
}

::google::protobuf::uint8* SteeringExpectation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.SteeringExpectation)
  // double angle = 1;
  if (this->angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.SteeringExpectation)
  return target;
}

size_t SteeringExpectation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.SteeringExpectation)
  size_t total_size = 0;

  // double angle = 1;
  if (this->angle() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SteeringExpectation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.SteeringExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  const SteeringExpectation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SteeringExpectation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.SteeringExpectation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.SteeringExpectation)
    MergeFrom(*source);
  }
}

void SteeringExpectation::MergeFrom(const SteeringExpectation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.SteeringExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.angle() != 0) {
    set_angle(from.angle());
  }
}

void SteeringExpectation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.SteeringExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SteeringExpectation::CopyFrom(const SteeringExpectation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.SteeringExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SteeringExpectation::IsInitialized() const {
  return true;
}

void SteeringExpectation::Swap(SteeringExpectation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SteeringExpectation::InternalSwap(SteeringExpectation* other) {
  std::swap(angle_, other->angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SteeringExpectation::GetMetadata() const {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SteeringExpectation

// double angle = 1;
void SteeringExpectation::clear_angle() {
  angle_ = 0;
}
double SteeringExpectation::angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.SteeringExpectation.angle)
  return angle_;
}
void SteeringExpectation::set_angle(double value) {
  
  angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.SteeringExpectation.angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AccelerationExpectation::kAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AccelerationExpectation::AccelerationExpectation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_planStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.AccelerationExpectation)
}
AccelerationExpectation::AccelerationExpectation(const AccelerationExpectation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  acc_ = from.acc_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.AccelerationExpectation)
}

void AccelerationExpectation::SharedCtor() {
  acc_ = 0;
  _cached_size_ = 0;
}

AccelerationExpectation::~AccelerationExpectation() {
  // @@protoc_insertion_point(destructor:sim_msg.AccelerationExpectation)
  SharedDtor();
}

void AccelerationExpectation::SharedDtor() {
}

void AccelerationExpectation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccelerationExpectation::descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[1].descriptor;
}

const AccelerationExpectation& AccelerationExpectation::default_instance() {
  protobuf_planStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

AccelerationExpectation* AccelerationExpectation::New(::google::protobuf::Arena* arena) const {
  AccelerationExpectation* n = new AccelerationExpectation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AccelerationExpectation::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.AccelerationExpectation)
  acc_ = 0;
}

bool AccelerationExpectation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.AccelerationExpectation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.AccelerationExpectation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.AccelerationExpectation)
  return false;
#undef DO_
}

void AccelerationExpectation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.AccelerationExpectation)
  // double acc = 1;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.AccelerationExpectation)
}

::google::protobuf::uint8* AccelerationExpectation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.AccelerationExpectation)
  // double acc = 1;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.AccelerationExpectation)
  return target;
}

size_t AccelerationExpectation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.AccelerationExpectation)
  size_t total_size = 0;

  // double acc = 1;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccelerationExpectation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.AccelerationExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  const AccelerationExpectation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AccelerationExpectation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.AccelerationExpectation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.AccelerationExpectation)
    MergeFrom(*source);
  }
}

void AccelerationExpectation::MergeFrom(const AccelerationExpectation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.AccelerationExpectation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
}

void AccelerationExpectation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.AccelerationExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccelerationExpectation::CopyFrom(const AccelerationExpectation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.AccelerationExpectation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccelerationExpectation::IsInitialized() const {
  return true;
}

void AccelerationExpectation::Swap(AccelerationExpectation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AccelerationExpectation::InternalSwap(AccelerationExpectation* other) {
  std::swap(acc_, other->acc_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AccelerationExpectation::GetMetadata() const {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AccelerationExpectation

// double acc = 1;
void AccelerationExpectation::clear_acc() {
  acc_ = 0;
}
double AccelerationExpectation::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.AccelerationExpectation.acc)
  return acc_;
}
void AccelerationExpectation::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.AccelerationExpectation.acc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlanStatus::kIndicatorStateFieldNumber;
const int PlanStatus::kModeFieldNumber;
const int PlanStatus::kClassFieldNumber;
const int PlanStatus::kExpectSteeringFieldNumber;
const int PlanStatus::kExpectAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlanStatus::PlanStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_planStatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.PlanStatus)
}
PlanStatus::PlanStatus(const PlanStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expect_steering()) {
    expect_steering_ = new ::sim_msg::SteeringExpectation(*from.expect_steering_);
  } else {
    expect_steering_ = NULL;
  }
  if (from.has_expect_acc()) {
    expect_acc_ = new ::sim_msg::AccelerationExpectation(*from.expect_acc_);
  } else {
    expect_acc_ = NULL;
  }
  ::memcpy(&indicator_state_, &from.indicator_state_,
    reinterpret_cast<char*>(&class__) -
    reinterpret_cast<char*>(&indicator_state_) + sizeof(class__));
  // @@protoc_insertion_point(copy_constructor:sim_msg.PlanStatus)
}

void PlanStatus::SharedCtor() {
  ::memset(&expect_steering_, 0, reinterpret_cast<char*>(&class__) -
    reinterpret_cast<char*>(&expect_steering_) + sizeof(class__));
  _cached_size_ = 0;
}

PlanStatus::~PlanStatus() {
  // @@protoc_insertion_point(destructor:sim_msg.PlanStatus)
  SharedDtor();
}

void PlanStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete expect_steering_;
  }
  if (this != internal_default_instance()) {
    delete expect_acc_;
  }
}

void PlanStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanStatus::descriptor() {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[2].descriptor;
}

const PlanStatus& PlanStatus::default_instance() {
  protobuf_planStatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

PlanStatus* PlanStatus::New(::google::protobuf::Arena* arena) const {
  PlanStatus* n = new PlanStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PlanStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.PlanStatus)
  if (GetArenaNoVirtual() == NULL && expect_steering_ != NULL) {
    delete expect_steering_;
  }
  expect_steering_ = NULL;
  if (GetArenaNoVirtual() == NULL && expect_acc_ != NULL) {
    delete expect_acc_;
  }
  expect_acc_ = NULL;
  ::memset(&indicator_state_, 0, reinterpret_cast<char*>(&class__) -
    reinterpret_cast<char*>(&indicator_state_) + sizeof(class__));
}

bool PlanStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.PlanStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.IndicatorState indicator_state = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_indicator_state(static_cast< ::sim_msg::IndicatorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PlanMode mode = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::sim_msg::PlanMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.PlanClassification class = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_class_(static_cast< ::sim_msg::PlanClassification >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.SteeringExpectation expect_steering = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_steering()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.AccelerationExpectation expect_acc = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expect_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.PlanStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.PlanStatus)
  return false;
#undef DO_
}

void PlanStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.PlanStatus)
  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->indicator_state(), output);
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->class_(), output);
  }

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->expect_steering_, output);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->expect_acc_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.PlanStatus)
}

::google::protobuf::uint8* PlanStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.PlanStatus)
  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->indicator_state(), target);
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->class_(), target);
  }

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->expect_steering_, false, target);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->expect_acc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.PlanStatus)
  return target;
}

size_t PlanStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.PlanStatus)
  size_t total_size = 0;

  // .sim_msg.SteeringExpectation expect_steering = 4;
  if (this->has_expect_steering()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_steering_);
  }

  // .sim_msg.AccelerationExpectation expect_acc = 5;
  if (this->has_expect_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expect_acc_);
  }

  // .sim_msg.IndicatorState indicator_state = 1;
  if (this->indicator_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->indicator_state());
  }

  // .sim_msg.PlanMode mode = 2;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  // .sim_msg.PlanClassification class = 3;
  if (this->class_() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->class_());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.PlanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PlanStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlanStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.PlanStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.PlanStatus)
    MergeFrom(*source);
  }
}

void PlanStatus::MergeFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.PlanStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_expect_steering()) {
    mutable_expect_steering()->::sim_msg::SteeringExpectation::MergeFrom(from.expect_steering());
  }
  if (from.has_expect_acc()) {
    mutable_expect_acc()->::sim_msg::AccelerationExpectation::MergeFrom(from.expect_acc());
  }
  if (from.indicator_state() != 0) {
    set_indicator_state(from.indicator_state());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.class_() != 0) {
    set_class_(from.class_());
  }
}

void PlanStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.PlanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanStatus::CopyFrom(const PlanStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.PlanStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanStatus::IsInitialized() const {
  return true;
}

void PlanStatus::Swap(PlanStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlanStatus::InternalSwap(PlanStatus* other) {
  std::swap(expect_steering_, other->expect_steering_);
  std::swap(expect_acc_, other->expect_acc_);
  std::swap(indicator_state_, other->indicator_state_);
  std::swap(mode_, other->mode_);
  std::swap(class__, other->class__);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PlanStatus::GetMetadata() const {
  protobuf_planStatus_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_planStatus_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PlanStatus

// .sim_msg.IndicatorState indicator_state = 1;
void PlanStatus::clear_indicator_state() {
  indicator_state_ = 0;
}
::sim_msg::IndicatorState PlanStatus::indicator_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.indicator_state)
  return static_cast< ::sim_msg::IndicatorState >(indicator_state_);
}
void PlanStatus::set_indicator_state(::sim_msg::IndicatorState value) {
  
  indicator_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.indicator_state)
}

// .sim_msg.PlanMode mode = 2;
void PlanStatus::clear_mode() {
  mode_ = 0;
}
::sim_msg::PlanMode PlanStatus::mode() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.mode)
  return static_cast< ::sim_msg::PlanMode >(mode_);
}
void PlanStatus::set_mode(::sim_msg::PlanMode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.mode)
}

// .sim_msg.PlanClassification class = 3;
void PlanStatus::clear_class_() {
  class__ = 0;
}
::sim_msg::PlanClassification PlanStatus::class_() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.class)
  return static_cast< ::sim_msg::PlanClassification >(class__);
}
void PlanStatus::set_class_(::sim_msg::PlanClassification value) {
  
  class__ = value;
  // @@protoc_insertion_point(field_set:sim_msg.PlanStatus.class)
}

// .sim_msg.SteeringExpectation expect_steering = 4;
bool PlanStatus::has_expect_steering() const {
  return this != internal_default_instance() && expect_steering_ != NULL;
}
void PlanStatus::clear_expect_steering() {
  if (GetArenaNoVirtual() == NULL && expect_steering_ != NULL) delete expect_steering_;
  expect_steering_ = NULL;
}
const ::sim_msg::SteeringExpectation& PlanStatus::expect_steering() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.expect_steering)
  return expect_steering_ != NULL ? *expect_steering_
                         : *::sim_msg::SteeringExpectation::internal_default_instance();
}
::sim_msg::SteeringExpectation* PlanStatus::mutable_expect_steering() {
  
  if (expect_steering_ == NULL) {
    expect_steering_ = new ::sim_msg::SteeringExpectation;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanStatus.expect_steering)
  return expect_steering_;
}
::sim_msg::SteeringExpectation* PlanStatus::release_expect_steering() {
  // @@protoc_insertion_point(field_release:sim_msg.PlanStatus.expect_steering)
  
  ::sim_msg::SteeringExpectation* temp = expect_steering_;
  expect_steering_ = NULL;
  return temp;
}
void PlanStatus::set_allocated_expect_steering(::sim_msg::SteeringExpectation* expect_steering) {
  delete expect_steering_;
  expect_steering_ = expect_steering;
  if (expect_steering) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PlanStatus.expect_steering)
}

// .sim_msg.AccelerationExpectation expect_acc = 5;
bool PlanStatus::has_expect_acc() const {
  return this != internal_default_instance() && expect_acc_ != NULL;
}
void PlanStatus::clear_expect_acc() {
  if (GetArenaNoVirtual() == NULL && expect_acc_ != NULL) delete expect_acc_;
  expect_acc_ = NULL;
}
const ::sim_msg::AccelerationExpectation& PlanStatus::expect_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.PlanStatus.expect_acc)
  return expect_acc_ != NULL ? *expect_acc_
                         : *::sim_msg::AccelerationExpectation::internal_default_instance();
}
::sim_msg::AccelerationExpectation* PlanStatus::mutable_expect_acc() {
  
  if (expect_acc_ == NULL) {
    expect_acc_ = new ::sim_msg::AccelerationExpectation;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.PlanStatus.expect_acc)
  return expect_acc_;
}
::sim_msg::AccelerationExpectation* PlanStatus::release_expect_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.PlanStatus.expect_acc)
  
  ::sim_msg::AccelerationExpectation* temp = expect_acc_;
  expect_acc_ = NULL;
  return temp;
}
void PlanStatus::set_allocated_expect_acc(::sim_msg::AccelerationExpectation* expect_acc) {
  delete expect_acc_;
  expect_acc_ = expect_acc;
  if (expect_acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.PlanStatus.expect_acc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
