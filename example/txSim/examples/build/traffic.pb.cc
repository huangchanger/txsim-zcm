// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class ManualVehicleControlInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualVehicleControlInfo> {
} _ManualVehicleControlInfo_default_instance_;
class ManualVehicleControlInfoArrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ManualVehicleControlInfoArray> {
} _ManualVehicleControlInfoArray_default_instance_;
class NearestObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NearestObject> {
} _NearestObject_default_instance_;
class CarDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Car> {
} _Car_default_instance_;
class StaticObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<StaticObstacle> {
} _StaticObstacle_default_instance_;
class DynamicObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DynamicObstacle> {
} _DynamicObstacle_default_instance_;
class LaneUidDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneUid> {
} _LaneUid_default_instance_;
class TrafficLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TrafficLight> {
} _TrafficLight_default_instance_;
class TrafficDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Traffic> {
} _Traffic_default_instance_;

namespace protobuf_traffic_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[3];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVehicleControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVehicleControlInfo, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVehicleControlInfo, veh_control_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVehicleControlInfoArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ManualVehicleControlInfoArray, vehicles_control_info_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestObject, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestObject, euclid_dist_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearestObject, dir_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, vl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, laneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, tx_road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, tx_section_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, tx_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, tx_lanelink_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, planning_line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_abs_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_abs_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_velocity_horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_acc_horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_dist_vertical_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_relative_dist_horizontal_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, control_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Car, show_nearestobjectinfo_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StaticObstacle, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, length_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, vl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DynamicObstacle, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneUid, tx_road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneUid, tx_section_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneUid, tx_lane_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, heading_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, age_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tx_road_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tx_section_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, tx_lane_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, control_lanes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrafficLight, control_phases_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, cars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, staticobstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, dynamicobstacles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Traffic, trafficlights_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(ManualVehicleControlInfo)},
  { 6, -1, sizeof(ManualVehicleControlInfoArray)},
  { 11, -1, sizeof(NearestObject)},
  { 18, -1, sizeof(Car)},
  { 53, -1, sizeof(StaticObstacle)},
  { 68, -1, sizeof(DynamicObstacle)},
  { 86, -1, sizeof(LaneUid)},
  { 93, -1, sizeof(TrafficLight)},
  { 109, -1, sizeof(Traffic)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualVehicleControlInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ManualVehicleControlInfoArray_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NearestObject_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Car_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_StaticObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DynamicObstacle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneUid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Traffic_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "traffic.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _ManualVehicleControlInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ManualVehicleControlInfoArray_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _NearestObject_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Car_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _StaticObstacle_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _DynamicObstacle_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _LaneUid_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _TrafficLight_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Traffic_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sim_msg::protobuf_trajectory_2eproto::InitDefaults();
  ::sim_msg::protobuf_location_2eproto::InitDefaults();
  _ManualVehicleControlInfo_default_instance_.DefaultConstruct();
  _ManualVehicleControlInfoArray_default_instance_.DefaultConstruct();
  _NearestObject_default_instance_.DefaultConstruct();
  _Car_default_instance_.DefaultConstruct();
  _StaticObstacle_default_instance_.DefaultConstruct();
  _DynamicObstacle_default_instance_.DefaultConstruct();
  _LaneUid_default_instance_.DefaultConstruct();
  _TrafficLight_default_instance_.DefaultConstruct();
  _Traffic_default_instance_.DefaultConstruct();
  _ManualVehicleControlInfo_default_instance_.get_mutable()->veh_control_info_ = const_cast< ::sim_msg::Location*>(
      ::sim_msg::Location::internal_default_instance());
  _Car_default_instance_.get_mutable()->planning_line_ = const_cast< ::sim_msg::Trajectory*>(
      ::sim_msg::Trajectory::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rtraffic.proto\022\007sim_msg\032\020trajectory.pro"
      "to\032\016location.proto\"S\n\030ManualVehicleContr"
      "olInfo\022\n\n\002id\030\001 \001(\005\022+\n\020veh_control_info\030\002"
      " \001(\0132\021.sim_msg.Location\"a\n\035ManualVehicle"
      "ControlInfoArray\022@\n\025vehicles_control_inf"
      "o\030\001 \003(\0132!.sim_msg.ManualVehicleControlIn"
      "fo\"^\n\rNearestObject\022\n\n\002id\030\001 \001(\005\022\023\n\013eucli"
      "d_dist\030\002 \001(\001\022,\n\003dir\030\003 \001(\0162\037.sim_msg.Near"
      "estObjectDirection\"\315\005\n\003Car\022\n\n\002id\030\001 \001(\005\022\t"
      "\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007headi"
      "ng\030\005 \001(\001\022\t\n\001v\030\006 \001(\001\022\n\n\002vl\030\007 \001(\001\022\r\n\005theta"
      "\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n"
      "\006height\030\013 \001(\001\022\014\n\004type\030\014 \001(\005\022\016\n\006laneId\030\r "
      "\001(\005\022\013\n\003acc\030\016 \001(\001\022\013\n\003age\030\017 \001(\005\022\t\n\001z\030\020 \001(\001"
      "\022\022\n\ntx_road_id\030\021 \001(\004\022\025\n\rtx_section_id\030\022 "
      "\001(\004\022\022\n\ntx_lane_id\030\023 \001(\003\022\026\n\016tx_lanelink_i"
      "d\030\024 \001(\004\022*\n\rplanning_line\030\025 \001(\0132\023.sim_msg"
      ".Trajectory\022\031\n\021show_abs_velocity\030\026 \001(\001\022\024"
      "\n\014show_abs_acc\030\027 \001(\001\022\036\n\026show_relative_ve"
      "locity\030\030 \001(\001\022\031\n\021show_relative_acc\030\031 \001(\001\022"
      ")\n!show_relative_velocity_horizontal\030\032 \001"
      "(\001\022$\n\034show_relative_acc_horizontal\030\033 \001(\001"
      "\022#\n\033show_relative_dist_vertical\030\034 \001(\001\022%\n"
      "\035show_relative_dist_horizontal\030\035 \001(\001\022,\n\r"
      "control_state\030\036 \001(\0162\025.sim_msg.ControlSta"
      "te\0226\n\026show_NearestObjectInfo\030\037 \003(\0132\026.sim"
      "_msg.NearestObject\"\243\001\n\016StaticObstacle\022\n\n"
      "\002id\030\001 \001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001"
      "(\001\022\017\n\007heading\030\005 \001(\001\022\016\n\006length\030\006 \001(\001\022\r\n\005w"
      "idth\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\014\n\004type\030\t \001(\005"
      "\022\013\n\003age\030\n \001(\005\022\t\n\001z\030\013 \001(\001\"\310\001\n\017DynamicObst"
      "acle\022\n\n\002id\030\001 \001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t"
      "\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\022\016\n\006length\030\006 \001"
      "(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\014\n\004typ"
      "e\030\t \001(\005\022\t\n\001v\030\n \001(\001\022\n\n\002vl\030\013 \001(\001\022\013\n\003acc\030\014 "
      "\001(\001\022\013\n\003age\030\r \001(\005\022\t\n\001z\030\016 \001(\001\"H\n\007LaneUid\022\022"
      "\n\ntx_road_id\030\001 \001(\004\022\025\n\rtx_section_id\030\002 \001("
      "\004\022\022\n\ntx_lane_id\030\003 \001(\003\"\370\001\n\014TrafficLight\022\n"
      "\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\017\n\007head"
      "ing\030\004 \001(\001\022\r\n\005color\030\005 \001(\005\022\013\n\003age\030\006 \001(\005\022\t\n"
      "\001z\030\007 \001(\001\022\022\n\ntx_road_id\030\010 \001(\004\022\025\n\rtx_secti"
      "on_id\030\t \001(\004\022\022\n\ntx_lane_id\030\n \001(\003\022\'\n\rcontr"
      "ol_lanes\030\013 \003(\0132\020.sim_msg.LaneUid\022&\n\016cont"
      "rol_phases\030\014 \003(\0162\016.sim_msg.Phase\"\271\001\n\007Tra"
      "ffic\022\032\n\004cars\030\001 \003(\0132\014.sim_msg.Car\0220\n\017stat"
      "icObstacles\030\002 \003(\0132\027.sim_msg.StaticObstac"
      "le\0222\n\020dynamicObstacles\030\003 \003(\0132\030.sim_msg.D"
      "ynamicObstacle\022,\n\rtrafficLights\030\004 \003(\0132\025."
      "sim_msg.TrafficLight**\n\014ControlState\022\016\n\n"
      "Autonomous\020\000\022\n\n\006Manual\020\001*\214\001\n\026NearestObje"
      "ctDirection\022\t\n\005FRONT\020\000\022\022\n\016BACK_DIRECTION"
      "\020\001\022\010\n\004LEFT\020\002\022\016\n\nLEFT_FRONT\020\003\022\r\n\tLEFT_BAC"
      "K\020\004\022\t\n\005RIGHT\020\005\022\017\n\013RIGHT_FRONT\020\006\022\016\n\nRIGHT"
      "_BACK\020\007*#\n\005Phase\022\005\n\001U\020\000\022\005\n\001L\020\001\022\005\n\001T\020\002\022\005\n"
      "\001R\020\003b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "traffic.proto", &protobuf_RegisterTypes);
  ::sim_msg::protobuf_trajectory_2eproto::AddDescriptors();
  ::sim_msg::protobuf_location_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_traffic_2eproto

const ::google::protobuf::EnumDescriptor* ControlState_descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_enum_descriptors[0];
}
bool ControlState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NearestObjectDirection_descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_enum_descriptors[1];
}
bool NearestObjectDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Phase_descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_enum_descriptors[2];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualVehicleControlInfo::kIdFieldNumber;
const int ManualVehicleControlInfo::kVehControlInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualVehicleControlInfo::ManualVehicleControlInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ManualVehicleControlInfo)
}
ManualVehicleControlInfo::ManualVehicleControlInfo(const ManualVehicleControlInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_veh_control_info()) {
    veh_control_info_ = new ::sim_msg::Location(*from.veh_control_info_);
  } else {
    veh_control_info_ = NULL;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfo)
}

void ManualVehicleControlInfo::SharedCtor() {
  ::memset(&veh_control_info_, 0, reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&veh_control_info_) + sizeof(id_));
  _cached_size_ = 0;
}

ManualVehicleControlInfo::~ManualVehicleControlInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfo)
  SharedDtor();
}

void ManualVehicleControlInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete veh_control_info_;
  }
}

void ManualVehicleControlInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualVehicleControlInfo::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[0].descriptor;
}

const ManualVehicleControlInfo& ManualVehicleControlInfo::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualVehicleControlInfo* ManualVehicleControlInfo::New(::google::protobuf::Arena* arena) const {
  ManualVehicleControlInfo* n = new ManualVehicleControlInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualVehicleControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfo)
  if (GetArenaNoVirtual() == NULL && veh_control_info_ != NULL) {
    delete veh_control_info_;
  }
  veh_control_info_ = NULL;
  id_ = 0;
}

bool ManualVehicleControlInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ManualVehicleControlInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Location veh_control_info = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_veh_control_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ManualVehicleControlInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ManualVehicleControlInfo)
  return false;
#undef DO_
}

void ManualVehicleControlInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ManualVehicleControlInfo)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->veh_control_info_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.ManualVehicleControlInfo)
}

::google::protobuf::uint8* ManualVehicleControlInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfo)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->veh_control_info_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfo)
  return target;
}

size_t ManualVehicleControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfo)
  size_t total_size = 0;

  // .sim_msg.Location veh_control_info = 2;
  if (this->has_veh_control_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->veh_control_info_);
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualVehicleControlInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ManualVehicleControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualVehicleControlInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualVehicleControlInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ManualVehicleControlInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ManualVehicleControlInfo)
    MergeFrom(*source);
  }
}

void ManualVehicleControlInfo::MergeFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_veh_control_info()) {
    mutable_veh_control_info()->::sim_msg::Location::MergeFrom(from.veh_control_info());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void ManualVehicleControlInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ManualVehicleControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualVehicleControlInfo::CopyFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfo::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfo::Swap(ManualVehicleControlInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualVehicleControlInfo::InternalSwap(ManualVehicleControlInfo* other) {
  std::swap(veh_control_info_, other->veh_control_info_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualVehicleControlInfo::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualVehicleControlInfo

// int32 id = 1;
void ManualVehicleControlInfo::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 ManualVehicleControlInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.id)
  return id_;
}
void ManualVehicleControlInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ManualVehicleControlInfo.id)
}

// .sim_msg.Location veh_control_info = 2;
bool ManualVehicleControlInfo::has_veh_control_info() const {
  return this != internal_default_instance() && veh_control_info_ != NULL;
}
void ManualVehicleControlInfo::clear_veh_control_info() {
  if (GetArenaNoVirtual() == NULL && veh_control_info_ != NULL) delete veh_control_info_;
  veh_control_info_ = NULL;
}
const ::sim_msg::Location& ManualVehicleControlInfo::veh_control_info() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return veh_control_info_ != NULL ? *veh_control_info_
                         : *::sim_msg::Location::internal_default_instance();
}
::sim_msg::Location* ManualVehicleControlInfo::mutable_veh_control_info() {
  
  if (veh_control_info_ == NULL) {
    veh_control_info_ = new ::sim_msg::Location;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return veh_control_info_;
}
::sim_msg::Location* ManualVehicleControlInfo::release_veh_control_info() {
  // @@protoc_insertion_point(field_release:sim_msg.ManualVehicleControlInfo.veh_control_info)
  
  ::sim_msg::Location* temp = veh_control_info_;
  veh_control_info_ = NULL;
  return temp;
}
void ManualVehicleControlInfo::set_allocated_veh_control_info(::sim_msg::Location* veh_control_info) {
  delete veh_control_info_;
  veh_control_info_ = veh_control_info;
  if (veh_control_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ManualVehicleControlInfo.veh_control_info)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ManualVehicleControlInfoArray::kVehiclesControlInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ManualVehicleControlInfoArray::ManualVehicleControlInfoArray()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ManualVehicleControlInfoArray)
}
ManualVehicleControlInfoArray::ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vehicles_control_info_(from.vehicles_control_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfoArray)
}

void ManualVehicleControlInfoArray::SharedCtor() {
  _cached_size_ = 0;
}

ManualVehicleControlInfoArray::~ManualVehicleControlInfoArray() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfoArray)
  SharedDtor();
}

void ManualVehicleControlInfoArray::SharedDtor() {
}

void ManualVehicleControlInfoArray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ManualVehicleControlInfoArray::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[1].descriptor;
}

const ManualVehicleControlInfoArray& ManualVehicleControlInfoArray::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ManualVehicleControlInfoArray* ManualVehicleControlInfoArray::New(::google::protobuf::Arena* arena) const {
  ManualVehicleControlInfoArray* n = new ManualVehicleControlInfoArray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ManualVehicleControlInfoArray::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfoArray)
  vehicles_control_info_.Clear();
}

bool ManualVehicleControlInfoArray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ManualVehicleControlInfoArray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_vehicles_control_info()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ManualVehicleControlInfoArray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ManualVehicleControlInfoArray)
  return false;
#undef DO_
}

void ManualVehicleControlInfoArray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ManualVehicleControlInfoArray)
  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  for (unsigned int i = 0, n = this->vehicles_control_info_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->vehicles_control_info(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.ManualVehicleControlInfoArray)
}

::google::protobuf::uint8* ManualVehicleControlInfoArray::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfoArray)
  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  for (unsigned int i = 0, n = this->vehicles_control_info_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->vehicles_control_info(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfoArray)
  return target;
}

size_t ManualVehicleControlInfoArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfoArray)
  size_t total_size = 0;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  {
    unsigned int count = this->vehicles_control_info_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vehicles_control_info(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ManualVehicleControlInfoArray::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ManualVehicleControlInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  const ManualVehicleControlInfoArray* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ManualVehicleControlInfoArray>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ManualVehicleControlInfoArray)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ManualVehicleControlInfoArray)
    MergeFrom(*source);
  }
}

void ManualVehicleControlInfoArray::MergeFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vehicles_control_info_.MergeFrom(from.vehicles_control_info_);
}

void ManualVehicleControlInfoArray::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ManualVehicleControlInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ManualVehicleControlInfoArray::CopyFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfoArray::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfoArray::Swap(ManualVehicleControlInfoArray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ManualVehicleControlInfoArray::InternalSwap(ManualVehicleControlInfoArray* other) {
  vehicles_control_info_.UnsafeArenaSwap(&other->vehicles_control_info_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ManualVehicleControlInfoArray::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualVehicleControlInfoArray

// repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
int ManualVehicleControlInfoArray::vehicles_control_info_size() const {
  return vehicles_control_info_.size();
}
void ManualVehicleControlInfoArray::clear_vehicles_control_info() {
  vehicles_control_info_.Clear();
}
const ::sim_msg::ManualVehicleControlInfo& ManualVehicleControlInfoArray::vehicles_control_info(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Get(index);
}
::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::mutable_vehicles_control_info(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Mutable(index);
}
::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::add_vehicles_control_info() {
  // @@protoc_insertion_point(field_add:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
ManualVehicleControlInfoArray::mutable_vehicles_control_info() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return &vehicles_control_info_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
ManualVehicleControlInfoArray::vehicles_control_info() const {
  // @@protoc_insertion_point(field_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NearestObject::kIdFieldNumber;
const int NearestObject::kEuclidDistFieldNumber;
const int NearestObject::kDirFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NearestObject::NearestObject()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.NearestObject)
}
NearestObject::NearestObject(const NearestObject& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&euclid_dist_, &from.euclid_dist_,
    reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.NearestObject)
}

void NearestObject::SharedCtor() {
  ::memset(&euclid_dist_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_) + sizeof(dir_));
  _cached_size_ = 0;
}

NearestObject::~NearestObject() {
  // @@protoc_insertion_point(destructor:sim_msg.NearestObject)
  SharedDtor();
}

void NearestObject::SharedDtor() {
}

void NearestObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearestObject::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[2].descriptor;
}

const NearestObject& NearestObject::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

NearestObject* NearestObject::New(::google::protobuf::Arena* arena) const {
  NearestObject* n = new NearestObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NearestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.NearestObject)
  ::memset(&euclid_dist_, 0, reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_) + sizeof(dir_));
}

bool NearestObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.NearestObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double euclid_dist = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &euclid_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.NearestObjectDirection dir = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dir(static_cast< ::sim_msg::NearestObjectDirection >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.NearestObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.NearestObject)
  return false;
#undef DO_
}

void NearestObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.NearestObject)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double euclid_dist = 2;
  if (this->euclid_dist() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->euclid_dist(), output);
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->dir(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.NearestObject)
}

::google::protobuf::uint8* NearestObject::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.NearestObject)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double euclid_dist = 2;
  if (this->euclid_dist() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->euclid_dist(), target);
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->dir(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.NearestObject)
  return target;
}

size_t NearestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.NearestObject)
  size_t total_size = 0;

  // double euclid_dist = 2;
  if (this->euclid_dist() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->dir() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dir());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearestObject::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.NearestObject)
  GOOGLE_DCHECK_NE(&from, this);
  const NearestObject* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NearestObject>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.NearestObject)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.NearestObject)
    MergeFrom(*source);
  }
}

void NearestObject::MergeFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.NearestObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.euclid_dist() != 0) {
    set_euclid_dist(from.euclid_dist());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.dir() != 0) {
    set_dir(from.dir());
  }
}

void NearestObject::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.NearestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearestObject::CopyFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.NearestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestObject::IsInitialized() const {
  return true;
}

void NearestObject::Swap(NearestObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NearestObject::InternalSwap(NearestObject* other) {
  std::swap(euclid_dist_, other->euclid_dist_);
  std::swap(id_, other->id_);
  std::swap(dir_, other->dir_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NearestObject::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NearestObject

// int32 id = 1;
void NearestObject::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 NearestObject::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.id)
  return id_;
}
void NearestObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.id)
}

// double euclid_dist = 2;
void NearestObject::clear_euclid_dist() {
  euclid_dist_ = 0;
}
double NearestObject::euclid_dist() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.euclid_dist)
  return euclid_dist_;
}
void NearestObject::set_euclid_dist(double value) {
  
  euclid_dist_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.euclid_dist)
}

// .sim_msg.NearestObjectDirection dir = 3;
void NearestObject::clear_dir() {
  dir_ = 0;
}
::sim_msg::NearestObjectDirection NearestObject::dir() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.dir)
  return static_cast< ::sim_msg::NearestObjectDirection >(dir_);
}
void NearestObject::set_dir(::sim_msg::NearestObjectDirection value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.dir)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Car::kIdFieldNumber;
const int Car::kTFieldNumber;
const int Car::kXFieldNumber;
const int Car::kYFieldNumber;
const int Car::kHeadingFieldNumber;
const int Car::kVFieldNumber;
const int Car::kVlFieldNumber;
const int Car::kThetaFieldNumber;
const int Car::kLengthFieldNumber;
const int Car::kWidthFieldNumber;
const int Car::kHeightFieldNumber;
const int Car::kTypeFieldNumber;
const int Car::kLaneIdFieldNumber;
const int Car::kAccFieldNumber;
const int Car::kAgeFieldNumber;
const int Car::kZFieldNumber;
const int Car::kTxRoadIdFieldNumber;
const int Car::kTxSectionIdFieldNumber;
const int Car::kTxLaneIdFieldNumber;
const int Car::kTxLanelinkIdFieldNumber;
const int Car::kPlanningLineFieldNumber;
const int Car::kShowAbsVelocityFieldNumber;
const int Car::kShowAbsAccFieldNumber;
const int Car::kShowRelativeVelocityFieldNumber;
const int Car::kShowRelativeAccFieldNumber;
const int Car::kShowRelativeVelocityHorizontalFieldNumber;
const int Car::kShowRelativeAccHorizontalFieldNumber;
const int Car::kShowRelativeDistVerticalFieldNumber;
const int Car::kShowRelativeDistHorizontalFieldNumber;
const int Car::kControlStateFieldNumber;
const int Car::kShowNearestObjectInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Car::Car()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Car)
}
Car::Car(const Car& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      show_nearestobjectinfo_(from.show_nearestobjectinfo_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_planning_line()) {
    planning_line_ = new ::sim_msg::Trajectory(*from.planning_line_);
  } else {
    planning_line_ = NULL;
  }
  ::memcpy(&t_, &from.t_,
    reinterpret_cast<char*>(&control_state_) -
    reinterpret_cast<char*>(&t_) + sizeof(control_state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Car)
}

void Car::SharedCtor() {
  ::memset(&planning_line_, 0, reinterpret_cast<char*>(&control_state_) -
    reinterpret_cast<char*>(&planning_line_) + sizeof(control_state_));
  _cached_size_ = 0;
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:sim_msg.Car)
  SharedDtor();
}

void Car::SharedDtor() {
  if (this != internal_default_instance()) {
    delete planning_line_;
  }
}

void Car::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Car::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[3].descriptor;
}

const Car& Car::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Car* Car::New(::google::protobuf::Arena* arena) const {
  Car* n = new Car;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Car)
  show_nearestobjectinfo_.Clear();
  if (GetArenaNoVirtual() == NULL && planning_line_ != NULL) {
    delete planning_line_;
  }
  planning_line_ = NULL;
  ::memset(&t_, 0, reinterpret_cast<char*>(&control_state_) -
    reinterpret_cast<char*>(&t_) + sizeof(control_state_));
}

bool Car::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Car)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vl = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 8;
      case 8: {
        if (tag == 65u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 9;
      case 9: {
        if (tag == 73u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 10;
      case 10: {
        if (tag == 81u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 12;
      case 12: {
        if (tag == 96u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 laneId = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &laneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc = 14;
      case 14: {
        if (tag == 113u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 16;
      case 16: {
        if (tag == 129u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_road_id = 17;
      case 17: {
        if (tag == 136u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 18;
      case 18: {
        if (tag == 144u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 19;
      case 19: {
        if (tag == 152u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_lanelink_id = 20;
      case 20: {
        if (tag == 160u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_lanelink_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Trajectory planning_line = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_velocity = 22;
      case 22: {
        if (tag == 177u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_abs_acc = 23;
      case 23: {
        if (tag == 185u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_abs_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity = 24;
      case 24: {
        if (tag == 193u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc = 25;
      case 25: {
        if (tag == 201u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_velocity_horizontal = 26;
      case 26: {
        if (tag == 209u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_velocity_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_acc_horizontal = 27;
      case 27: {
        if (tag == 217u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_acc_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_vertical = 28;
      case 28: {
        if (tag == 225u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double show_relative_dist_horizontal = 29;
      case 29: {
        if (tag == 233u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &show_relative_dist_horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.ControlState control_state = 30;
      case 30: {
        if (tag == 240u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_state(static_cast< ::sim_msg::ControlState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
      case 31: {
        if (tag == 250u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_show_nearestobjectinfo()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Car)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Car)
  return false;
#undef DO_
}

void Car::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Car)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double t = 2;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double v = 6;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->v(), output);
  }

  // double vl = 7;
  if (this->vl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->vl(), output);
  }

  // double theta = 8;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->theta(), output);
  }

  // double length = 9;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->length(), output);
  }

  // double width = 10;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->width(), output);
  }

  // double height = 11;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->height(), output);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->type(), output);
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->laneid(), output);
  }

  // double acc = 14;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->acc(), output);
  }

  // int32 age = 15;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->age(), output);
  }

  // double z = 16;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->z(), output);
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(17, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(18, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->tx_lane_id(), output);
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->tx_lanelink_id(), output);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *this->planning_line_, output);
  }

  // double show_abs_velocity = 22;
  if (this->show_abs_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->show_abs_velocity(), output);
  }

  // double show_abs_acc = 23;
  if (this->show_abs_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->show_abs_acc(), output);
  }

  // double show_relative_velocity = 24;
  if (this->show_relative_velocity() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->show_relative_velocity(), output);
  }

  // double show_relative_acc = 25;
  if (this->show_relative_acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->show_relative_acc(), output);
  }

  // double show_relative_velocity_horizontal = 26;
  if (this->show_relative_velocity_horizontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->show_relative_velocity_horizontal(), output);
  }

  // double show_relative_acc_horizontal = 27;
  if (this->show_relative_acc_horizontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->show_relative_acc_horizontal(), output);
  }

  // double show_relative_dist_vertical = 28;
  if (this->show_relative_dist_vertical() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->show_relative_dist_vertical(), output);
  }

  // double show_relative_dist_horizontal = 29;
  if (this->show_relative_dist_horizontal() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->show_relative_dist_horizontal(), output);
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      30, this->control_state(), output);
  }

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  for (unsigned int i = 0, n = this->show_nearestobjectinfo_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->show_nearestobjectinfo(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Car)
}

::google::protobuf::uint8* Car::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Car)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double v = 6;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->v(), target);
  }

  // double vl = 7;
  if (this->vl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->vl(), target);
  }

  // double theta = 8;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->theta(), target);
  }

  // double length = 9;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->length(), target);
  }

  // double width = 10;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->width(), target);
  }

  // double height = 11;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->height(), target);
  }

  // int32 type = 12;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->type(), target);
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->laneid(), target);
  }

  // double acc = 14;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->acc(), target);
  }

  // int32 age = 15;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->age(), target);
  }

  // double z = 16;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->z(), target);
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(17, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(18, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->tx_lane_id(), target);
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->tx_lanelink_id(), target);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *this->planning_line_, false, target);
  }

  // double show_abs_velocity = 22;
  if (this->show_abs_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->show_abs_velocity(), target);
  }

  // double show_abs_acc = 23;
  if (this->show_abs_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->show_abs_acc(), target);
  }

  // double show_relative_velocity = 24;
  if (this->show_relative_velocity() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->show_relative_velocity(), target);
  }

  // double show_relative_acc = 25;
  if (this->show_relative_acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->show_relative_acc(), target);
  }

  // double show_relative_velocity_horizontal = 26;
  if (this->show_relative_velocity_horizontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->show_relative_velocity_horizontal(), target);
  }

  // double show_relative_acc_horizontal = 27;
  if (this->show_relative_acc_horizontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->show_relative_acc_horizontal(), target);
  }

  // double show_relative_dist_vertical = 28;
  if (this->show_relative_dist_vertical() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->show_relative_dist_vertical(), target);
  }

  // double show_relative_dist_horizontal = 29;
  if (this->show_relative_dist_horizontal() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->show_relative_dist_horizontal(), target);
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      30, this->control_state(), target);
  }

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  for (unsigned int i = 0, n = this->show_nearestobjectinfo_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, this->show_nearestobjectinfo(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Car)
  return target;
}

size_t Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Car)
  size_t total_size = 0;

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  {
    unsigned int count = this->show_nearestobjectinfo_size();
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->show_nearestobjectinfo(i));
    }
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->has_planning_line()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_line_);
  }

  // double t = 2;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double v = 6;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 12;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double vl = 7;
  if (this->vl() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 8;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // double length = 9;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double width = 10;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 11;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double acc = 14;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  // int32 laneId = 13;
  if (this->laneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->laneid());
  }

  // int32 age = 15;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  // double z = 16;
  if (this->z() != 0) {
    total_size += 2 + 8;
  }

  // uint64 tx_road_id = 17;
  if (this->tx_road_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 18;
  if (this->tx_section_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int64 tx_lane_id = 19;
  if (this->tx_lane_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  // uint64 tx_lanelink_id = 20;
  if (this->tx_lanelink_id() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_lanelink_id());
  }

  // double show_abs_velocity = 22;
  if (this->show_abs_velocity() != 0) {
    total_size += 2 + 8;
  }

  // double show_abs_acc = 23;
  if (this->show_abs_acc() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity = 24;
  if (this->show_relative_velocity() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_acc = 25;
  if (this->show_relative_acc() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity_horizontal = 26;
  if (this->show_relative_velocity_horizontal() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_acc_horizontal = 27;
  if (this->show_relative_acc_horizontal() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_vertical = 28;
  if (this->show_relative_dist_vertical() != 0) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_horizontal = 29;
  if (this->show_relative_dist_horizontal() != 0) {
    total_size += 2 + 8;
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->control_state() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Car::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Car)
  GOOGLE_DCHECK_NE(&from, this);
  const Car* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Car>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Car)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Car)
    MergeFrom(*source);
  }
}

void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Car)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  show_nearestobjectinfo_.MergeFrom(from.show_nearestobjectinfo_);
  if (from.has_planning_line()) {
    mutable_planning_line()->::sim_msg::Trajectory::MergeFrom(from.planning_line());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.vl() != 0) {
    set_vl(from.vl());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.laneid() != 0) {
    set_laneid(from.laneid());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
  if (from.tx_lanelink_id() != 0) {
    set_tx_lanelink_id(from.tx_lanelink_id());
  }
  if (from.show_abs_velocity() != 0) {
    set_show_abs_velocity(from.show_abs_velocity());
  }
  if (from.show_abs_acc() != 0) {
    set_show_abs_acc(from.show_abs_acc());
  }
  if (from.show_relative_velocity() != 0) {
    set_show_relative_velocity(from.show_relative_velocity());
  }
  if (from.show_relative_acc() != 0) {
    set_show_relative_acc(from.show_relative_acc());
  }
  if (from.show_relative_velocity_horizontal() != 0) {
    set_show_relative_velocity_horizontal(from.show_relative_velocity_horizontal());
  }
  if (from.show_relative_acc_horizontal() != 0) {
    set_show_relative_acc_horizontal(from.show_relative_acc_horizontal());
  }
  if (from.show_relative_dist_vertical() != 0) {
    set_show_relative_dist_vertical(from.show_relative_dist_vertical());
  }
  if (from.show_relative_dist_horizontal() != 0) {
    set_show_relative_dist_horizontal(from.show_relative_dist_horizontal());
  }
  if (from.control_state() != 0) {
    set_control_state(from.control_state());
  }
}

void Car::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {
  return true;
}

void Car::Swap(Car* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Car::InternalSwap(Car* other) {
  show_nearestobjectinfo_.UnsafeArenaSwap(&other->show_nearestobjectinfo_);
  std::swap(planning_line_, other->planning_line_);
  std::swap(t_, other->t_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(v_, other->v_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(vl_, other->vl_);
  std::swap(theta_, other->theta_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(acc_, other->acc_);
  std::swap(laneid_, other->laneid_);
  std::swap(age_, other->age_);
  std::swap(z_, other->z_);
  std::swap(tx_road_id_, other->tx_road_id_);
  std::swap(tx_section_id_, other->tx_section_id_);
  std::swap(tx_lane_id_, other->tx_lane_id_);
  std::swap(tx_lanelink_id_, other->tx_lanelink_id_);
  std::swap(show_abs_velocity_, other->show_abs_velocity_);
  std::swap(show_abs_acc_, other->show_abs_acc_);
  std::swap(show_relative_velocity_, other->show_relative_velocity_);
  std::swap(show_relative_acc_, other->show_relative_acc_);
  std::swap(show_relative_velocity_horizontal_, other->show_relative_velocity_horizontal_);
  std::swap(show_relative_acc_horizontal_, other->show_relative_acc_horizontal_);
  std::swap(show_relative_dist_vertical_, other->show_relative_dist_vertical_);
  std::swap(show_relative_dist_horizontal_, other->show_relative_dist_horizontal_);
  std::swap(control_state_, other->control_state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Car::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Car

// int32 id = 1;
void Car::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return id_;
}
void Car::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// double t = 2;
void Car::clear_t() {
  t_ = 0;
}
double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return t_;
}
void Car::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// double x = 3;
void Car::clear_x() {
  x_ = 0;
}
double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return x_;
}
void Car::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// double y = 4;
void Car::clear_y() {
  y_ = 0;
}
double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return y_;
}
void Car::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// double heading = 5;
void Car::clear_heading() {
  heading_ = 0;
}
double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return heading_;
}
void Car::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// double v = 6;
void Car::clear_v() {
  v_ = 0;
}
double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return v_;
}
void Car::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// double vl = 7;
void Car::clear_vl() {
  vl_ = 0;
}
double Car::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.vl)
  return vl_;
}
void Car::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.vl)
}

// double theta = 8;
void Car::clear_theta() {
  theta_ = 0;
}
double Car::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.theta)
  return theta_;
}
void Car::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.theta)
}

// double length = 9;
void Car::clear_length() {
  length_ = 0;
}
double Car::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.length)
  return length_;
}
void Car::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.length)
}

// double width = 10;
void Car::clear_width() {
  width_ = 0;
}
double Car::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.width)
  return width_;
}
void Car::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.width)
}

// double height = 11;
void Car::clear_height() {
  height_ = 0;
}
double Car::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.height)
  return height_;
}
void Car::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.height)
}

// int32 type = 12;
void Car::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 Car::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.type)
  return type_;
}
void Car::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.type)
}

// int32 laneId = 13;
void Car::clear_laneid() {
  laneid_ = 0;
}
::google::protobuf::int32 Car::laneid() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.laneId)
  return laneid_;
}
void Car::set_laneid(::google::protobuf::int32 value) {
  
  laneid_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.laneId)
}

// double acc = 14;
void Car::clear_acc() {
  acc_ = 0;
}
double Car::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.acc)
  return acc_;
}
void Car::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.acc)
}

// int32 age = 15;
void Car::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 Car::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.age)
  return age_;
}
void Car::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.age)
}

// double z = 16;
void Car::clear_z() {
  z_ = 0;
}
double Car::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.z)
  return z_;
}
void Car::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.z)
}

// uint64 tx_road_id = 17;
void Car::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Car::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_road_id)
  return tx_road_id_;
}
void Car::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_road_id)
}

// uint64 tx_section_id = 18;
void Car::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Car::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_section_id)
  return tx_section_id_;
}
void Car::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_section_id)
}

// int64 tx_lane_id = 19;
void Car::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Car::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lane_id)
  return tx_lane_id_;
}
void Car::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lane_id)
}

// uint64 tx_lanelink_id = 20;
void Car::clear_tx_lanelink_id() {
  tx_lanelink_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Car::tx_lanelink_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lanelink_id)
  return tx_lanelink_id_;
}
void Car::set_tx_lanelink_id(::google::protobuf::uint64 value) {
  
  tx_lanelink_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lanelink_id)
}

// .sim_msg.Trajectory planning_line = 21;
bool Car::has_planning_line() const {
  return this != internal_default_instance() && planning_line_ != NULL;
}
void Car::clear_planning_line() {
  if (GetArenaNoVirtual() == NULL && planning_line_ != NULL) delete planning_line_;
  planning_line_ = NULL;
}
const ::sim_msg::Trajectory& Car::planning_line() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.planning_line)
  return planning_line_ != NULL ? *planning_line_
                         : *::sim_msg::Trajectory::internal_default_instance();
}
::sim_msg::Trajectory* Car::mutable_planning_line() {
  
  if (planning_line_ == NULL) {
    planning_line_ = new ::sim_msg::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.planning_line)
  return planning_line_;
}
::sim_msg::Trajectory* Car::release_planning_line() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.planning_line)
  
  ::sim_msg::Trajectory* temp = planning_line_;
  planning_line_ = NULL;
  return temp;
}
void Car::set_allocated_planning_line(::sim_msg::Trajectory* planning_line) {
  delete planning_line_;
  planning_line_ = planning_line;
  if (planning_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.planning_line)
}

// double show_abs_velocity = 22;
void Car::clear_show_abs_velocity() {
  show_abs_velocity_ = 0;
}
double Car::show_abs_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_velocity)
  return show_abs_velocity_;
}
void Car::set_show_abs_velocity(double value) {
  
  show_abs_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_velocity)
}

// double show_abs_acc = 23;
void Car::clear_show_abs_acc() {
  show_abs_acc_ = 0;
}
double Car::show_abs_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_acc)
  return show_abs_acc_;
}
void Car::set_show_abs_acc(double value) {
  
  show_abs_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_acc)
}

// double show_relative_velocity = 24;
void Car::clear_show_relative_velocity() {
  show_relative_velocity_ = 0;
}
double Car::show_relative_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity)
  return show_relative_velocity_;
}
void Car::set_show_relative_velocity(double value) {
  
  show_relative_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity)
}

// double show_relative_acc = 25;
void Car::clear_show_relative_acc() {
  show_relative_acc_ = 0;
}
double Car::show_relative_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc)
  return show_relative_acc_;
}
void Car::set_show_relative_acc(double value) {
  
  show_relative_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc)
}

// double show_relative_velocity_horizontal = 26;
void Car::clear_show_relative_velocity_horizontal() {
  show_relative_velocity_horizontal_ = 0;
}
double Car::show_relative_velocity_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity_horizontal)
  return show_relative_velocity_horizontal_;
}
void Car::set_show_relative_velocity_horizontal(double value) {
  
  show_relative_velocity_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity_horizontal)
}

// double show_relative_acc_horizontal = 27;
void Car::clear_show_relative_acc_horizontal() {
  show_relative_acc_horizontal_ = 0;
}
double Car::show_relative_acc_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc_horizontal)
  return show_relative_acc_horizontal_;
}
void Car::set_show_relative_acc_horizontal(double value) {
  
  show_relative_acc_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc_horizontal)
}

// double show_relative_dist_vertical = 28;
void Car::clear_show_relative_dist_vertical() {
  show_relative_dist_vertical_ = 0;
}
double Car::show_relative_dist_vertical() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_vertical)
  return show_relative_dist_vertical_;
}
void Car::set_show_relative_dist_vertical(double value) {
  
  show_relative_dist_vertical_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_vertical)
}

// double show_relative_dist_horizontal = 29;
void Car::clear_show_relative_dist_horizontal() {
  show_relative_dist_horizontal_ = 0;
}
double Car::show_relative_dist_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_horizontal)
  return show_relative_dist_horizontal_;
}
void Car::set_show_relative_dist_horizontal(double value) {
  
  show_relative_dist_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_horizontal)
}

// .sim_msg.ControlState control_state = 30;
void Car::clear_control_state() {
  control_state_ = 0;
}
::sim_msg::ControlState Car::control_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.control_state)
  return static_cast< ::sim_msg::ControlState >(control_state_);
}
void Car::set_control_state(::sim_msg::ControlState value) {
  
  control_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.control_state)
}

// repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
int Car::show_nearestobjectinfo_size() const {
  return show_nearestobjectinfo_.size();
}
void Car::clear_show_nearestobjectinfo() {
  show_nearestobjectinfo_.Clear();
}
const ::sim_msg::NearestObject& Car::show_nearestobjectinfo(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Get(index);
}
::sim_msg::NearestObject* Car::mutable_show_nearestobjectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Mutable(index);
}
::sim_msg::NearestObject* Car::add_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_add:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >*
Car::mutable_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Car.show_NearestObjectInfo)
  return &show_nearestobjectinfo_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >&
Car::show_nearestobjectinfo() const {
  // @@protoc_insertion_point(field_list:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StaticObstacle::kIdFieldNumber;
const int StaticObstacle::kTFieldNumber;
const int StaticObstacle::kXFieldNumber;
const int StaticObstacle::kYFieldNumber;
const int StaticObstacle::kHeadingFieldNumber;
const int StaticObstacle::kLengthFieldNumber;
const int StaticObstacle::kWidthFieldNumber;
const int StaticObstacle::kHeightFieldNumber;
const int StaticObstacle::kTypeFieldNumber;
const int StaticObstacle::kAgeFieldNumber;
const int StaticObstacle::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StaticObstacle::StaticObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.StaticObstacle)
}
StaticObstacle::StaticObstacle(const StaticObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.StaticObstacle)
}

void StaticObstacle::SharedCtor() {
  ::memset(&t_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
  _cached_size_ = 0;
}

StaticObstacle::~StaticObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.StaticObstacle)
  SharedDtor();
}

void StaticObstacle::SharedDtor() {
}

void StaticObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StaticObstacle::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[4].descriptor;
}

const StaticObstacle& StaticObstacle::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

StaticObstacle* StaticObstacle::New(::google::protobuf::Arena* arena) const {
  StaticObstacle* n = new StaticObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StaticObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.StaticObstacle)
  ::memset(&t_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
}

bool StaticObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.StaticObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (tag == 65u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.StaticObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.StaticObstacle)
  return false;
#undef DO_
}

void StaticObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.StaticObstacle)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double t = 2;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double length = 6;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // int32 age = 10;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->age(), output);
  }

  // double z = 11;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.StaticObstacle)
}

::google::protobuf::uint8* StaticObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.StaticObstacle)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double length = 6;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // int32 age = 10;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->age(), target);
  }

  // double z = 11;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.StaticObstacle)
  return target;
}

size_t StaticObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.StaticObstacle)
  size_t total_size = 0;

  // double t = 2;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double length = 6;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double z = 11;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // int32 age = 10;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StaticObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const StaticObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StaticObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.StaticObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.StaticObstacle)
    MergeFrom(*source);
  }
}

void StaticObstacle::MergeFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void StaticObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StaticObstacle::CopyFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacle::IsInitialized() const {
  return true;
}

void StaticObstacle::Swap(StaticObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StaticObstacle::InternalSwap(StaticObstacle* other) {
  std::swap(t_, other->t_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(z_, other->z_);
  std::swap(age_, other->age_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StaticObstacle::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StaticObstacle

// int32 id = 1;
void StaticObstacle::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 StaticObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.id)
  return id_;
}
void StaticObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.id)
}

// double t = 2;
void StaticObstacle::clear_t() {
  t_ = 0;
}
double StaticObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.t)
  return t_;
}
void StaticObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.t)
}

// double x = 3;
void StaticObstacle::clear_x() {
  x_ = 0;
}
double StaticObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.x)
  return x_;
}
void StaticObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.x)
}

// double y = 4;
void StaticObstacle::clear_y() {
  y_ = 0;
}
double StaticObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.y)
  return y_;
}
void StaticObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.y)
}

// double heading = 5;
void StaticObstacle::clear_heading() {
  heading_ = 0;
}
double StaticObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.heading)
  return heading_;
}
void StaticObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.heading)
}

// double length = 6;
void StaticObstacle::clear_length() {
  length_ = 0;
}
double StaticObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.length)
  return length_;
}
void StaticObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.length)
}

// double width = 7;
void StaticObstacle::clear_width() {
  width_ = 0;
}
double StaticObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.width)
  return width_;
}
void StaticObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.width)
}

// double height = 8;
void StaticObstacle::clear_height() {
  height_ = 0;
}
double StaticObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.height)
  return height_;
}
void StaticObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.height)
}

// int32 type = 9;
void StaticObstacle::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 StaticObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.type)
  return type_;
}
void StaticObstacle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.type)
}

// int32 age = 10;
void StaticObstacle::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 StaticObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.age)
  return age_;
}
void StaticObstacle::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.age)
}

// double z = 11;
void StaticObstacle::clear_z() {
  z_ = 0;
}
double StaticObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.z)
  return z_;
}
void StaticObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DynamicObstacle::kIdFieldNumber;
const int DynamicObstacle::kTFieldNumber;
const int DynamicObstacle::kXFieldNumber;
const int DynamicObstacle::kYFieldNumber;
const int DynamicObstacle::kHeadingFieldNumber;
const int DynamicObstacle::kLengthFieldNumber;
const int DynamicObstacle::kWidthFieldNumber;
const int DynamicObstacle::kHeightFieldNumber;
const int DynamicObstacle::kTypeFieldNumber;
const int DynamicObstacle::kVFieldNumber;
const int DynamicObstacle::kVlFieldNumber;
const int DynamicObstacle::kAccFieldNumber;
const int DynamicObstacle::kAgeFieldNumber;
const int DynamicObstacle::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DynamicObstacle::DynamicObstacle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.DynamicObstacle)
}
DynamicObstacle::DynamicObstacle(const DynamicObstacle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.DynamicObstacle)
}

void DynamicObstacle::SharedCtor() {
  ::memset(&t_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
  _cached_size_ = 0;
}

DynamicObstacle::~DynamicObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.DynamicObstacle)
  SharedDtor();
}

void DynamicObstacle::SharedDtor() {
}

void DynamicObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DynamicObstacle::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[5].descriptor;
}

const DynamicObstacle& DynamicObstacle::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

DynamicObstacle* DynamicObstacle::New(::google::protobuf::Arena* arena) const {
  DynamicObstacle* n = new DynamicObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DynamicObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.DynamicObstacle)
  ::memset(&t_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_) + sizeof(age_));
}

bool DynamicObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.DynamicObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double t = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double length = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double width = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double height = 8;
      case 8: {
        if (tag == 65u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double v = 10;
      case 10: {
        if (tag == 81u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vl = 11;
      case 11: {
        if (tag == 89u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double acc = 12;
      case 12: {
        if (tag == 97u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 13;
      case 13: {
        if (tag == 104u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 14;
      case 14: {
        if (tag == 113u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.DynamicObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.DynamicObstacle)
  return false;
#undef DO_
}

void DynamicObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.DynamicObstacle)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double t = 2;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->t(), output);
  }

  // double x = 3;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->x(), output);
  }

  // double y = 4;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->y(), output);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->heading(), output);
  }

  // double length = 6;
  if (this->length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->length(), output);
  }

  // double width = 7;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->width(), output);
  }

  // double height = 8;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->height(), output);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->type(), output);
  }

  // double v = 10;
  if (this->v() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->v(), output);
  }

  // double vl = 11;
  if (this->vl() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vl(), output);
  }

  // double acc = 12;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->acc(), output);
  }

  // int32 age = 13;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->age(), output);
  }

  // double z = 14;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->z(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.DynamicObstacle)
}

::google::protobuf::uint8* DynamicObstacle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.DynamicObstacle)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double t = 2;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->t(), target);
  }

  // double x = 3;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->x(), target);
  }

  // double y = 4;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->y(), target);
  }

  // double heading = 5;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->heading(), target);
  }

  // double length = 6;
  if (this->length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->length(), target);
  }

  // double width = 7;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->width(), target);
  }

  // double height = 8;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->height(), target);
  }

  // int32 type = 9;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->type(), target);
  }

  // double v = 10;
  if (this->v() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->v(), target);
  }

  // double vl = 11;
  if (this->vl() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vl(), target);
  }

  // double acc = 12;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->acc(), target);
  }

  // int32 age = 13;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->age(), target);
  }

  // double z = 14;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->z(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.DynamicObstacle)
  return target;
}

size_t DynamicObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.DynamicObstacle)
  size_t total_size = 0;

  // double t = 2;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 type = 9;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // double length = 6;
  if (this->length() != 0) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (this->width() != 0) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (this->height() != 0) {
    total_size += 1 + 8;
  }

  // double v = 10;
  if (this->v() != 0) {
    total_size += 1 + 8;
  }

  // double vl = 11;
  if (this->vl() != 0) {
    total_size += 1 + 8;
  }

  // double acc = 12;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  // double z = 14;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // int32 age = 13;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DynamicObstacle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const DynamicObstacle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DynamicObstacle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.DynamicObstacle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.DynamicObstacle)
    MergeFrom(*source);
  }
}

void DynamicObstacle::MergeFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.t() != 0) {
    set_t(from.t());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.length() != 0) {
    set_length(from.length());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.v() != 0) {
    set_v(from.v());
  }
  if (from.vl() != 0) {
    set_vl(from.vl());
  }
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void DynamicObstacle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DynamicObstacle::CopyFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacle::IsInitialized() const {
  return true;
}

void DynamicObstacle::Swap(DynamicObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DynamicObstacle::InternalSwap(DynamicObstacle* other) {
  std::swap(t_, other->t_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(heading_, other->heading_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(length_, other->length_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(v_, other->v_);
  std::swap(vl_, other->vl_);
  std::swap(acc_, other->acc_);
  std::swap(z_, other->z_);
  std::swap(age_, other->age_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DynamicObstacle::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DynamicObstacle

// int32 id = 1;
void DynamicObstacle::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 DynamicObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.id)
  return id_;
}
void DynamicObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.id)
}

// double t = 2;
void DynamicObstacle::clear_t() {
  t_ = 0;
}
double DynamicObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.t)
  return t_;
}
void DynamicObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.t)
}

// double x = 3;
void DynamicObstacle::clear_x() {
  x_ = 0;
}
double DynamicObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.x)
  return x_;
}
void DynamicObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.x)
}

// double y = 4;
void DynamicObstacle::clear_y() {
  y_ = 0;
}
double DynamicObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.y)
  return y_;
}
void DynamicObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.y)
}

// double heading = 5;
void DynamicObstacle::clear_heading() {
  heading_ = 0;
}
double DynamicObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.heading)
  return heading_;
}
void DynamicObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.heading)
}

// double length = 6;
void DynamicObstacle::clear_length() {
  length_ = 0;
}
double DynamicObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.length)
  return length_;
}
void DynamicObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.length)
}

// double width = 7;
void DynamicObstacle::clear_width() {
  width_ = 0;
}
double DynamicObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.width)
  return width_;
}
void DynamicObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.width)
}

// double height = 8;
void DynamicObstacle::clear_height() {
  height_ = 0;
}
double DynamicObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.height)
  return height_;
}
void DynamicObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.height)
}

// int32 type = 9;
void DynamicObstacle::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 DynamicObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.type)
  return type_;
}
void DynamicObstacle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.type)
}

// double v = 10;
void DynamicObstacle::clear_v() {
  v_ = 0;
}
double DynamicObstacle::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.v)
  return v_;
}
void DynamicObstacle::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.v)
}

// double vl = 11;
void DynamicObstacle::clear_vl() {
  vl_ = 0;
}
double DynamicObstacle::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.vl)
  return vl_;
}
void DynamicObstacle::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.vl)
}

// double acc = 12;
void DynamicObstacle::clear_acc() {
  acc_ = 0;
}
double DynamicObstacle::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.acc)
  return acc_;
}
void DynamicObstacle::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.acc)
}

// int32 age = 13;
void DynamicObstacle::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 DynamicObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.age)
  return age_;
}
void DynamicObstacle::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.age)
}

// double z = 14;
void DynamicObstacle::clear_z() {
  z_ = 0;
}
double DynamicObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.z)
  return z_;
}
void DynamicObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneUid::kTxRoadIdFieldNumber;
const int LaneUid::kTxSectionIdFieldNumber;
const int LaneUid::kTxLaneIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneUid::LaneUid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneUid)
}
LaneUid::LaneUid(const LaneUid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tx_road_id_, &from.tx_road_id_,
    reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_) + sizeof(tx_lane_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneUid)
}

void LaneUid::SharedCtor() {
  ::memset(&tx_road_id_, 0, reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_) + sizeof(tx_lane_id_));
  _cached_size_ = 0;
}

LaneUid::~LaneUid() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneUid)
  SharedDtor();
}

void LaneUid::SharedDtor() {
}

void LaneUid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneUid::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[6].descriptor;
}

const LaneUid& LaneUid::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneUid* LaneUid::New(::google::protobuf::Arena* arena) const {
  LaneUid* n = new LaneUid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneUid::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneUid)
  ::memset(&tx_road_id_, 0, reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_) + sizeof(tx_lane_id_));
}

bool LaneUid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneUid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 tx_road_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneUid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneUid)
  return false;
#undef DO_
}

void LaneUid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneUid)
  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->tx_lane_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.LaneUid)
}

::google::protobuf::uint8* LaneUid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneUid)
  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->tx_lane_id(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneUid)
  return target;
}

size_t LaneUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneUid)
  size_t total_size = 0;

  // uint64 tx_road_id = 1;
  if (this->tx_road_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 2;
  if (this->tx_section_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int64 tx_lane_id = 3;
  if (this->tx_lane_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneUid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneUid)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneUid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneUid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneUid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneUid)
    MergeFrom(*source);
  }
}

void LaneUid::MergeFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneUid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
}

void LaneUid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneUid::CopyFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneUid::IsInitialized() const {
  return true;
}

void LaneUid::Swap(LaneUid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneUid::InternalSwap(LaneUid* other) {
  std::swap(tx_road_id_, other->tx_road_id_);
  std::swap(tx_section_id_, other->tx_section_id_);
  std::swap(tx_lane_id_, other->tx_lane_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneUid::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneUid

// uint64 tx_road_id = 1;
void LaneUid::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LaneUid::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_road_id)
  return tx_road_id_;
}
void LaneUid::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_road_id)
}

// uint64 tx_section_id = 2;
void LaneUid::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LaneUid::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_section_id)
  return tx_section_id_;
}
void LaneUid::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_section_id)
}

// int64 tx_lane_id = 3;
void LaneUid::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 LaneUid::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_lane_id)
  return tx_lane_id_;
}
void LaneUid::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_lane_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrafficLight::kIdFieldNumber;
const int TrafficLight::kXFieldNumber;
const int TrafficLight::kYFieldNumber;
const int TrafficLight::kHeadingFieldNumber;
const int TrafficLight::kColorFieldNumber;
const int TrafficLight::kAgeFieldNumber;
const int TrafficLight::kZFieldNumber;
const int TrafficLight::kTxRoadIdFieldNumber;
const int TrafficLight::kTxSectionIdFieldNumber;
const int TrafficLight::kTxLaneIdFieldNumber;
const int TrafficLight::kControlLanesFieldNumber;
const int TrafficLight::kControlPhasesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrafficLight::TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      control_lanes_(from.control_lanes_),
      control_phases_(from.control_phases_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&x_) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficLight)
}

void TrafficLight::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&x_) + sizeof(age_));
  _cached_size_ = 0;
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficLight)
  SharedDtor();
}

void TrafficLight::SharedDtor() {
}

void TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrafficLight::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[7].descriptor;
}

const TrafficLight& TrafficLight::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

TrafficLight* TrafficLight::New(::google::protobuf::Arena* arena) const {
  TrafficLight* n = new TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficLight)
  control_lanes_.Clear();
  control_phases_.Clear();
  ::memset(&x_, 0, reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&x_) + sizeof(age_));
}

bool TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double x = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double y = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double heading = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 color = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 age = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 7;
      case 7: {
        if (tag == 57u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_road_id = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_road_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 tx_section_id = 9;
      case 9: {
        if (tag == 72u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tx_section_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 tx_lane_id = 10;
      case 10: {
        if (tag == 80u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tx_lane_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LaneUid control_lanes = 11;
      case 11: {
        if (tag == 90u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_control_lanes()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.Phase control_phases = 12;
      case 12: {
        if (tag == 98u) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(length);
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_control_phases(static_cast< ::sim_msg::Phase >(value));
          }
          input->PopLimit(limit);
        } else if (tag == 96u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_control_phases(static_cast< ::sim_msg::Phase >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.TrafficLight)
  return false;
#undef DO_
}

void TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.TrafficLight)
  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // double x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->x(), output);
  }

  // double y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->y(), output);
  }

  // double heading = 4;
  if (this->heading() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  // int32 color = 5;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->color(), output);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->age(), output);
  }

  // double z = 7;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->z(), output);
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->tx_road_id(), output);
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->tx_section_id(), output);
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->tx_lane_id(), output);
  }

  // repeated .sim_msg.LaneUid control_lanes = 11;
  for (unsigned int i = 0, n = this->control_lanes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->control_lanes(i), output);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  if (this->control_phases_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(_control_phases_cached_byte_size_);
  }
  for (int i = 0; i < this->control_phases_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->control_phases(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.TrafficLight)
}

::google::protobuf::uint8* TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficLight)
  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // double x = 2;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->x(), target);
  }

  // double y = 3;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->y(), target);
  }

  // double heading = 4;
  if (this->heading() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading(), target);
  }

  // int32 color = 5;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->color(), target);
  }

  // int32 age = 6;
  if (this->age() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->age(), target);
  }

  // double z = 7;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->z(), target);
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->tx_road_id(), target);
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->tx_section_id(), target);
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->tx_lane_id(), target);
  }

  // repeated .sim_msg.LaneUid control_lanes = 11;
  for (unsigned int i = 0, n = this->control_lanes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, this->control_lanes(i), false, target);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  if (this->control_phases_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      12,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(    _control_phases_cached_byte_size_, target);
  }
  for (int i = 0; i < this->control_phases_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->control_phases(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficLight)
  size_t total_size = 0;

  // repeated .sim_msg.LaneUid control_lanes = 11;
  {
    unsigned int count = this->control_lanes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control_lanes(i));
    }
  }

  // repeated .sim_msg.Phase control_phases = 12;
  {
    size_t data_size = 0;
    unsigned int count = this->control_phases_size();for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->control_phases(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _control_phases_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // double x = 2;
  if (this->x() != 0) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (this->y() != 0) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 color = 5;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // double heading = 4;
  if (this->heading() != 0) {
    total_size += 1 + 8;
  }

  // double z = 7;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // uint64 tx_road_id = 8;
  if (this->tx_road_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_road_id());
  }

  // uint64 tx_section_id = 9;
  if (this->tx_section_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tx_section_id());
  }

  // int64 tx_lane_id = 10;
  if (this->tx_lane_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tx_lane_id());
  }

  // int32 age = 6;
  if (this->age() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->age());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.TrafficLight)
    MergeFrom(*source);
  }
}

void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  control_lanes_.MergeFrom(from.control_lanes_);
  control_phases_.MergeFrom(from.control_phases_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.heading() != 0) {
    set_heading(from.heading());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.tx_road_id() != 0) {
    set_tx_road_id(from.tx_road_id());
  }
  if (from.tx_section_id() != 0) {
    set_tx_section_id(from.tx_section_id());
  }
  if (from.tx_lane_id() != 0) {
    set_tx_lane_id(from.tx_lane_id());
  }
  if (from.age() != 0) {
    set_age(from.age());
  }
}

void TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::Swap(TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrafficLight::InternalSwap(TrafficLight* other) {
  control_lanes_.UnsafeArenaSwap(&other->control_lanes_);
  control_phases_.UnsafeArenaSwap(&other->control_phases_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(id_, other->id_);
  std::swap(color_, other->color_);
  std::swap(heading_, other->heading_);
  std::swap(z_, other->z_);
  std::swap(tx_road_id_, other->tx_road_id_);
  std::swap(tx_section_id_, other->tx_section_id_);
  std::swap(tx_lane_id_, other->tx_lane_id_);
  std::swap(age_, other->age_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrafficLight::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrafficLight

// int32 id = 1;
void TrafficLight::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.id)
  return id_;
}
void TrafficLight::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.id)
}

// double x = 2;
void TrafficLight::clear_x() {
  x_ = 0;
}
double TrafficLight::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.x)
  return x_;
}
void TrafficLight::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.x)
}

// double y = 3;
void TrafficLight::clear_y() {
  y_ = 0;
}
double TrafficLight::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.y)
  return y_;
}
void TrafficLight::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.y)
}

// double heading = 4;
void TrafficLight::clear_heading() {
  heading_ = 0;
}
double TrafficLight::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.heading)
  return heading_;
}
void TrafficLight::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.heading)
}

// int32 color = 5;
void TrafficLight::clear_color() {
  color_ = 0;
}
::google::protobuf::int32 TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.color)
  return color_;
}
void TrafficLight::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.color)
}

// int32 age = 6;
void TrafficLight::clear_age() {
  age_ = 0;
}
::google::protobuf::int32 TrafficLight::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.age)
  return age_;
}
void TrafficLight::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.age)
}

// double z = 7;
void TrafficLight::clear_z() {
  z_ = 0;
}
double TrafficLight::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.z)
  return z_;
}
void TrafficLight::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.z)
}

// uint64 tx_road_id = 8;
void TrafficLight::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TrafficLight::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_road_id)
  return tx_road_id_;
}
void TrafficLight::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_road_id)
}

// uint64 tx_section_id = 9;
void TrafficLight::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 TrafficLight::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_section_id)
  return tx_section_id_;
}
void TrafficLight::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_section_id)
}

// int64 tx_lane_id = 10;
void TrafficLight::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 TrafficLight::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_lane_id)
  return tx_lane_id_;
}
void TrafficLight::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_lane_id)
}

// repeated .sim_msg.LaneUid control_lanes = 11;
int TrafficLight::control_lanes_size() const {
  return control_lanes_.size();
}
void TrafficLight::clear_control_lanes() {
  control_lanes_.Clear();
}
const ::sim_msg::LaneUid& TrafficLight::control_lanes(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Get(index);
}
::sim_msg::LaneUid* TrafficLight::mutable_control_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Mutable(index);
}
::sim_msg::LaneUid* TrafficLight::add_control_lanes() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >*
TrafficLight::mutable_control_lanes() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_lanes)
  return &control_lanes_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >&
TrafficLight::control_lanes() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_lanes)
  return control_lanes_;
}

// repeated .sim_msg.Phase control_phases = 12;
int TrafficLight::control_phases_size() const {
  return control_phases_.size();
}
void TrafficLight::clear_control_phases() {
  control_phases_.Clear();
}
::sim_msg::Phase TrafficLight::control_phases(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_phases)
  return static_cast< ::sim_msg::Phase >(control_phases_.Get(index));
}
void TrafficLight::set_control_phases(int index, ::sim_msg::Phase value) {
  control_phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.control_phases)
}
void TrafficLight::add_control_phases(::sim_msg::Phase value) {
  control_phases_.Add(value);
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_phases)
}
const ::google::protobuf::RepeatedField<int>&
TrafficLight::control_phases() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_phases)
  return control_phases_;
}
::google::protobuf::RepeatedField<int>*
TrafficLight::mutable_control_phases() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_phases)
  return &control_phases_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Traffic::kCarsFieldNumber;
const int Traffic::kStaticObstaclesFieldNumber;
const int Traffic::kDynamicObstaclesFieldNumber;
const int Traffic::kTrafficLightsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Traffic::Traffic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_traffic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Traffic)
}
Traffic::Traffic(const Traffic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cars_(from.cars_),
      staticobstacles_(from.staticobstacles_),
      dynamicobstacles_(from.dynamicobstacles_),
      trafficlights_(from.trafficlights_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Traffic)
}

void Traffic::SharedCtor() {
  _cached_size_ = 0;
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:sim_msg.Traffic)
  SharedDtor();
}

void Traffic::SharedDtor() {
}

void Traffic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Traffic::descriptor() {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[8].descriptor;
}

const Traffic& Traffic::default_instance() {
  protobuf_traffic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Traffic* Traffic::New(::google::protobuf::Arena* arena) const {
  Traffic* n = new Traffic;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Traffic)
  cars_.Clear();
  staticobstacles_.Clear();
  dynamicobstacles_.Clear();
  trafficlights_.Clear();
}

bool Traffic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Traffic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Car cars = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_cars()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.StaticObstacle staticObstacles = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_staticobstacles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dynamicobstacles()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.TrafficLight trafficLights = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trafficlights()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Traffic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Traffic)
  return false;
#undef DO_
}

void Traffic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Traffic)
  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0, n = this->cars_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cars(i), output);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  for (unsigned int i = 0, n = this->staticobstacles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->staticobstacles(i), output);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  for (unsigned int i = 0, n = this->dynamicobstacles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dynamicobstacles(i), output);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  for (unsigned int i = 0, n = this->trafficlights_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->trafficlights(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Traffic)
}

::google::protobuf::uint8* Traffic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Traffic)
  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0, n = this->cars_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->cars(i), false, target);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  for (unsigned int i = 0, n = this->staticobstacles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->staticobstacles(i), false, target);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  for (unsigned int i = 0, n = this->dynamicobstacles_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->dynamicobstacles(i), false, target);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  for (unsigned int i = 0, n = this->trafficlights_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->trafficlights(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Traffic)
  return target;
}

size_t Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Traffic)
  size_t total_size = 0;

  // repeated .sim_msg.Car cars = 1;
  {
    unsigned int count = this->cars_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cars(i));
    }
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  {
    unsigned int count = this->staticobstacles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->staticobstacles(i));
    }
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  {
    unsigned int count = this->dynamicobstacles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dynamicobstacles(i));
    }
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  {
    unsigned int count = this->trafficlights_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trafficlights(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Traffic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  const Traffic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Traffic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Traffic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Traffic)
    MergeFrom(*source);
  }
}

void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  cars_.MergeFrom(from.cars_);
  staticobstacles_.MergeFrom(from.staticobstacles_);
  dynamicobstacles_.MergeFrom(from.dynamicobstacles_);
  trafficlights_.MergeFrom(from.trafficlights_);
}

void Traffic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {
  return true;
}

void Traffic::Swap(Traffic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Traffic::InternalSwap(Traffic* other) {
  cars_.UnsafeArenaSwap(&other->cars_);
  staticobstacles_.UnsafeArenaSwap(&other->staticobstacles_);
  dynamicobstacles_.UnsafeArenaSwap(&other->dynamicobstacles_);
  trafficlights_.UnsafeArenaSwap(&other->trafficlights_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Traffic::GetMetadata() const {
  protobuf_traffic_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_traffic_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Traffic

// repeated .sim_msg.Car cars = 1;
int Traffic::cars_size() const {
  return cars_.size();
}
void Traffic::clear_cars() {
  cars_.Clear();
}
const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return cars_.Get(index);
}
::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
::sim_msg::Car* Traffic::add_cars() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return cars_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// repeated .sim_msg.StaticObstacle staticObstacles = 2;
int Traffic::staticobstacles_size() const {
  return staticobstacles_.size();
}
void Traffic::clear_staticobstacles() {
  staticobstacles_.Clear();
}
const ::sim_msg::StaticObstacle& Traffic::staticobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Get(index);
}
::sim_msg::StaticObstacle* Traffic::mutable_staticobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Mutable(index);
}
::sim_msg::StaticObstacle* Traffic::add_staticobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >*
Traffic::mutable_staticobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.staticObstacles)
  return &staticobstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >&
Traffic::staticobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.staticObstacles)
  return staticobstacles_;
}

// repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
int Traffic::dynamicobstacles_size() const {
  return dynamicobstacles_.size();
}
void Traffic::clear_dynamicobstacles() {
  dynamicobstacles_.Clear();
}
const ::sim_msg::DynamicObstacle& Traffic::dynamicobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Get(index);
}
::sim_msg::DynamicObstacle* Traffic::mutable_dynamicobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Mutable(index);
}
::sim_msg::DynamicObstacle* Traffic::add_dynamicobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
Traffic::mutable_dynamicobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.dynamicObstacles)
  return &dynamicobstacles_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
Traffic::dynamicobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_;
}

// repeated .sim_msg.TrafficLight trafficLights = 4;
int Traffic::trafficlights_size() const {
  return trafficlights_.size();
}
void Traffic::clear_trafficlights() {
  trafficlights_.Clear();
}
const ::sim_msg::TrafficLight& Traffic::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.trafficLights)
  return trafficlights_.Get(index);
}
::sim_msg::TrafficLight* Traffic::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.trafficLights)
  return trafficlights_.Mutable(index);
}
::sim_msg::TrafficLight* Traffic::add_trafficlights() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.trafficLights)
  return trafficlights_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >*
Traffic::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.trafficLights)
  return &trafficlights_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >&
Traffic::trafficlights() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.trafficLights)
  return trafficlights_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
