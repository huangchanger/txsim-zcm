// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef PROTOBUF_location_2eproto__INCLUDED
#define PROTOBUF_location_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "basic.pb.h"
// @@protoc_insertion_point(includes)
namespace sim_msg {
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class Vec2;
class Vec2DefaultTypeInternal;
extern Vec2DefaultTypeInternal _Vec2_default_instance_;
class Vec3;
class Vec3DefaultTypeInternal;
extern Vec3DefaultTypeInternal _Vec3_default_instance_;
class Vec4;
class Vec4DefaultTypeInternal;
extern Vec4DefaultTypeInternal _Vec4_default_instance_;
}  // namespace sim_msg

namespace sim_msg {

namespace protobuf_location_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_location_2eproto

// ===================================================================

class Location : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Location) */ {
 public:
  Location();
  virtual ~Location();

  Location(const Location& from);

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Location& default_instance();

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }

  void Swap(Location* other);

  // implements Message ----------------------------------------------

  inline Location* New() const PROTOBUF_FINAL { return New(NULL); }

  Location* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Location& from);
  void MergeFrom(const Location& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Location* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sim_msg.Vec3 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  const ::sim_msg::Vec3& position() const;
  ::sim_msg::Vec3* mutable_position();
  ::sim_msg::Vec3* release_position();
  void set_allocated_position(::sim_msg::Vec3* position);

  // .sim_msg.Vec3 velocity = 3;
  bool has_velocity() const;
  void clear_velocity();
  static const int kVelocityFieldNumber = 3;
  const ::sim_msg::Vec3& velocity() const;
  ::sim_msg::Vec3* mutable_velocity();
  ::sim_msg::Vec3* release_velocity();
  void set_allocated_velocity(::sim_msg::Vec3* velocity);

  // .sim_msg.Vec3 angular = 4;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 4;
  const ::sim_msg::Vec3& angular() const;
  ::sim_msg::Vec3* mutable_angular();
  ::sim_msg::Vec3* release_angular();
  void set_allocated_angular(::sim_msg::Vec3* angular);

  // .sim_msg.Vec3 rpy = 5;
  bool has_rpy() const;
  void clear_rpy();
  static const int kRpyFieldNumber = 5;
  const ::sim_msg::Vec3& rpy() const;
  ::sim_msg::Vec3* mutable_rpy();
  ::sim_msg::Vec3* release_rpy();
  void set_allocated_rpy(::sim_msg::Vec3* rpy);

  // .sim_msg.Vec3 acceleration = 6;
  bool has_acceleration() const;
  void clear_acceleration();
  static const int kAccelerationFieldNumber = 6;
  const ::sim_msg::Vec3& acceleration() const;
  ::sim_msg::Vec3* mutable_acceleration();
  ::sim_msg::Vec3* release_acceleration();
  void set_allocated_acceleration(::sim_msg::Vec3* acceleration);

  // double t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  double t() const;
  void set_t(double value);

  // @@protoc_insertion_point(class_scope:sim_msg.Location)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Vec3* position_;
  ::sim_msg::Vec3* velocity_;
  ::sim_msg::Vec3* angular_;
  ::sim_msg::Vec3* rpy_;
  ::sim_msg::Vec3* acceleration_;
  double t_;
  mutable int _cached_size_;
  friend struct  protobuf_location_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// double t = 1;
inline void Location::clear_t() {
  t_ = 0;
}
inline double Location::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.t)
  return t_;
}
inline void Location::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Location.t)
}

// .sim_msg.Vec3 position = 2;
inline bool Location::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void Location::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::sim_msg::Vec3& Location::position() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.position)
  return position_ != NULL ? *position_
                         : *::sim_msg::Vec3::internal_default_instance();
}
inline ::sim_msg::Vec3* Location::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.position)
  return position_;
}
inline ::sim_msg::Vec3* Location::release_position() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.position)
  
  ::sim_msg::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Location::set_allocated_position(::sim_msg::Vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.position)
}

// .sim_msg.Vec3 velocity = 3;
inline bool Location::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
inline void Location::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
inline const ::sim_msg::Vec3& Location::velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::sim_msg::Vec3::internal_default_instance();
}
inline ::sim_msg::Vec3* Location::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.velocity)
  return velocity_;
}
inline ::sim_msg::Vec3* Location::release_velocity() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.velocity)
  
  ::sim_msg::Vec3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
inline void Location::set_allocated_velocity(::sim_msg::Vec3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.velocity)
}

// .sim_msg.Vec3 angular = 4;
inline bool Location::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
inline void Location::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
inline const ::sim_msg::Vec3& Location::angular() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.angular)
  return angular_ != NULL ? *angular_
                         : *::sim_msg::Vec3::internal_default_instance();
}
inline ::sim_msg::Vec3* Location::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.angular)
  return angular_;
}
inline ::sim_msg::Vec3* Location::release_angular() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.angular)
  
  ::sim_msg::Vec3* temp = angular_;
  angular_ = NULL;
  return temp;
}
inline void Location::set_allocated_angular(::sim_msg::Vec3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.angular)
}

// .sim_msg.Vec3 rpy = 5;
inline bool Location::has_rpy() const {
  return this != internal_default_instance() && rpy_ != NULL;
}
inline void Location::clear_rpy() {
  if (GetArenaNoVirtual() == NULL && rpy_ != NULL) delete rpy_;
  rpy_ = NULL;
}
inline const ::sim_msg::Vec3& Location::rpy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.rpy)
  return rpy_ != NULL ? *rpy_
                         : *::sim_msg::Vec3::internal_default_instance();
}
inline ::sim_msg::Vec3* Location::mutable_rpy() {
  
  if (rpy_ == NULL) {
    rpy_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.rpy)
  return rpy_;
}
inline ::sim_msg::Vec3* Location::release_rpy() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.rpy)
  
  ::sim_msg::Vec3* temp = rpy_;
  rpy_ = NULL;
  return temp;
}
inline void Location::set_allocated_rpy(::sim_msg::Vec3* rpy) {
  delete rpy_;
  rpy_ = rpy;
  if (rpy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.rpy)
}

// .sim_msg.Vec3 acceleration = 6;
inline bool Location::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
inline void Location::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
}
inline const ::sim_msg::Vec3& Location::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::sim_msg::Vec3::internal_default_instance();
}
inline ::sim_msg::Vec3* Location::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.acceleration)
  return acceleration_;
}
inline ::sim_msg::Vec3* Location::release_acceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.acceleration)
  
  ::sim_msg::Vec3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
inline void Location::set_allocated_acceleration(::sim_msg::Vec3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.acceleration)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_location_2eproto__INCLUDED
