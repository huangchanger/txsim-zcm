// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef PROTOBUF_traffic_2eproto__INCLUDED
#define PROTOBUF_traffic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "trajectory.pb.h"
#include "location.pb.h"
// @@protoc_insertion_point(includes)
namespace sim_msg {
class Car;
class CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class DynamicObstacle;
class DynamicObstacleDefaultTypeInternal;
extern DynamicObstacleDefaultTypeInternal _DynamicObstacle_default_instance_;
class LaneUid;
class LaneUidDefaultTypeInternal;
extern LaneUidDefaultTypeInternal _LaneUid_default_instance_;
class Location;
class LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class ManualVehicleControlInfo;
class ManualVehicleControlInfoDefaultTypeInternal;
extern ManualVehicleControlInfoDefaultTypeInternal _ManualVehicleControlInfo_default_instance_;
class ManualVehicleControlInfoArray;
class ManualVehicleControlInfoArrayDefaultTypeInternal;
extern ManualVehicleControlInfoArrayDefaultTypeInternal _ManualVehicleControlInfoArray_default_instance_;
class NearestObject;
class NearestObjectDefaultTypeInternal;
extern NearestObjectDefaultTypeInternal _NearestObject_default_instance_;
class StaticObstacle;
class StaticObstacleDefaultTypeInternal;
extern StaticObstacleDefaultTypeInternal _StaticObstacle_default_instance_;
class Traffic;
class TrafficDefaultTypeInternal;
extern TrafficDefaultTypeInternal _Traffic_default_instance_;
class TrafficLight;
class TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
class Trajectory;
class TrajectoryDefaultTypeInternal;
extern TrajectoryDefaultTypeInternal _Trajectory_default_instance_;
class TrajectoryPoint;
class TrajectoryPointDefaultTypeInternal;
extern TrajectoryPointDefaultTypeInternal _TrajectoryPoint_default_instance_;
}  // namespace sim_msg

namespace sim_msg {

namespace protobuf_traffic_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_traffic_2eproto

enum ControlState {
  Autonomous = 0,
  Manual = 1,
  ControlState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ControlState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ControlState_IsValid(int value);
const ControlState ControlState_MIN = Autonomous;
const ControlState ControlState_MAX = Manual;
const int ControlState_ARRAYSIZE = ControlState_MAX + 1;

const ::google::protobuf::EnumDescriptor* ControlState_descriptor();
inline const ::std::string& ControlState_Name(ControlState value) {
  return ::google::protobuf::internal::NameOfEnum(
    ControlState_descriptor(), value);
}
inline bool ControlState_Parse(
    const ::std::string& name, ControlState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ControlState>(
    ControlState_descriptor(), name, value);
}
enum NearestObjectDirection {
  FRONT = 0,
  BACK_DIRECTION = 1,
  LEFT = 2,
  LEFT_FRONT = 3,
  LEFT_BACK = 4,
  RIGHT = 5,
  RIGHT_FRONT = 6,
  RIGHT_BACK = 7,
  NearestObjectDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NearestObjectDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NearestObjectDirection_IsValid(int value);
const NearestObjectDirection NearestObjectDirection_MIN = FRONT;
const NearestObjectDirection NearestObjectDirection_MAX = RIGHT_BACK;
const int NearestObjectDirection_ARRAYSIZE = NearestObjectDirection_MAX + 1;

const ::google::protobuf::EnumDescriptor* NearestObjectDirection_descriptor();
inline const ::std::string& NearestObjectDirection_Name(NearestObjectDirection value) {
  return ::google::protobuf::internal::NameOfEnum(
    NearestObjectDirection_descriptor(), value);
}
inline bool NearestObjectDirection_Parse(
    const ::std::string& name, NearestObjectDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NearestObjectDirection>(
    NearestObjectDirection_descriptor(), name, value);
}
enum Phase {
  U = 0,
  L = 1,
  T = 2,
  R = 3,
  Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Phase_IsValid(int value);
const Phase Phase_MIN = U;
const Phase Phase_MAX = R;
const int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::google::protobuf::EnumDescriptor* Phase_descriptor();
inline const ::std::string& Phase_Name(Phase value) {
  return ::google::protobuf::internal::NameOfEnum(
    Phase_descriptor(), value);
}
inline bool Phase_Parse(
    const ::std::string& name, Phase* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class ManualVehicleControlInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfo) */ {
 public:
  ManualVehicleControlInfo();
  virtual ~ManualVehicleControlInfo();

  ManualVehicleControlInfo(const ManualVehicleControlInfo& from);

  inline ManualVehicleControlInfo& operator=(const ManualVehicleControlInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManualVehicleControlInfo& default_instance();

  static inline const ManualVehicleControlInfo* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfo*>(
               &_ManualVehicleControlInfo_default_instance_);
  }

  void Swap(ManualVehicleControlInfo* other);

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  ManualVehicleControlInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManualVehicleControlInfo& from);
  void MergeFrom(const ManualVehicleControlInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManualVehicleControlInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .sim_msg.Location veh_control_info = 2;
  bool has_veh_control_info() const;
  void clear_veh_control_info();
  static const int kVehControlInfoFieldNumber = 2;
  const ::sim_msg::Location& veh_control_info() const;
  ::sim_msg::Location* mutable_veh_control_info();
  ::sim_msg::Location* release_veh_control_info();
  void set_allocated_veh_control_info(::sim_msg::Location* veh_control_info);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::sim_msg::Location* veh_control_info_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ManualVehicleControlInfoArray : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfoArray) */ {
 public:
  ManualVehicleControlInfoArray();
  virtual ~ManualVehicleControlInfoArray();

  ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from);

  inline ManualVehicleControlInfoArray& operator=(const ManualVehicleControlInfoArray& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ManualVehicleControlInfoArray& default_instance();

  static inline const ManualVehicleControlInfoArray* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfoArray*>(
               &_ManualVehicleControlInfoArray_default_instance_);
  }

  void Swap(ManualVehicleControlInfoArray* other);

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfoArray* New() const PROTOBUF_FINAL { return New(NULL); }

  ManualVehicleControlInfoArray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ManualVehicleControlInfoArray& from);
  void MergeFrom(const ManualVehicleControlInfoArray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ManualVehicleControlInfoArray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  int vehicles_control_info_size() const;
  void clear_vehicles_control_info();
  static const int kVehiclesControlInfoFieldNumber = 1;
  const ::sim_msg::ManualVehicleControlInfo& vehicles_control_info(int index) const;
  ::sim_msg::ManualVehicleControlInfo* mutable_vehicles_control_info(int index);
  ::sim_msg::ManualVehicleControlInfo* add_vehicles_control_info();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
      mutable_vehicles_control_info();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
      vehicles_control_info() const;

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfoArray)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo > vehicles_control_info_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NearestObject : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.NearestObject) */ {
 public:
  NearestObject();
  virtual ~NearestObject();

  NearestObject(const NearestObject& from);

  inline NearestObject& operator=(const NearestObject& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearestObject& default_instance();

  static inline const NearestObject* internal_default_instance() {
    return reinterpret_cast<const NearestObject*>(
               &_NearestObject_default_instance_);
  }

  void Swap(NearestObject* other);

  // implements Message ----------------------------------------------

  inline NearestObject* New() const PROTOBUF_FINAL { return New(NULL); }

  NearestObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NearestObject& from);
  void MergeFrom(const NearestObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NearestObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double euclid_dist = 2;
  void clear_euclid_dist();
  static const int kEuclidDistFieldNumber = 2;
  double euclid_dist() const;
  void set_euclid_dist(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .sim_msg.NearestObjectDirection dir = 3;
  void clear_dir();
  static const int kDirFieldNumber = 3;
  ::sim_msg::NearestObjectDirection dir() const;
  void set_dir(::sim_msg::NearestObjectDirection value);

  // @@protoc_insertion_point(class_scope:sim_msg.NearestObject)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double euclid_dist_;
  ::google::protobuf::int32 id_;
  int dir_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Car : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Car) */ {
 public:
  Car();
  virtual ~Car();

  Car(const Car& from);

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Car& default_instance();

  static inline const Car* internal_default_instance() {
    return reinterpret_cast<const Car*>(
               &_Car_default_instance_);
  }

  void Swap(Car* other);

  // implements Message ----------------------------------------------

  inline Car* New() const PROTOBUF_FINAL { return New(NULL); }

  Car* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Car& from);
  void MergeFrom(const Car& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Car* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  int show_nearestobjectinfo_size() const;
  void clear_show_nearestobjectinfo();
  static const int kShowNearestObjectInfoFieldNumber = 31;
  const ::sim_msg::NearestObject& show_nearestobjectinfo(int index) const;
  ::sim_msg::NearestObject* mutable_show_nearestobjectinfo(int index);
  ::sim_msg::NearestObject* add_show_nearestobjectinfo();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >*
      mutable_show_nearestobjectinfo();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >&
      show_nearestobjectinfo() const;

  // .sim_msg.Trajectory planning_line = 21;
  bool has_planning_line() const;
  void clear_planning_line();
  static const int kPlanningLineFieldNumber = 21;
  const ::sim_msg::Trajectory& planning_line() const;
  ::sim_msg::Trajectory* mutable_planning_line();
  ::sim_msg::Trajectory* release_planning_line();
  void set_allocated_planning_line(::sim_msg::Trajectory* planning_line);

  // double t = 2;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // double v = 6;
  void clear_v();
  static const int kVFieldNumber = 6;
  double v() const;
  void set_v(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 12;
  void clear_type();
  static const int kTypeFieldNumber = 12;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double vl = 7;
  void clear_vl();
  static const int kVlFieldNumber = 7;
  double vl() const;
  void set_vl(double value);

  // double theta = 8;
  void clear_theta();
  static const int kThetaFieldNumber = 8;
  double theta() const;
  void set_theta(double value);

  // double length = 9;
  void clear_length();
  static const int kLengthFieldNumber = 9;
  double length() const;
  void set_length(double value);

  // double width = 10;
  void clear_width();
  static const int kWidthFieldNumber = 10;
  double width() const;
  void set_width(double value);

  // double height = 11;
  void clear_height();
  static const int kHeightFieldNumber = 11;
  double height() const;
  void set_height(double value);

  // double acc = 14;
  void clear_acc();
  static const int kAccFieldNumber = 14;
  double acc() const;
  void set_acc(double value);

  // int32 laneId = 13;
  void clear_laneid();
  static const int kLaneIdFieldNumber = 13;
  ::google::protobuf::int32 laneid() const;
  void set_laneid(::google::protobuf::int32 value);

  // int32 age = 15;
  void clear_age();
  static const int kAgeFieldNumber = 15;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // double z = 16;
  void clear_z();
  static const int kZFieldNumber = 16;
  double z() const;
  void set_z(double value);

  // uint64 tx_road_id = 17;
  void clear_tx_road_id();
  static const int kTxRoadIdFieldNumber = 17;
  ::google::protobuf::uint64 tx_road_id() const;
  void set_tx_road_id(::google::protobuf::uint64 value);

  // uint64 tx_section_id = 18;
  void clear_tx_section_id();
  static const int kTxSectionIdFieldNumber = 18;
  ::google::protobuf::uint64 tx_section_id() const;
  void set_tx_section_id(::google::protobuf::uint64 value);

  // int64 tx_lane_id = 19;
  void clear_tx_lane_id();
  static const int kTxLaneIdFieldNumber = 19;
  ::google::protobuf::int64 tx_lane_id() const;
  void set_tx_lane_id(::google::protobuf::int64 value);

  // uint64 tx_lanelink_id = 20;
  void clear_tx_lanelink_id();
  static const int kTxLanelinkIdFieldNumber = 20;
  ::google::protobuf::uint64 tx_lanelink_id() const;
  void set_tx_lanelink_id(::google::protobuf::uint64 value);

  // double show_abs_velocity = 22;
  void clear_show_abs_velocity();
  static const int kShowAbsVelocityFieldNumber = 22;
  double show_abs_velocity() const;
  void set_show_abs_velocity(double value);

  // double show_abs_acc = 23;
  void clear_show_abs_acc();
  static const int kShowAbsAccFieldNumber = 23;
  double show_abs_acc() const;
  void set_show_abs_acc(double value);

  // double show_relative_velocity = 24;
  void clear_show_relative_velocity();
  static const int kShowRelativeVelocityFieldNumber = 24;
  double show_relative_velocity() const;
  void set_show_relative_velocity(double value);

  // double show_relative_acc = 25;
  void clear_show_relative_acc();
  static const int kShowRelativeAccFieldNumber = 25;
  double show_relative_acc() const;
  void set_show_relative_acc(double value);

  // double show_relative_velocity_horizontal = 26;
  void clear_show_relative_velocity_horizontal();
  static const int kShowRelativeVelocityHorizontalFieldNumber = 26;
  double show_relative_velocity_horizontal() const;
  void set_show_relative_velocity_horizontal(double value);

  // double show_relative_acc_horizontal = 27;
  void clear_show_relative_acc_horizontal();
  static const int kShowRelativeAccHorizontalFieldNumber = 27;
  double show_relative_acc_horizontal() const;
  void set_show_relative_acc_horizontal(double value);

  // double show_relative_dist_vertical = 28;
  void clear_show_relative_dist_vertical();
  static const int kShowRelativeDistVerticalFieldNumber = 28;
  double show_relative_dist_vertical() const;
  void set_show_relative_dist_vertical(double value);

  // double show_relative_dist_horizontal = 29;
  void clear_show_relative_dist_horizontal();
  static const int kShowRelativeDistHorizontalFieldNumber = 29;
  double show_relative_dist_horizontal() const;
  void set_show_relative_dist_horizontal(double value);

  // .sim_msg.ControlState control_state = 30;
  void clear_control_state();
  static const int kControlStateFieldNumber = 30;
  ::sim_msg::ControlState control_state() const;
  void set_control_state(::sim_msg::ControlState value);

  // @@protoc_insertion_point(class_scope:sim_msg.Car)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject > show_nearestobjectinfo_;
  ::sim_msg::Trajectory* planning_line_;
  double t_;
  double x_;
  double y_;
  double heading_;
  double v_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  double vl_;
  double theta_;
  double length_;
  double width_;
  double height_;
  double acc_;
  ::google::protobuf::int32 laneid_;
  ::google::protobuf::int32 age_;
  double z_;
  ::google::protobuf::uint64 tx_road_id_;
  ::google::protobuf::uint64 tx_section_id_;
  ::google::protobuf::int64 tx_lane_id_;
  ::google::protobuf::uint64 tx_lanelink_id_;
  double show_abs_velocity_;
  double show_abs_acc_;
  double show_relative_velocity_;
  double show_relative_acc_;
  double show_relative_velocity_horizontal_;
  double show_relative_acc_horizontal_;
  double show_relative_dist_vertical_;
  double show_relative_dist_horizontal_;
  int control_state_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StaticObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.StaticObstacle) */ {
 public:
  StaticObstacle();
  virtual ~StaticObstacle();

  StaticObstacle(const StaticObstacle& from);

  inline StaticObstacle& operator=(const StaticObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StaticObstacle& default_instance();

  static inline const StaticObstacle* internal_default_instance() {
    return reinterpret_cast<const StaticObstacle*>(
               &_StaticObstacle_default_instance_);
  }

  void Swap(StaticObstacle* other);

  // implements Message ----------------------------------------------

  inline StaticObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  StaticObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StaticObstacle& from);
  void MergeFrom(const StaticObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StaticObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double t = 2;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double length = 6;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // double z = 11;
  void clear_z();
  static const int kZFieldNumber = 11;
  double z() const;
  void set_z(double value);

  // int32 age = 10;
  void clear_age();
  static const int kAgeFieldNumber = 10;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.StaticObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  double length_;
  double width_;
  double height_;
  double z_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DynamicObstacle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.DynamicObstacle) */ {
 public:
  DynamicObstacle();
  virtual ~DynamicObstacle();

  DynamicObstacle(const DynamicObstacle& from);

  inline DynamicObstacle& operator=(const DynamicObstacle& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DynamicObstacle& default_instance();

  static inline const DynamicObstacle* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacle*>(
               &_DynamicObstacle_default_instance_);
  }

  void Swap(DynamicObstacle* other);

  // implements Message ----------------------------------------------

  inline DynamicObstacle* New() const PROTOBUF_FINAL { return New(NULL); }

  DynamicObstacle* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DynamicObstacle& from);
  void MergeFrom(const DynamicObstacle& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DynamicObstacle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double t = 2;
  void clear_t();
  static const int kTFieldNumber = 2;
  double t() const;
  void set_t(double value);

  // double x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  double x() const;
  void set_x(double value);

  // double y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  double y() const;
  void set_y(double value);

  // double heading = 5;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  double heading() const;
  void set_heading(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 type = 9;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // double length = 6;
  void clear_length();
  static const int kLengthFieldNumber = 6;
  double length() const;
  void set_length(double value);

  // double width = 7;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  double width() const;
  void set_width(double value);

  // double height = 8;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  double height() const;
  void set_height(double value);

  // double v = 10;
  void clear_v();
  static const int kVFieldNumber = 10;
  double v() const;
  void set_v(double value);

  // double vl = 11;
  void clear_vl();
  static const int kVlFieldNumber = 11;
  double vl() const;
  void set_vl(double value);

  // double acc = 12;
  void clear_acc();
  static const int kAccFieldNumber = 12;
  double acc() const;
  void set_acc(double value);

  // double z = 14;
  void clear_z();
  static const int kZFieldNumber = 14;
  double z() const;
  void set_z(double value);

  // int32 age = 13;
  void clear_age();
  static const int kAgeFieldNumber = 13;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.DynamicObstacle)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 type_;
  double length_;
  double width_;
  double height_;
  double v_;
  double vl_;
  double acc_;
  double z_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LaneUid : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.LaneUid) */ {
 public:
  LaneUid();
  virtual ~LaneUid();

  LaneUid(const LaneUid& from);

  inline LaneUid& operator=(const LaneUid& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LaneUid& default_instance();

  static inline const LaneUid* internal_default_instance() {
    return reinterpret_cast<const LaneUid*>(
               &_LaneUid_default_instance_);
  }

  void Swap(LaneUid* other);

  // implements Message ----------------------------------------------

  inline LaneUid* New() const PROTOBUF_FINAL { return New(NULL); }

  LaneUid* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LaneUid& from);
  void MergeFrom(const LaneUid& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LaneUid* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 tx_road_id = 1;
  void clear_tx_road_id();
  static const int kTxRoadIdFieldNumber = 1;
  ::google::protobuf::uint64 tx_road_id() const;
  void set_tx_road_id(::google::protobuf::uint64 value);

  // uint64 tx_section_id = 2;
  void clear_tx_section_id();
  static const int kTxSectionIdFieldNumber = 2;
  ::google::protobuf::uint64 tx_section_id() const;
  void set_tx_section_id(::google::protobuf::uint64 value);

  // int64 tx_lane_id = 3;
  void clear_tx_lane_id();
  static const int kTxLaneIdFieldNumber = 3;
  ::google::protobuf::int64 tx_lane_id() const;
  void set_tx_lane_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:sim_msg.LaneUid)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 tx_road_id_;
  ::google::protobuf::uint64 tx_section_id_;
  ::google::protobuf::int64 tx_lane_id_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TrafficLight : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficLight) */ {
 public:
  TrafficLight();
  virtual ~TrafficLight();

  TrafficLight(const TrafficLight& from);

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrafficLight& default_instance();

  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }

  void Swap(TrafficLight* other);

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const PROTOBUF_FINAL { return New(NULL); }

  TrafficLight* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TrafficLight& from);
  void MergeFrom(const TrafficLight& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TrafficLight* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.LaneUid control_lanes = 11;
  int control_lanes_size() const;
  void clear_control_lanes();
  static const int kControlLanesFieldNumber = 11;
  const ::sim_msg::LaneUid& control_lanes(int index) const;
  ::sim_msg::LaneUid* mutable_control_lanes(int index);
  ::sim_msg::LaneUid* add_control_lanes();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >*
      mutable_control_lanes();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >&
      control_lanes() const;

  // repeated .sim_msg.Phase control_phases = 12;
  int control_phases_size() const;
  void clear_control_phases();
  static const int kControlPhasesFieldNumber = 12;
  ::sim_msg::Phase control_phases(int index) const;
  void set_control_phases(int index, ::sim_msg::Phase value);
  void add_control_phases(::sim_msg::Phase value);
  const ::google::protobuf::RepeatedField<int>& control_phases() const;
  ::google::protobuf::RepeatedField<int>* mutable_control_phases();

  // double x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  double x() const;
  void set_x(double value);

  // double y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  double y() const;
  void set_y(double value);

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 color = 5;
  void clear_color();
  static const int kColorFieldNumber = 5;
  ::google::protobuf::int32 color() const;
  void set_color(::google::protobuf::int32 value);

  // double heading = 4;
  void clear_heading();
  static const int kHeadingFieldNumber = 4;
  double heading() const;
  void set_heading(double value);

  // double z = 7;
  void clear_z();
  static const int kZFieldNumber = 7;
  double z() const;
  void set_z(double value);

  // uint64 tx_road_id = 8;
  void clear_tx_road_id();
  static const int kTxRoadIdFieldNumber = 8;
  ::google::protobuf::uint64 tx_road_id() const;
  void set_tx_road_id(::google::protobuf::uint64 value);

  // uint64 tx_section_id = 9;
  void clear_tx_section_id();
  static const int kTxSectionIdFieldNumber = 9;
  ::google::protobuf::uint64 tx_section_id() const;
  void set_tx_section_id(::google::protobuf::uint64 value);

  // int64 tx_lane_id = 10;
  void clear_tx_lane_id();
  static const int kTxLaneIdFieldNumber = 10;
  ::google::protobuf::int64 tx_lane_id() const;
  void set_tx_lane_id(::google::protobuf::int64 value);

  // int32 age = 6;
  void clear_age();
  static const int kAgeFieldNumber = 6;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficLight)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid > control_lanes_;
  ::google::protobuf::RepeatedField<int> control_phases_;
  mutable int _control_phases_cached_byte_size_;
  double x_;
  double y_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 color_;
  double heading_;
  double z_;
  ::google::protobuf::uint64 tx_road_id_;
  ::google::protobuf::uint64 tx_section_id_;
  ::google::protobuf::int64 tx_lane_id_;
  ::google::protobuf::int32 age_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Traffic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:sim_msg.Traffic) */ {
 public:
  Traffic();
  virtual ~Traffic();

  Traffic(const Traffic& from);

  inline Traffic& operator=(const Traffic& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Traffic& default_instance();

  static inline const Traffic* internal_default_instance() {
    return reinterpret_cast<const Traffic*>(
               &_Traffic_default_instance_);
  }

  void Swap(Traffic* other);

  // implements Message ----------------------------------------------

  inline Traffic* New() const PROTOBUF_FINAL { return New(NULL); }

  Traffic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Traffic& from);
  void MergeFrom(const Traffic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Traffic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .sim_msg.Car cars = 1;
  int cars_size() const;
  void clear_cars();
  static const int kCarsFieldNumber = 1;
  const ::sim_msg::Car& cars(int index) const;
  ::sim_msg::Car* mutable_cars(int index);
  ::sim_msg::Car* add_cars();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
      mutable_cars();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
      cars() const;

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  int staticobstacles_size() const;
  void clear_staticobstacles();
  static const int kStaticObstaclesFieldNumber = 2;
  const ::sim_msg::StaticObstacle& staticobstacles(int index) const;
  ::sim_msg::StaticObstacle* mutable_staticobstacles(int index);
  ::sim_msg::StaticObstacle* add_staticobstacles();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >*
      mutable_staticobstacles();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >&
      staticobstacles() const;

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  int dynamicobstacles_size() const;
  void clear_dynamicobstacles();
  static const int kDynamicObstaclesFieldNumber = 3;
  const ::sim_msg::DynamicObstacle& dynamicobstacles(int index) const;
  ::sim_msg::DynamicObstacle* mutable_dynamicobstacles(int index);
  ::sim_msg::DynamicObstacle* add_dynamicobstacles();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
      mutable_dynamicobstacles();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
      dynamicobstacles() const;

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  int trafficlights_size() const;
  void clear_trafficlights();
  static const int kTrafficLightsFieldNumber = 4;
  const ::sim_msg::TrafficLight& trafficlights(int index) const;
  ::sim_msg::TrafficLight* mutable_trafficlights(int index);
  ::sim_msg::TrafficLight* add_trafficlights();
  ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >*
      mutable_trafficlights();
  const ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >&
      trafficlights() const;

  // @@protoc_insertion_point(class_scope:sim_msg.Traffic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::Car > cars_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle > staticobstacles_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle > dynamicobstacles_;
  ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight > trafficlights_;
  mutable int _cached_size_;
  friend struct  protobuf_traffic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ManualVehicleControlInfo

// int32 id = 1;
inline void ManualVehicleControlInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ManualVehicleControlInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.id)
  return id_;
}
inline void ManualVehicleControlInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ManualVehicleControlInfo.id)
}

// .sim_msg.Location veh_control_info = 2;
inline bool ManualVehicleControlInfo::has_veh_control_info() const {
  return this != internal_default_instance() && veh_control_info_ != NULL;
}
inline void ManualVehicleControlInfo::clear_veh_control_info() {
  if (GetArenaNoVirtual() == NULL && veh_control_info_ != NULL) delete veh_control_info_;
  veh_control_info_ = NULL;
}
inline const ::sim_msg::Location& ManualVehicleControlInfo::veh_control_info() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return veh_control_info_ != NULL ? *veh_control_info_
                         : *::sim_msg::Location::internal_default_instance();
}
inline ::sim_msg::Location* ManualVehicleControlInfo::mutable_veh_control_info() {
  
  if (veh_control_info_ == NULL) {
    veh_control_info_ = new ::sim_msg::Location;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return veh_control_info_;
}
inline ::sim_msg::Location* ManualVehicleControlInfo::release_veh_control_info() {
  // @@protoc_insertion_point(field_release:sim_msg.ManualVehicleControlInfo.veh_control_info)
  
  ::sim_msg::Location* temp = veh_control_info_;
  veh_control_info_ = NULL;
  return temp;
}
inline void ManualVehicleControlInfo::set_allocated_veh_control_info(::sim_msg::Location* veh_control_info) {
  delete veh_control_info_;
  veh_control_info_ = veh_control_info;
  if (veh_control_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ManualVehicleControlInfo.veh_control_info)
}

// -------------------------------------------------------------------

// ManualVehicleControlInfoArray

// repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
inline int ManualVehicleControlInfoArray::vehicles_control_info_size() const {
  return vehicles_control_info_.size();
}
inline void ManualVehicleControlInfoArray::clear_vehicles_control_info() {
  vehicles_control_info_.Clear();
}
inline const ::sim_msg::ManualVehicleControlInfo& ManualVehicleControlInfoArray::vehicles_control_info(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Get(index);
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::mutable_vehicles_control_info(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Mutable(index);
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::add_vehicles_control_info() {
  // @@protoc_insertion_point(field_add:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
ManualVehicleControlInfoArray::mutable_vehicles_control_info() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return &vehicles_control_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
ManualVehicleControlInfoArray::vehicles_control_info() const {
  // @@protoc_insertion_point(field_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_;
}

// -------------------------------------------------------------------

// NearestObject

// int32 id = 1;
inline void NearestObject::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 NearestObject::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.id)
  return id_;
}
inline void NearestObject::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.id)
}

// double euclid_dist = 2;
inline void NearestObject::clear_euclid_dist() {
  euclid_dist_ = 0;
}
inline double NearestObject::euclid_dist() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.euclid_dist)
  return euclid_dist_;
}
inline void NearestObject::set_euclid_dist(double value) {
  
  euclid_dist_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.euclid_dist)
}

// .sim_msg.NearestObjectDirection dir = 3;
inline void NearestObject::clear_dir() {
  dir_ = 0;
}
inline ::sim_msg::NearestObjectDirection NearestObject::dir() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.dir)
  return static_cast< ::sim_msg::NearestObjectDirection >(dir_);
}
inline void NearestObject::set_dir(::sim_msg::NearestObjectDirection value) {
  
  dir_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.dir)
}

// -------------------------------------------------------------------

// Car

// int32 id = 1;
inline void Car::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return id_;
}
inline void Car::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// double t = 2;
inline void Car::clear_t() {
  t_ = 0;
}
inline double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return t_;
}
inline void Car::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// double x = 3;
inline void Car::clear_x() {
  x_ = 0;
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return x_;
}
inline void Car::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// double y = 4;
inline void Car::clear_y() {
  y_ = 0;
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return y_;
}
inline void Car::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// double heading = 5;
inline void Car::clear_heading() {
  heading_ = 0;
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return heading_;
}
inline void Car::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// double v = 6;
inline void Car::clear_v() {
  v_ = 0;
}
inline double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return v_;
}
inline void Car::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// double vl = 7;
inline void Car::clear_vl() {
  vl_ = 0;
}
inline double Car::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.vl)
  return vl_;
}
inline void Car::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.vl)
}

// double theta = 8;
inline void Car::clear_theta() {
  theta_ = 0;
}
inline double Car::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.theta)
  return theta_;
}
inline void Car::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.theta)
}

// double length = 9;
inline void Car::clear_length() {
  length_ = 0;
}
inline double Car::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.length)
  return length_;
}
inline void Car::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.length)
}

// double width = 10;
inline void Car::clear_width() {
  width_ = 0;
}
inline double Car::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.width)
  return width_;
}
inline void Car::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.width)
}

// double height = 11;
inline void Car::clear_height() {
  height_ = 0;
}
inline double Car::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.height)
  return height_;
}
inline void Car::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.height)
}

// int32 type = 12;
inline void Car::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 Car::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.type)
  return type_;
}
inline void Car::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.type)
}

// int32 laneId = 13;
inline void Car::clear_laneid() {
  laneid_ = 0;
}
inline ::google::protobuf::int32 Car::laneid() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.laneId)
  return laneid_;
}
inline void Car::set_laneid(::google::protobuf::int32 value) {
  
  laneid_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.laneId)
}

// double acc = 14;
inline void Car::clear_acc() {
  acc_ = 0;
}
inline double Car::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.acc)
  return acc_;
}
inline void Car::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.acc)
}

// int32 age = 15;
inline void Car::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 Car::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.age)
  return age_;
}
inline void Car::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.age)
}

// double z = 16;
inline void Car::clear_z() {
  z_ = 0;
}
inline double Car::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.z)
  return z_;
}
inline void Car::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.z)
}

// uint64 tx_road_id = 17;
inline void Car::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Car::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_road_id)
  return tx_road_id_;
}
inline void Car::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_road_id)
}

// uint64 tx_section_id = 18;
inline void Car::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Car::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_section_id)
  return tx_section_id_;
}
inline void Car::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_section_id)
}

// int64 tx_lane_id = 19;
inline void Car::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Car::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lane_id)
  return tx_lane_id_;
}
inline void Car::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lane_id)
}

// uint64 tx_lanelink_id = 20;
inline void Car::clear_tx_lanelink_id() {
  tx_lanelink_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Car::tx_lanelink_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lanelink_id)
  return tx_lanelink_id_;
}
inline void Car::set_tx_lanelink_id(::google::protobuf::uint64 value) {
  
  tx_lanelink_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lanelink_id)
}

// .sim_msg.Trajectory planning_line = 21;
inline bool Car::has_planning_line() const {
  return this != internal_default_instance() && planning_line_ != NULL;
}
inline void Car::clear_planning_line() {
  if (GetArenaNoVirtual() == NULL && planning_line_ != NULL) delete planning_line_;
  planning_line_ = NULL;
}
inline const ::sim_msg::Trajectory& Car::planning_line() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.planning_line)
  return planning_line_ != NULL ? *planning_line_
                         : *::sim_msg::Trajectory::internal_default_instance();
}
inline ::sim_msg::Trajectory* Car::mutable_planning_line() {
  
  if (planning_line_ == NULL) {
    planning_line_ = new ::sim_msg::Trajectory;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.planning_line)
  return planning_line_;
}
inline ::sim_msg::Trajectory* Car::release_planning_line() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.planning_line)
  
  ::sim_msg::Trajectory* temp = planning_line_;
  planning_line_ = NULL;
  return temp;
}
inline void Car::set_allocated_planning_line(::sim_msg::Trajectory* planning_line) {
  delete planning_line_;
  planning_line_ = planning_line;
  if (planning_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.planning_line)
}

// double show_abs_velocity = 22;
inline void Car::clear_show_abs_velocity() {
  show_abs_velocity_ = 0;
}
inline double Car::show_abs_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_velocity)
  return show_abs_velocity_;
}
inline void Car::set_show_abs_velocity(double value) {
  
  show_abs_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_velocity)
}

// double show_abs_acc = 23;
inline void Car::clear_show_abs_acc() {
  show_abs_acc_ = 0;
}
inline double Car::show_abs_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_acc)
  return show_abs_acc_;
}
inline void Car::set_show_abs_acc(double value) {
  
  show_abs_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_acc)
}

// double show_relative_velocity = 24;
inline void Car::clear_show_relative_velocity() {
  show_relative_velocity_ = 0;
}
inline double Car::show_relative_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity)
  return show_relative_velocity_;
}
inline void Car::set_show_relative_velocity(double value) {
  
  show_relative_velocity_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity)
}

// double show_relative_acc = 25;
inline void Car::clear_show_relative_acc() {
  show_relative_acc_ = 0;
}
inline double Car::show_relative_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc)
  return show_relative_acc_;
}
inline void Car::set_show_relative_acc(double value) {
  
  show_relative_acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc)
}

// double show_relative_velocity_horizontal = 26;
inline void Car::clear_show_relative_velocity_horizontal() {
  show_relative_velocity_horizontal_ = 0;
}
inline double Car::show_relative_velocity_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity_horizontal)
  return show_relative_velocity_horizontal_;
}
inline void Car::set_show_relative_velocity_horizontal(double value) {
  
  show_relative_velocity_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity_horizontal)
}

// double show_relative_acc_horizontal = 27;
inline void Car::clear_show_relative_acc_horizontal() {
  show_relative_acc_horizontal_ = 0;
}
inline double Car::show_relative_acc_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc_horizontal)
  return show_relative_acc_horizontal_;
}
inline void Car::set_show_relative_acc_horizontal(double value) {
  
  show_relative_acc_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc_horizontal)
}

// double show_relative_dist_vertical = 28;
inline void Car::clear_show_relative_dist_vertical() {
  show_relative_dist_vertical_ = 0;
}
inline double Car::show_relative_dist_vertical() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_vertical)
  return show_relative_dist_vertical_;
}
inline void Car::set_show_relative_dist_vertical(double value) {
  
  show_relative_dist_vertical_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_vertical)
}

// double show_relative_dist_horizontal = 29;
inline void Car::clear_show_relative_dist_horizontal() {
  show_relative_dist_horizontal_ = 0;
}
inline double Car::show_relative_dist_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_horizontal)
  return show_relative_dist_horizontal_;
}
inline void Car::set_show_relative_dist_horizontal(double value) {
  
  show_relative_dist_horizontal_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_horizontal)
}

// .sim_msg.ControlState control_state = 30;
inline void Car::clear_control_state() {
  control_state_ = 0;
}
inline ::sim_msg::ControlState Car::control_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.control_state)
  return static_cast< ::sim_msg::ControlState >(control_state_);
}
inline void Car::set_control_state(::sim_msg::ControlState value) {
  
  control_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Car.control_state)
}

// repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
inline int Car::show_nearestobjectinfo_size() const {
  return show_nearestobjectinfo_.size();
}
inline void Car::clear_show_nearestobjectinfo() {
  show_nearestobjectinfo_.Clear();
}
inline const ::sim_msg::NearestObject& Car::show_nearestobjectinfo(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Get(index);
}
inline ::sim_msg::NearestObject* Car::mutable_show_nearestobjectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Mutable(index);
}
inline ::sim_msg::NearestObject* Car::add_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_add:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >*
Car::mutable_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Car.show_NearestObjectInfo)
  return &show_nearestobjectinfo_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::NearestObject >&
Car::show_nearestobjectinfo() const {
  // @@protoc_insertion_point(field_list:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_;
}

// -------------------------------------------------------------------

// StaticObstacle

// int32 id = 1;
inline void StaticObstacle::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 StaticObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.id)
  return id_;
}
inline void StaticObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.id)
}

// double t = 2;
inline void StaticObstacle::clear_t() {
  t_ = 0;
}
inline double StaticObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.t)
  return t_;
}
inline void StaticObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.t)
}

// double x = 3;
inline void StaticObstacle::clear_x() {
  x_ = 0;
}
inline double StaticObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.x)
  return x_;
}
inline void StaticObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.x)
}

// double y = 4;
inline void StaticObstacle::clear_y() {
  y_ = 0;
}
inline double StaticObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.y)
  return y_;
}
inline void StaticObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.y)
}

// double heading = 5;
inline void StaticObstacle::clear_heading() {
  heading_ = 0;
}
inline double StaticObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.heading)
  return heading_;
}
inline void StaticObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.heading)
}

// double length = 6;
inline void StaticObstacle::clear_length() {
  length_ = 0;
}
inline double StaticObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.length)
  return length_;
}
inline void StaticObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.length)
}

// double width = 7;
inline void StaticObstacle::clear_width() {
  width_ = 0;
}
inline double StaticObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.width)
  return width_;
}
inline void StaticObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.width)
}

// double height = 8;
inline void StaticObstacle::clear_height() {
  height_ = 0;
}
inline double StaticObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.height)
  return height_;
}
inline void StaticObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.height)
}

// int32 type = 9;
inline void StaticObstacle::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 StaticObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.type)
  return type_;
}
inline void StaticObstacle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.type)
}

// int32 age = 10;
inline void StaticObstacle::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 StaticObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.age)
  return age_;
}
inline void StaticObstacle::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.age)
}

// double z = 11;
inline void StaticObstacle::clear_z() {
  z_ = 0;
}
inline double StaticObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.z)
  return z_;
}
inline void StaticObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.z)
}

// -------------------------------------------------------------------

// DynamicObstacle

// int32 id = 1;
inline void DynamicObstacle::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.id)
  return id_;
}
inline void DynamicObstacle::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.id)
}

// double t = 2;
inline void DynamicObstacle::clear_t() {
  t_ = 0;
}
inline double DynamicObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.t)
  return t_;
}
inline void DynamicObstacle::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.t)
}

// double x = 3;
inline void DynamicObstacle::clear_x() {
  x_ = 0;
}
inline double DynamicObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.x)
  return x_;
}
inline void DynamicObstacle::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.x)
}

// double y = 4;
inline void DynamicObstacle::clear_y() {
  y_ = 0;
}
inline double DynamicObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.y)
  return y_;
}
inline void DynamicObstacle::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.y)
}

// double heading = 5;
inline void DynamicObstacle::clear_heading() {
  heading_ = 0;
}
inline double DynamicObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.heading)
  return heading_;
}
inline void DynamicObstacle::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.heading)
}

// double length = 6;
inline void DynamicObstacle::clear_length() {
  length_ = 0;
}
inline double DynamicObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.length)
  return length_;
}
inline void DynamicObstacle::set_length(double value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.length)
}

// double width = 7;
inline void DynamicObstacle::clear_width() {
  width_ = 0;
}
inline double DynamicObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.width)
  return width_;
}
inline void DynamicObstacle::set_width(double value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.width)
}

// double height = 8;
inline void DynamicObstacle::clear_height() {
  height_ = 0;
}
inline double DynamicObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.height)
  return height_;
}
inline void DynamicObstacle::set_height(double value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.height)
}

// int32 type = 9;
inline void DynamicObstacle::clear_type() {
  type_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.type)
  return type_;
}
inline void DynamicObstacle::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.type)
}

// double v = 10;
inline void DynamicObstacle::clear_v() {
  v_ = 0;
}
inline double DynamicObstacle::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.v)
  return v_;
}
inline void DynamicObstacle::set_v(double value) {
  
  v_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.v)
}

// double vl = 11;
inline void DynamicObstacle::clear_vl() {
  vl_ = 0;
}
inline double DynamicObstacle::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.vl)
  return vl_;
}
inline void DynamicObstacle::set_vl(double value) {
  
  vl_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.vl)
}

// double acc = 12;
inline void DynamicObstacle::clear_acc() {
  acc_ = 0;
}
inline double DynamicObstacle::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.acc)
  return acc_;
}
inline void DynamicObstacle::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.acc)
}

// int32 age = 13;
inline void DynamicObstacle::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 DynamicObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.age)
  return age_;
}
inline void DynamicObstacle::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.age)
}

// double z = 14;
inline void DynamicObstacle::clear_z() {
  z_ = 0;
}
inline double DynamicObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.z)
  return z_;
}
inline void DynamicObstacle::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.z)
}

// -------------------------------------------------------------------

// LaneUid

// uint64 tx_road_id = 1;
inline void LaneUid::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LaneUid::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_road_id)
  return tx_road_id_;
}
inline void LaneUid::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_road_id)
}

// uint64 tx_section_id = 2;
inline void LaneUid::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LaneUid::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_section_id)
  return tx_section_id_;
}
inline void LaneUid::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_section_id)
}

// int64 tx_lane_id = 3;
inline void LaneUid::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LaneUid::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_lane_id)
  return tx_lane_id_;
}
inline void LaneUid::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_lane_id)
}

// -------------------------------------------------------------------

// TrafficLight

// int32 id = 1;
inline void TrafficLight::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.id)
  return id_;
}
inline void TrafficLight::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.id)
}

// double x = 2;
inline void TrafficLight::clear_x() {
  x_ = 0;
}
inline double TrafficLight::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.x)
  return x_;
}
inline void TrafficLight::set_x(double value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.x)
}

// double y = 3;
inline void TrafficLight::clear_y() {
  y_ = 0;
}
inline double TrafficLight::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.y)
  return y_;
}
inline void TrafficLight::set_y(double value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.y)
}

// double heading = 4;
inline void TrafficLight::clear_heading() {
  heading_ = 0;
}
inline double TrafficLight::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.heading)
  return heading_;
}
inline void TrafficLight::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.heading)
}

// int32 color = 5;
inline void TrafficLight::clear_color() {
  color_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.color)
  return color_;
}
inline void TrafficLight::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.color)
}

// int32 age = 6;
inline void TrafficLight::clear_age() {
  age_ = 0;
}
inline ::google::protobuf::int32 TrafficLight::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.age)
  return age_;
}
inline void TrafficLight::set_age(::google::protobuf::int32 value) {
  
  age_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.age)
}

// double z = 7;
inline void TrafficLight::clear_z() {
  z_ = 0;
}
inline double TrafficLight::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.z)
  return z_;
}
inline void TrafficLight::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.z)
}

// uint64 tx_road_id = 8;
inline void TrafficLight::clear_tx_road_id() {
  tx_road_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrafficLight::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_road_id)
  return tx_road_id_;
}
inline void TrafficLight::set_tx_road_id(::google::protobuf::uint64 value) {
  
  tx_road_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_road_id)
}

// uint64 tx_section_id = 9;
inline void TrafficLight::clear_tx_section_id() {
  tx_section_id_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 TrafficLight::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_section_id)
  return tx_section_id_;
}
inline void TrafficLight::set_tx_section_id(::google::protobuf::uint64 value) {
  
  tx_section_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_section_id)
}

// int64 tx_lane_id = 10;
inline void TrafficLight::clear_tx_lane_id() {
  tx_lane_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TrafficLight::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_lane_id)
  return tx_lane_id_;
}
inline void TrafficLight::set_tx_lane_id(::google::protobuf::int64 value) {
  
  tx_lane_id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_lane_id)
}

// repeated .sim_msg.LaneUid control_lanes = 11;
inline int TrafficLight::control_lanes_size() const {
  return control_lanes_.size();
}
inline void TrafficLight::clear_control_lanes() {
  control_lanes_.Clear();
}
inline const ::sim_msg::LaneUid& TrafficLight::control_lanes(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Get(index);
}
inline ::sim_msg::LaneUid* TrafficLight::mutable_control_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Mutable(index);
}
inline ::sim_msg::LaneUid* TrafficLight::add_control_lanes() {
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >*
TrafficLight::mutable_control_lanes() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_lanes)
  return &control_lanes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneUid >&
TrafficLight::control_lanes() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_lanes)
  return control_lanes_;
}

// repeated .sim_msg.Phase control_phases = 12;
inline int TrafficLight::control_phases_size() const {
  return control_phases_.size();
}
inline void TrafficLight::clear_control_phases() {
  control_phases_.Clear();
}
inline ::sim_msg::Phase TrafficLight::control_phases(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_phases)
  return static_cast< ::sim_msg::Phase >(control_phases_.Get(index));
}
inline void TrafficLight::set_control_phases(int index, ::sim_msg::Phase value) {
  control_phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.control_phases)
}
inline void TrafficLight::add_control_phases(::sim_msg::Phase value) {
  control_phases_.Add(value);
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_phases)
}
inline const ::google::protobuf::RepeatedField<int>&
TrafficLight::control_phases() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_phases)
  return control_phases_;
}
inline ::google::protobuf::RepeatedField<int>*
TrafficLight::mutable_control_phases() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_phases)
  return &control_phases_;
}

// -------------------------------------------------------------------

// Traffic

// repeated .sim_msg.Car cars = 1;
inline int Traffic::cars_size() const {
  return cars_.size();
}
inline void Traffic::clear_cars() {
  cars_.Clear();
}
inline const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return cars_.Get(index);
}
inline ::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
inline ::sim_msg::Car* Traffic::add_cars() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return cars_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// repeated .sim_msg.StaticObstacle staticObstacles = 2;
inline int Traffic::staticobstacles_size() const {
  return staticobstacles_.size();
}
inline void Traffic::clear_staticobstacles() {
  staticobstacles_.Clear();
}
inline const ::sim_msg::StaticObstacle& Traffic::staticobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Get(index);
}
inline ::sim_msg::StaticObstacle* Traffic::mutable_staticobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Mutable(index);
}
inline ::sim_msg::StaticObstacle* Traffic::add_staticobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >*
Traffic::mutable_staticobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.staticObstacles)
  return &staticobstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::StaticObstacle >&
Traffic::staticobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.staticObstacles)
  return staticobstacles_;
}

// repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
inline int Traffic::dynamicobstacles_size() const {
  return dynamicobstacles_.size();
}
inline void Traffic::clear_dynamicobstacles() {
  dynamicobstacles_.Clear();
}
inline const ::sim_msg::DynamicObstacle& Traffic::dynamicobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Get(index);
}
inline ::sim_msg::DynamicObstacle* Traffic::mutable_dynamicobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Mutable(index);
}
inline ::sim_msg::DynamicObstacle* Traffic::add_dynamicobstacles() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
Traffic::mutable_dynamicobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.dynamicObstacles)
  return &dynamicobstacles_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
Traffic::dynamicobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_;
}

// repeated .sim_msg.TrafficLight trafficLights = 4;
inline int Traffic::trafficlights_size() const {
  return trafficlights_.size();
}
inline void Traffic::clear_trafficlights() {
  trafficlights_.Clear();
}
inline const ::sim_msg::TrafficLight& Traffic::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.trafficLights)
  return trafficlights_.Get(index);
}
inline ::sim_msg::TrafficLight* Traffic::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.trafficLights)
  return trafficlights_.Mutable(index);
}
inline ::sim_msg::TrafficLight* Traffic::add_trafficlights() {
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.trafficLights)
  return trafficlights_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >*
Traffic::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.trafficLights)
  return &trafficlights_;
}
inline const ::google::protobuf::RepeatedPtrField< ::sim_msg::TrafficLight >&
Traffic::trafficlights() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.trafficLights)
  return trafficlights_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace sim_msg

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::sim_msg::ControlState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::ControlState>() {
  return ::sim_msg::ControlState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::NearestObjectDirection> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::NearestObjectDirection>() {
  return ::sim_msg::NearestObjectDirection_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::Phase> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::Phase>() {
  return ::sim_msg::Phase_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_traffic_2eproto__INCLUDED
