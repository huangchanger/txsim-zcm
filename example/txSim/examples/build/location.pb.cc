// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#include "location.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sim_msg {
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : position_(nullptr)
  , velocity_(nullptr)
  , angular_(nullptr)
  , rpy_(nullptr)
  , acceleration_(nullptr)
  , t_(0){}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
}  // namespace sim_msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_location_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_location_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_location_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_location_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, position_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, angular_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, rpy_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Location, acceleration_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::Location)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Location_default_instance_),
};

const char descriptor_table_protodef_location_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016location.proto\022\007sim_msg\032\013basic.proto\"\270"
  "\001\n\010Location\022\t\n\001t\030\001 \001(\001\022\037\n\010position\030\002 \001(\013"
  "2\r.sim_msg.Vec3\022\037\n\010velocity\030\003 \001(\0132\r.sim_"
  "msg.Vec3\022\036\n\007angular\030\004 \001(\0132\r.sim_msg.Vec3"
  "\022\032\n\003rpy\030\005 \001(\0132\r.sim_msg.Vec3\022#\n\014accelera"
  "tion\030\006 \001(\0132\r.sim_msg.Vec3b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_location_2eproto_deps[1] = {
  &::descriptor_table_basic_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_location_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_2eproto = {
  false, false, 233, descriptor_table_protodef_location_2eproto, "location.proto", 
  &descriptor_table_location_2eproto_once, descriptor_table_location_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_location_2eproto::offsets,
  file_level_metadata_location_2eproto, file_level_enum_descriptors_location_2eproto, file_level_service_descriptors_location_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_location_2eproto_getter() {
  return &descriptor_table_location_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_location_2eproto(&descriptor_table_location_2eproto);
namespace sim_msg {

// ===================================================================

class Location::_Internal {
 public:
  static const ::sim_msg::Vec3& position(const Location* msg);
  static const ::sim_msg::Vec3& velocity(const Location* msg);
  static const ::sim_msg::Vec3& angular(const Location* msg);
  static const ::sim_msg::Vec3& rpy(const Location* msg);
  static const ::sim_msg::Vec3& acceleration(const Location* msg);
};

const ::sim_msg::Vec3&
Location::_Internal::position(const Location* msg) {
  return *msg->position_;
}
const ::sim_msg::Vec3&
Location::_Internal::velocity(const Location* msg) {
  return *msg->velocity_;
}
const ::sim_msg::Vec3&
Location::_Internal::angular(const Location* msg) {
  return *msg->angular_;
}
const ::sim_msg::Vec3&
Location::_Internal::rpy(const Location* msg) {
  return *msg->rpy_;
}
const ::sim_msg::Vec3&
Location::_Internal::acceleration(const Location* msg) {
  return *msg->acceleration_;
}
void Location::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Location::clear_velocity() {
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
void Location::clear_angular() {
  if (GetArenaForAllocation() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
}
void Location::clear_rpy() {
  if (GetArenaForAllocation() == nullptr && rpy_ != nullptr) {
    delete rpy_;
  }
  rpy_ = nullptr;
}
void Location::clear_acceleration() {
  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::sim_msg::Vec3(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_velocity()) {
    velocity_ = new ::sim_msg::Vec3(*from.velocity_);
  } else {
    velocity_ = nullptr;
  }
  if (from._internal_has_angular()) {
    angular_ = new ::sim_msg::Vec3(*from.angular_);
  } else {
    angular_ = nullptr;
  }
  if (from._internal_has_rpy()) {
    rpy_ = new ::sim_msg::Vec3(*from.rpy_);
  } else {
    rpy_ = nullptr;
  }
  if (from._internal_has_acceleration()) {
    acceleration_ = new ::sim_msg::Vec3(*from.acceleration_);
  } else {
    acceleration_ = nullptr;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&position_)) + sizeof(t_));
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:sim_msg.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete velocity_;
  if (this != internal_default_instance()) delete angular_;
  if (this != internal_default_instance()) delete rpy_;
  if (this != internal_default_instance()) delete acceleration_;
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
  if (GetArenaForAllocation() == nullptr && angular_ != nullptr) {
    delete angular_;
  }
  angular_ = nullptr;
  if (GetArenaForAllocation() == nullptr && rpy_ != nullptr) {
    delete rpy_;
  }
  rpy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
  t_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double t = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 velocity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_velocity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 angular = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 rpy = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_rpy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Vec3 acceleration = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_acceleration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Location::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double t = 1;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_t(), target);
  }

  // .sim_msg.Vec3 position = 2;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->_internal_has_velocity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::velocity(this), target, stream);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->_internal_has_angular()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::angular(this), target, stream);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->_internal_has_rpy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::rpy(this), target, stream);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->_internal_has_acceleration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::acceleration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Vec3 position = 2;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->_internal_has_velocity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *velocity_);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->_internal_has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *angular_);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->_internal_has_rpy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rpy_);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->_internal_has_acceleration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *acceleration_);
  }

  // double t = 1;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Location)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_position()) {
    _internal_mutable_position()->::sim_msg::Vec3::MergeFrom(from._internal_position());
  }
  if (from._internal_has_velocity()) {
    _internal_mutable_velocity()->::sim_msg::Vec3::MergeFrom(from._internal_velocity());
  }
  if (from._internal_has_angular()) {
    _internal_mutable_angular()->::sim_msg::Vec3::MergeFrom(from._internal_angular());
  }
  if (from._internal_has_rpy()) {
    _internal_mutable_rpy()->::sim_msg::Vec3::MergeFrom(from._internal_rpy());
  }
  if (from._internal_has_acceleration()) {
    _internal_mutable_acceleration()->::sim_msg::Vec3::MergeFrom(from._internal_acceleration());
  }
  if (!(from._internal_t() <= 0 && from._internal_t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, t_)
      + sizeof(Location::t_)
      - PROTOBUF_FIELD_OFFSET(Location, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_location_2eproto_getter, &descriptor_table_location_2eproto_once,
      file_level_metadata_location_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::Location* Arena::CreateMaybeMessage< ::sim_msg::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Location >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
