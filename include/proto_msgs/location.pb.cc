// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "location.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class LocationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Location> {
} _Location_default_instance_;

namespace protobuf_location_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, position_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, angular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, rpy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Location, acceleration_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Location)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Location_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "location.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace

void TableStruct::Shutdown() {
  _Location_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sim_msg::protobuf_basic_2eproto::InitDefaults();
  _Location_default_instance_.DefaultConstruct();
  _Location_default_instance_.get_mutable()->position_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Location_default_instance_.get_mutable()->velocity_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Location_default_instance_.get_mutable()->angular_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Location_default_instance_.get_mutable()->rpy_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Location_default_instance_.get_mutable()->acceleration_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\016location.proto\022\007sim_msg\032\013basic.proto\"\270"
      "\001\n\010Location\022\t\n\001t\030\001 \001(\001\022\037\n\010position\030\002 \001(\013"
      "2\r.sim_msg.Vec3\022\037\n\010velocity\030\003 \001(\0132\r.sim_"
      "msg.Vec3\022\036\n\007angular\030\004 \001(\0132\r.sim_msg.Vec3"
      "\022\032\n\003rpy\030\005 \001(\0132\r.sim_msg.Vec3\022#\n\014accelera"
      "tion\030\006 \001(\0132\r.sim_msg.Vec3b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 233);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "location.proto", &protobuf_RegisterTypes);
  ::sim_msg::protobuf_basic_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_location_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Location::kTFieldNumber;
const int Location::kPositionFieldNumber;
const int Location::kVelocityFieldNumber;
const int Location::kAngularFieldNumber;
const int Location::kRpyFieldNumber;
const int Location::kAccelerationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Location::Location()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_location_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Location)
}
Location::Location(const Location& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::sim_msg::Vec3(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::sim_msg::Vec3(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  if (from.has_angular()) {
    angular_ = new ::sim_msg::Vec3(*from.angular_);
  } else {
    angular_ = NULL;
  }
  if (from.has_rpy()) {
    rpy_ = new ::sim_msg::Vec3(*from.rpy_);
  } else {
    rpy_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::sim_msg::Vec3(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  t_ = from.t_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Location)
}

void Location::SharedCtor() {
  ::memset(&position_, 0, reinterpret_cast<char*>(&t_) -
    reinterpret_cast<char*>(&position_) + sizeof(t_));
  _cached_size_ = 0;
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:sim_msg.Location)
  SharedDtor();
}

void Location::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
  if (this != internal_default_instance()) {
    delete angular_;
  }
  if (this != internal_default_instance()) {
    delete rpy_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
}

void Location::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Location::descriptor() {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_location_2eproto::file_level_metadata[0].descriptor;
}

const Location& Location::default_instance() {
  protobuf_location_2eproto::InitDefaults();
  return *internal_default_instance();
}

Location* Location::New(::google::protobuf::Arena* arena) const {
  Location* n = new Location;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Location)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) {
    delete velocity_;
  }
  velocity_ = NULL;
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) {
    delete angular_;
  }
  angular_ = NULL;
  if (GetArenaNoVirtual() == NULL && rpy_ != NULL) {
    delete rpy_;
  }
  rpy_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  t_ = 0;
}

bool Location::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Location)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double t = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &t_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 position = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 velocity = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 angular = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 rpy = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rpy()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 acceleration = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Location)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Location)
  return false;
#undef DO_
}

void Location::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Location)
  // double t = 1;
  if (this->t() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->t(), output);
  }

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->angular_, output);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rpy_, output);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->acceleration_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Location)
}

::google::protobuf::uint8* Location::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Location)
  // double t = 1;
  if (this->t() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->t(), target);
  }

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->position_, false, target);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->velocity_, false, target);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->angular_, false, target);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->rpy_, false, target);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->acceleration_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Location)
  size_t total_size = 0;

  // .sim_msg.Vec3 position = 2;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  // .sim_msg.Vec3 velocity = 3;
  if (this->has_velocity()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  // .sim_msg.Vec3 angular = 4;
  if (this->has_angular()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->angular_);
  }

  // .sim_msg.Vec3 rpy = 5;
  if (this->has_rpy()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rpy_);
  }

  // .sim_msg.Vec3 acceleration = 6;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  // double t = 1;
  if (this->t() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Location::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const Location* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Location>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Location)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Location)
    MergeFrom(*source);
  }
}

void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    mutable_position()->::sim_msg::Vec3::MergeFrom(from.position());
  }
  if (from.has_velocity()) {
    mutable_velocity()->::sim_msg::Vec3::MergeFrom(from.velocity());
  }
  if (from.has_angular()) {
    mutable_angular()->::sim_msg::Vec3::MergeFrom(from.angular());
  }
  if (from.has_rpy()) {
    mutable_rpy()->::sim_msg::Vec3::MergeFrom(from.rpy());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::sim_msg::Vec3::MergeFrom(from.acceleration());
  }
  if (from.t() != 0) {
    set_t(from.t());
  }
}

void Location::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::Swap(Location* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Location::InternalSwap(Location* other) {
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(angular_, other->angular_);
  std::swap(rpy_, other->rpy_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(t_, other->t_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Location::GetMetadata() const {
  protobuf_location_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_location_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Location

// double t = 1;
void Location::clear_t() {
  t_ = 0;
}
double Location::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.t)
  return t_;
}
void Location::set_t(double value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Location.t)
}

// .sim_msg.Vec3 position = 2;
bool Location::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
void Location::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::sim_msg::Vec3& Location::position() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.position)
  return position_ != NULL ? *position_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Location::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.position)
  return position_;
}
::sim_msg::Vec3* Location::release_position() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.position)
  
  ::sim_msg::Vec3* temp = position_;
  position_ = NULL;
  return temp;
}
void Location::set_allocated_position(::sim_msg::Vec3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.position)
}

// .sim_msg.Vec3 velocity = 3;
bool Location::has_velocity() const {
  return this != internal_default_instance() && velocity_ != NULL;
}
void Location::clear_velocity() {
  if (GetArenaNoVirtual() == NULL && velocity_ != NULL) delete velocity_;
  velocity_ = NULL;
}
const ::sim_msg::Vec3& Location::velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Location::mutable_velocity() {
  
  if (velocity_ == NULL) {
    velocity_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.velocity)
  return velocity_;
}
::sim_msg::Vec3* Location::release_velocity() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.velocity)
  
  ::sim_msg::Vec3* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void Location::set_allocated_velocity(::sim_msg::Vec3* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.velocity)
}

// .sim_msg.Vec3 angular = 4;
bool Location::has_angular() const {
  return this != internal_default_instance() && angular_ != NULL;
}
void Location::clear_angular() {
  if (GetArenaNoVirtual() == NULL && angular_ != NULL) delete angular_;
  angular_ = NULL;
}
const ::sim_msg::Vec3& Location::angular() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.angular)
  return angular_ != NULL ? *angular_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Location::mutable_angular() {
  
  if (angular_ == NULL) {
    angular_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.angular)
  return angular_;
}
::sim_msg::Vec3* Location::release_angular() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.angular)
  
  ::sim_msg::Vec3* temp = angular_;
  angular_ = NULL;
  return temp;
}
void Location::set_allocated_angular(::sim_msg::Vec3* angular) {
  delete angular_;
  angular_ = angular;
  if (angular) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.angular)
}

// .sim_msg.Vec3 rpy = 5;
bool Location::has_rpy() const {
  return this != internal_default_instance() && rpy_ != NULL;
}
void Location::clear_rpy() {
  if (GetArenaNoVirtual() == NULL && rpy_ != NULL) delete rpy_;
  rpy_ = NULL;
}
const ::sim_msg::Vec3& Location::rpy() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.rpy)
  return rpy_ != NULL ? *rpy_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Location::mutable_rpy() {
  
  if (rpy_ == NULL) {
    rpy_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.rpy)
  return rpy_;
}
::sim_msg::Vec3* Location::release_rpy() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.rpy)
  
  ::sim_msg::Vec3* temp = rpy_;
  rpy_ = NULL;
  return temp;
}
void Location::set_allocated_rpy(::sim_msg::Vec3* rpy) {
  delete rpy_;
  rpy_ = rpy;
  if (rpy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.rpy)
}

// .sim_msg.Vec3 acceleration = 6;
bool Location::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
void Location::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
}
const ::sim_msg::Vec3& Location::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Location.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Location::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Location.acceleration)
  return acceleration_;
}
::sim_msg::Vec3* Location::release_acceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Location.acceleration)
  
  ::sim_msg::Vec3* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void Location::set_allocated_acceleration(::sim_msg::Vec3* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Location.acceleration)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
