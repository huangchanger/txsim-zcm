
.. _program_listing_file_src_txsim_module_service.h:

Program Listing for File txsim_module_service.h
===============================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_txsim_module_service.h>` (``src/txsim_module_service.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #pragma once
   
   #include <stdint.h>
   #include <memory>
   #include <stdexcept>
   
   #include "txsim_module.h"
   
   
   extern "C" {
   
   typedef struct txsim_service_error* txsim_service_error_t;
   TXSIM_API const char* txsim_service_error_message(txsim_service_error_t err);
   TXSIM_API void txsim_service_error_destruct(txsim_service_error_t err);
   
   typedef struct txsim_service* txsim_service_t;
   TXSIM_API txsim_service_t txsim_service_construct(void* init_cb, void* reset_cb, void* step_cb, void* stop_cb,
                                                     uint32_t api_version, txsim_service_error_t* out_error);
   TXSIM_API void txsim_service_destruct(txsim_service_t s);
   TXSIM_API void txsim_service_serve(txsim_service_t s, const char* name, void* module, const char* address);
   TXSIM_API void txsim_service_shutdown(txsim_service_t s);
   TXSIM_API void txsim_service_wait(txsim_service_t s, txsim_service_error_t* out_error);
   
   }  // extern "C"
   
   
   namespace tx_sim {
   
   class ModuleServiceError {
    public:
     ~ModuleServiceError() noexcept(false) {
       if (err_) {
         std::string err_msg(txsim_service_error_message(err_));
         txsim_service_error_destruct(err_);
         throw std::runtime_error(err_msg);
       }
     }
   
     operator txsim_service_error_t* () { return &err_; }
   
    private:
     txsim_service_error_t err_ = nullptr;
   };
   
   
   class SimModuleService final {
    public:
     void Serve(const std::string& name, std::shared_ptr<SimModule> module, const std::string& address = "") {
       if (name.empty()) {
         throw std::invalid_argument("the name provided in SimModuleService::Serve must NOT be empty.");
       }
       txsim_service_serve(s_, name.c_str(), (void*)module.get(), address.c_str());
     }
   
     void Wait() {
       txsim_service_wait(s_, ModuleServiceError{});
     }
   
     void Shutdown() {
       txsim_service_shutdown(s_);
     }
   
     SimModuleService() {
       s_ = txsim_service_construct((void*)&txsim_init, (void*)&txsim_reset, (void*)&txsim_step, (void*)&txsim_stop,
         txsim_messenger_api_version(), ModuleServiceError{});
     }
   
     ~SimModuleService() {
       if (s_) {
         Shutdown();
         Wait();
         txsim_service_destruct(s_);
       }
     }
   
    private:
     txsim_service_t s_ = nullptr;
   };
   
   } // namespace tx_sim
