// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: grading.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "grading.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class Grading_TimeStampDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_TimeStamp> {
} _Grading_TimeStamp_default_instance_;
class Grading_SpeedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Speed> {
} _Grading_Speed_default_instance_;
class Grading_AccelerationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Acceleration> {
} _Grading_Acceleration_default_instance_;
class Grading_CollisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Collision> {
} _Grading_Collision_default_instance_;
class Grading_TimeHeadwayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_TimeHeadway> {
} _Grading_TimeHeadway_default_instance_;
class Grading_DistHeadwayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_DistHeadway> {
} _Grading_DistHeadway_default_instance_;
class Grading_AlgorithmDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Algorithm> {
} _Grading_Algorithm_default_instance_;
class Grading_LaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Lane> {
} _Grading_Lane_default_instance_;
class Grading_TrafficLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_TrafficLight> {
} _Grading_TrafficLight_default_instance_;
class Grading_ControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Control> {
} _Grading_Control_default_instance_;
class Grading_PlanningDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Planning> {
} _Grading_Planning_default_instance_;
class Grading_CarExpDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_CarExpData> {
} _Grading_CarExpData_default_instance_;
class Grading_ExpDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_ExpData> {
} _Grading_ExpData_default_instance_;
class Grading_Statistics_DetailItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Statistics_DetailItem> {
} _Grading_Statistics_DetailItem_default_instance_;
class Grading_Statistics_DetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Statistics_Detail> {
} _Grading_Statistics_Detail_default_instance_;
class Grading_Statistics_CustomDetailDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Statistics_CustomDetail> {
} _Grading_Statistics_CustomDetail_default_instance_;
class Grading_StatisticsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading_Statistics> {
} _Grading_Statistics_default_instance_;
class GradingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grading> {
} _Grading_default_instance_;

namespace protobuf_grading_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeStamp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeStamp, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Speed, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Speed, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Speed, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Speed, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Acceleration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Acceleration, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Acceleration, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Acceleration, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Collision, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Collision, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Collision, location_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeHeadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeHeadway, ath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeHeadway, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TimeHeadway, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_DistHeadway, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_DistHeadway, dist_to_fellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_DistHeadway, dist_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_DistHeadway, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Algorithm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Algorithm, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Lane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Lane, isonsolidline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Lane, isondottedline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Lane, isonstopline_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_TrafficLight, state_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Control, poserror_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Control, state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Control, threshold_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Planning, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Planning, is_reachendpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Planning, current_point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Planning, endpoint_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_CarExpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_CarExpData, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_CarExpData, value_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_ExpData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_ExpData, distfromcar_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_ExpData, distfromcar_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_ExpData, distfromcar_v_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_ExpData, thfromcar_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_DetailItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_DetailItem, eval_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_DetailItem, is_enabled_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_DetailItem, is_pass_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_overspeed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_overacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_overdecelleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_overturningacceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_tooclosettc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_tooclosedistance_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_overmaxposerror_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, average_poserror_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, max_poserror_h_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, max_poserror_h_l_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, max_poserror_h_r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_crosssolidline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, count_ranredlight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, reachendpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_Detail, collision_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_CustomDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_CustomDetail, custom_reachendpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics_CustomDetail, custom_maxposerror_exceed_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, scene_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, report_date_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, is_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, total_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, total_milleage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, is_timeout_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, grading_xml_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, custom_detail_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading_Statistics, reason_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, acceleration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, collision_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, timeheadway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, lane_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, trafficelight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, mileage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, expdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, distheadway_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, planning_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, lateral_acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Grading, dec_acc_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Grading_TimeStamp)},
  { 5, -1, sizeof(Grading_Speed)},
  { 12, -1, sizeof(Grading_Acceleration)},
  { 19, -1, sizeof(Grading_Collision)},
  { 25, -1, sizeof(Grading_TimeHeadway)},
  { 32, -1, sizeof(Grading_DistHeadway)},
  { 39, -1, sizeof(Grading_Algorithm)},
  { 44, -1, sizeof(Grading_Lane)},
  { 51, -1, sizeof(Grading_TrafficLight)},
  { 56, -1, sizeof(Grading_Control)},
  { 63, -1, sizeof(Grading_Planning)},
  { 70, -1, sizeof(Grading_CarExpData)},
  { 76, -1, sizeof(Grading_ExpData)},
  { 84, -1, sizeof(Grading_Statistics_DetailItem)},
  { 91, -1, sizeof(Grading_Statistics_Detail)},
  { 110, -1, sizeof(Grading_Statistics_CustomDetail)},
  { 116, -1, sizeof(Grading_Statistics)},
  { 130, -1, sizeof(Grading)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_TimeStamp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Speed_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Acceleration_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Collision_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_TimeHeadway_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_DistHeadway_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Algorithm_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Lane_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_TrafficLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Planning_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_CarExpData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_ExpData_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Statistics_DetailItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Statistics_Detail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Statistics_CustomDetail_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_Statistics_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Grading_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "grading.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _Grading_TimeStamp_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Grading_Speed_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Grading_Acceleration_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Grading_Collision_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Grading_TimeHeadway_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Grading_DistHeadway_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Grading_Algorithm_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _Grading_Lane_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _Grading_TrafficLight_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _Grading_Control_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _Grading_Planning_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _Grading_CarExpData_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _Grading_ExpData_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _Grading_Statistics_DetailItem_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _Grading_Statistics_Detail_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _Grading_Statistics_CustomDetail_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _Grading_Statistics_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _Grading_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sim_msg::protobuf_basic_2eproto::InitDefaults();
  _Grading_TimeStamp_default_instance_.DefaultConstruct();
  _Grading_Speed_default_instance_.DefaultConstruct();
  _Grading_Acceleration_default_instance_.DefaultConstruct();
  _Grading_Collision_default_instance_.DefaultConstruct();
  _Grading_TimeHeadway_default_instance_.DefaultConstruct();
  _Grading_DistHeadway_default_instance_.DefaultConstruct();
  _Grading_Algorithm_default_instance_.DefaultConstruct();
  _Grading_Lane_default_instance_.DefaultConstruct();
  _Grading_TrafficLight_default_instance_.DefaultConstruct();
  _Grading_Control_default_instance_.DefaultConstruct();
  _Grading_Planning_default_instance_.DefaultConstruct();
  _Grading_CarExpData_default_instance_.DefaultConstruct();
  _Grading_ExpData_default_instance_.DefaultConstruct();
  _Grading_Statistics_DetailItem_default_instance_.DefaultConstruct();
  _Grading_Statistics_Detail_default_instance_.DefaultConstruct();
  _Grading_Statistics_CustomDetail_default_instance_.DefaultConstruct();
  _Grading_Statistics_default_instance_.DefaultConstruct();
  _Grading_default_instance_.DefaultConstruct();
  _Grading_Collision_default_instance_.get_mutable()->location_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Grading_Planning_default_instance_.get_mutable()->current_point_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Grading_Planning_default_instance_.get_mutable()->endpoint_ = const_cast< ::sim_msg::Vec3*>(
      ::sim_msg::Vec3::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_overspeed_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_overacceleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_overdecelleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_overturningacceleration_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_tooclosettc_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_tooclosedistance_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_overmaxposerror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->average_poserror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->max_poserror_h_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->max_poserror_h_l_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->max_poserror_h_r_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_crosssolidline_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->count_ranredlight_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->reachendpoint_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_Detail_default_instance_.get_mutable()->collision_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_CustomDetail_default_instance_.get_mutable()->custom_reachendpoint_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_CustomDetail_default_instance_.get_mutable()->custom_maxposerror_exceed_ = const_cast< ::sim_msg::Grading_Statistics_DetailItem*>(
      ::sim_msg::Grading_Statistics_DetailItem::internal_default_instance());
  _Grading_Statistics_default_instance_.get_mutable()->detail_ = const_cast< ::sim_msg::Grading_Statistics_Detail*>(
      ::sim_msg::Grading_Statistics_Detail::internal_default_instance());
  _Grading_Statistics_default_instance_.get_mutable()->custom_detail_ = const_cast< ::sim_msg::Grading_Statistics_CustomDetail*>(
      ::sim_msg::Grading_Statistics_CustomDetail::internal_default_instance());
  _Grading_default_instance_.get_mutable()->speed_ = const_cast< ::sim_msg::Grading_Speed*>(
      ::sim_msg::Grading_Speed::internal_default_instance());
  _Grading_default_instance_.get_mutable()->acceleration_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
  _Grading_default_instance_.get_mutable()->timeheadway_ = const_cast< ::sim_msg::Grading_TimeHeadway*>(
      ::sim_msg::Grading_TimeHeadway::internal_default_instance());
  _Grading_default_instance_.get_mutable()->algorithm_ = const_cast< ::sim_msg::Grading_Algorithm*>(
      ::sim_msg::Grading_Algorithm::internal_default_instance());
  _Grading_default_instance_.get_mutable()->lane_ = const_cast< ::sim_msg::Grading_Lane*>(
      ::sim_msg::Grading_Lane::internal_default_instance());
  _Grading_default_instance_.get_mutable()->trafficelight_ = const_cast< ::sim_msg::Grading_TrafficLight*>(
      ::sim_msg::Grading_TrafficLight::internal_default_instance());
  _Grading_default_instance_.get_mutable()->timestamp_ = const_cast< ::sim_msg::Grading_TimeStamp*>(
      ::sim_msg::Grading_TimeStamp::internal_default_instance());
  _Grading_default_instance_.get_mutable()->expdata_ = const_cast< ::sim_msg::Grading_ExpData*>(
      ::sim_msg::Grading_ExpData::internal_default_instance());
  _Grading_default_instance_.get_mutable()->distheadway_ = const_cast< ::sim_msg::Grading_DistHeadway*>(
      ::sim_msg::Grading_DistHeadway::internal_default_instance());
  _Grading_default_instance_.get_mutable()->control_ = const_cast< ::sim_msg::Grading_Control*>(
      ::sim_msg::Grading_Control::internal_default_instance());
  _Grading_default_instance_.get_mutable()->planning_ = const_cast< ::sim_msg::Grading_Planning*>(
      ::sim_msg::Grading_Planning::internal_default_instance());
  _Grading_default_instance_.get_mutable()->lateral_acc_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
  _Grading_default_instance_.get_mutable()->dec_acc_ = const_cast< ::sim_msg::Grading_Acceleration*>(
      ::sim_msg::Grading_Acceleration::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rgrading.proto\022\007sim_msg\032\013basic.proto\"\347\032"
      "\n\007Grading\022%\n\005speed\030\001 \001(\0132\026.sim_msg.Gradi"
      "ng.Speed\0223\n\014acceleration\030\002 \001(\0132\035.sim_msg"
      ".Grading.Acceleration\022-\n\tcollision\030\003 \003(\013"
      "2\032.sim_msg.Grading.Collision\0221\n\013timeHead"
      "way\030\004 \001(\0132\034.sim_msg.Grading.TimeHeadway\022"
      "-\n\talgorithm\030\005 \001(\0132\032.sim_msg.Grading.Alg"
      "orithm\022#\n\004lane\030\006 \001(\0132\025.sim_msg.Grading.L"
      "ane\0224\n\rtrafficeLight\030\007 \001(\0132\035.sim_msg.Gra"
      "ding.TrafficLight\022-\n\ttimeStamp\030\010 \001(\0132\032.s"
      "im_msg.Grading.TimeStamp\022\017\n\007mileage\030\t \001("
      "\001\022)\n\007expData\030\n \001(\0132\030.sim_msg.Grading.Exp"
      "Data\0221\n\013distHeadway\030\013 \001(\0132\034.sim_msg.Grad"
      "ing.DistHeadway\022)\n\007control\030\014 \001(\0132\030.sim_m"
      "sg.Grading.Control\022+\n\010planning\030\r \001(\0132\031.s"
      "im_msg.Grading.Planning\0222\n\013lateral_acc\030\016"
      " \001(\0132\035.sim_msg.Grading.Acceleration\022.\n\007d"
      "ec_acc\030\017 \001(\0132\035.sim_msg.Grading.Accelerat"
      "ion\032\036\n\tTimeStamp\022\021\n\ttimeStamp\030\001 \001(\004\032T\n\005S"
      "peed\022\r\n\005speed\030\001 \001(\001\022)\n\005state\030\002 \001(\0162\032.sim"
      "_msg.GradingSpeedState\022\021\n\tthreshold\030\003 \001("
      "\001\032i\n\014Acceleration\022\024\n\014acceleration\030\001 \001(\001\022"
      "0\n\005state\030\002 \001(\0162!.sim_msg.GradingAccelera"
      "tionState\022\021\n\tthreshold\030\003 \001(\001\032[\n\tCollisio"
      "n\022-\n\005state\030\001 \001(\0162\036.sim_msg.GradingCollis"
      "ionState\022\037\n\010location\030\002 \001(\0132\r.sim_msg.Vec"
      "3\032^\n\013TimeHeadway\022\013\n\003ATH\030\001 \001(\002\022/\n\005state\030\002"
      " \001(\0162 .sim_msg.GradingTimeHeadwayState\022\021"
      "\n\tthreshold\030\003 \001(\001\032n\n\013DistHeadway\022\026\n\016dist"
      "_to_fellow\030\001 \001(\001\0224\n\ndist_state\030\002 \001(\0162 .s"
      "im_msg.GradingDistHeadwayState\022\021\n\tthresh"
      "old\030\003 \001(\001\032:\n\tAlgorithm\022-\n\005state\030\001 \001(\0162\036."
      "sim_msg.GradingAlgorithmState\032K\n\004Lane\022\025\n"
      "\risOnSolidLine\030\001 \001(\010\022\026\n\016isOnDottedLine\030\002"
      " \001(\010\022\024\n\014isOnStopLine\030\003 \001(\010\032@\n\014TrafficLig"
      "ht\0220\n\005state\030\001 \001(\0162!.sim_msg.GradingTraff"
      "icLightState\032^\n\007Control\022\022\n\nposError_H\030\001 "
      "\001(\001\022,\n\005state\030\002 \001(\0162\035.sim_msg.GradingPosE"
      "rrorState\022\021\n\tthreshold\030\003 \001(\001\032k\n\010Planning"
      "\022\030\n\020is_reachEndpoint\030\001 \001(\010\022$\n\rcurrent_po"
      "int\030\002 \001(\0132\r.sim_msg.Vec3\022\037\n\010endpoint\030\003 \001"
      "(\0132\r.sim_msg.Vec3\032\'\n\nCarExpData\022\n\n\002id\030\001 "
      "\001(\001\022\r\n\005value\030\002 \001(\001\032\323\001\n\007ExpData\0220\n\013distFr"
      "omCar\030\001 \003(\0132\033.sim_msg.Grading.CarExpData"
      "\0222\n\rdistFromCar_H\030\002 \003(\0132\033.sim_msg.Gradin"
      "g.CarExpData\0222\n\rdistFromCar_V\030\003 \003(\0132\033.si"
      "m_msg.Grading.CarExpData\022.\n\tthFromCar\030\004 "
      "\003(\0132\033.sim_msg.Grading.CarExpData\032\224\014\n\nSta"
      "tistics\022\022\n\nscene_name\030\001 \001(\t\022\023\n\013report_da"
      "te\030\002 \001(\t\022\017\n\007is_pass\030\003 \001(\010\022\022\n\ntotal_time\030"
      "\004 \001(\001\022\026\n\016total_milleage\030\005 \001(\001\022\022\n\nis_time"
      "out\030\006 \001(\010\022\023\n\013grading_xml\030\007 \001(\t\0222\n\006detail"
      "\030\010 \001(\0132\".sim_msg.Grading.Statistics.Deta"
      "il\022\?\n\rcustom_detail\030\t \001(\0132(.sim_msg.Grad"
      "ing.Statistics.CustomDetail\022\016\n\006reason\030\n "
      "\001(\t\032E\n\nDetailItem\022\022\n\neval_value\030\001 \001(\001\022\022\n"
      "\nis_enabled\030\002 \001(\010\022\017\n\007is_pass\030\003 \001(\010\032\210\010\n\006D"
      "etail\022\?\n\017count_overSpeed\030\001 \001(\0132&.sim_msg"
      ".Grading.Statistics.DetailItem\022F\n\026count_"
      "overAcceleration\030\002 \001(\0132&.sim_msg.Grading"
      ".Statistics.DetailItem\022G\n\027count_overDece"
      "lleration\030\003 \001(\0132&.sim_msg.Grading.Statis"
      "tics.DetailItem\022M\n\035count_overTurningAcce"
      "leration\030\004 \001(\0132&.sim_msg.Grading.Statist"
      "ics.DetailItem\022A\n\021count_tooCloseTTC\030\005 \001("
      "\0132&.sim_msg.Grading.Statistics.DetailIte"
      "m\022F\n\026count_tooCloseDistance\030\006 \001(\0132&.sim_"
      "msg.Grading.Statistics.DetailItem\022G\n\027cou"
      "nt_overMaxPosError_H\030\007 \001(\0132&.sim_msg.Gra"
      "ding.Statistics.DetailItem\022B\n\022average_Po"
      "sError_H\030\010 \001(\0132&.sim_msg.Grading.Statist"
      "ics.DetailItem\022>\n\016max_PosError_H\030\t \001(\0132&"
      ".sim_msg.Grading.Statistics.DetailItem\022@"
      "\n\020max_PosError_H_L\030\n \001(\0132&.sim_msg.Gradi"
      "ng.Statistics.DetailItem\022@\n\020max_PosError"
      "_H_R\030\013 \001(\0132&.sim_msg.Grading.Statistics."
      "DetailItem\022D\n\024count_CrossSolidLine\030\014 \001(\013"
      "2&.sim_msg.Grading.Statistics.DetailItem"
      "\022A\n\021count_RanRedLight\030\r \001(\0132&.sim_msg.Gr"
      "ading.Statistics.DetailItem\022=\n\rreachEndP"
      "oint\030\016 \001(\0132&.sim_msg.Grading.Statistics."
      "DetailItem\0229\n\tcollision\030\017 \001(\0132&.sim_msg."
      "Grading.Statistics.DetailItem\032\237\001\n\014Custom"
      "Detail\022D\n\024custom_ReachEndPoint\030\001 \001(\0132&.s"
      "im_msg.Grading.Statistics.DetailItem\022I\n\031"
      "custom_maxPosError_Exceed\030\002 \001(\0132&.sim_ms"
      "g.Grading.Statistics.DetailItem*\233\001\n\025Grad"
      "ingCollisionState\022!\n\035GRADING_COLLISION_N"
      "OCOLLISION\020\000\022\035\n\031GRADING_COLLISION_VEHICL"
      "E\020\001\022 \n\034GRADING_COLLISION_PEDESTRIAN\020\002\022\036\n"
      "\032GRADING_COLLISION_OBSTACLE\020\003*{\n\025Grading"
      "AlgorithmState\022\035\n\031GRADING_ALGORITHM_RUNN"
      "ING\020\000\022\035\n\031GRADING_ALGORITHM_TIMEOUT\020\001\022$\n "
      "GRADING_ALGORITHM_THROWEXCEPTION\020\002*c\n\030Gr"
      "adingTrafficLightState\022 \n\034GRADING_TRAFFI"
      "CLIGHT_RUNNING\020\000\022%\n!GRADING_TRAFFICLIGHT"
      "_JUMPREDLIGHT\020\001*d\n\021GradingSpeedState\022\030\n\024"
      "GRADING_SPEED_NORMAL\020\000\022\032\n\026GRADING_SPEED_"
      "OVERHIGH\020\001\022\031\n\025GRADING_SPEED_OVERLOW\020\002*\221\001"
      "\n\030GradingAccelerationState\022\037\n\033GRADING_AC"
      "CELERATION_NORMAL\020\000\022(\n$GRADING_ACCELERAT"
      "ION_RAPIDACCELERATE\020\001\022*\n&GRADING_ACCELER"
      "ATION_RAPIDDEACCELERATE\020\002*Z\n\027GradingTime"
      "HeadwayState\022\036\n\032GRADING_TIMEHEADWAY_NORM"
      "AL\020\000\022\037\n\033GRADING_TIMEHEADWAY_OVERLOW\020\001*Z\n"
      "\027GradingDistHeadwayState\022\036\n\032GRADING_DIST"
      "HEADWAY_NORMAL\020\000\022\037\n\033GRADING_DISTHEADWAY_"
      "OVERLOW\020\001*P\n\024GradingPosErrorState\022\033\n\027GRA"
      "DING_PosError_NORMAL\020\000\022\033\n\027GRADING_PosErr"
      "or_EXCEED\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 4379);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "grading.proto", &protobuf_RegisterTypes);
  ::sim_msg::protobuf_basic_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_grading_2eproto

const ::google::protobuf::EnumDescriptor* GradingCollisionState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[0];
}
bool GradingCollisionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingAlgorithmState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[1];
}
bool GradingAlgorithmState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingTrafficLightState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[2];
}
bool GradingTrafficLightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingSpeedState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[3];
}
bool GradingSpeedState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingAccelerationState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[4];
}
bool GradingAccelerationState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingTimeHeadwayState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[5];
}
bool GradingTimeHeadwayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingDistHeadwayState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[6];
}
bool GradingDistHeadwayState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GradingPosErrorState_descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_enum_descriptors[7];
}
bool GradingPosErrorState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_TimeStamp::kTimeStampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_TimeStamp::Grading_TimeStamp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TimeStamp)
}
Grading_TimeStamp::Grading_TimeStamp(const Grading_TimeStamp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timestamp_ = from.timestamp_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TimeStamp)
}

void Grading_TimeStamp::SharedCtor() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Grading_TimeStamp::~Grading_TimeStamp() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TimeStamp)
  SharedDtor();
}

void Grading_TimeStamp::SharedDtor() {
}

void Grading_TimeStamp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_TimeStamp::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[0].descriptor;
}

const Grading_TimeStamp& Grading_TimeStamp::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_TimeStamp* Grading_TimeStamp::New(::google::protobuf::Arena* arena) const {
  Grading_TimeStamp* n = new Grading_TimeStamp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_TimeStamp::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TimeStamp)
  timestamp_ = GOOGLE_ULONGLONG(0);
}

bool Grading_TimeStamp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TimeStamp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 timeStamp = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TimeStamp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TimeStamp)
  return false;
#undef DO_
}

void Grading_TimeStamp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TimeStamp)
  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->timestamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TimeStamp)
}

::google::protobuf::uint8* Grading_TimeStamp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TimeStamp)
  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->timestamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TimeStamp)
  return target;
}

size_t Grading_TimeStamp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TimeStamp)
  size_t total_size = 0;

  // uint64 timeStamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_TimeStamp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TimeStamp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_TimeStamp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TimeStamp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TimeStamp)
    MergeFrom(*source);
  }
}

void Grading_TimeStamp::MergeFrom(const Grading_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TimeStamp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
}

void Grading_TimeStamp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TimeStamp::CopyFrom(const Grading_TimeStamp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TimeStamp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TimeStamp::IsInitialized() const {
  return true;
}

void Grading_TimeStamp::Swap(Grading_TimeStamp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_TimeStamp::InternalSwap(Grading_TimeStamp* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_TimeStamp::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_TimeStamp

// uint64 timeStamp = 1;
void Grading_TimeStamp::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Grading_TimeStamp::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeStamp.timeStamp)
  return timestamp_;
}
void Grading_TimeStamp::set_timestamp(::google::protobuf::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeStamp.timeStamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Speed::kSpeedFieldNumber;
const int Grading_Speed::kStateFieldNumber;
const int Grading_Speed::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Speed::Grading_Speed()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Speed)
}
Grading_Speed::Grading_Speed(const Grading_Speed& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&speed_, &from.speed_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&speed_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Speed)
}

void Grading_Speed::SharedCtor() {
  ::memset(&speed_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&speed_) + sizeof(state_));
  _cached_size_ = 0;
}

Grading_Speed::~Grading_Speed() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Speed)
  SharedDtor();
}

void Grading_Speed::SharedDtor() {
}

void Grading_Speed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Speed::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[1].descriptor;
}

const Grading_Speed& Grading_Speed::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Speed* Grading_Speed::New(::google::protobuf::Arena* arena) const {
  Grading_Speed* n = new Grading_Speed;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Speed::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Speed)
  ::memset(&speed_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&speed_) + sizeof(state_));
}

bool Grading_Speed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Speed)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double speed = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingSpeedState state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingSpeedState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Speed)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Speed)
  return false;
#undef DO_
}

void Grading_Speed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Speed)
  // double speed = 1;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->speed(), output);
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Speed)
}

::google::protobuf::uint8* Grading_Speed::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Speed)
  // double speed = 1;
  if (this->speed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->speed(), target);
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Speed)
  return target;
}

size_t Grading_Speed::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Speed)
  size_t total_size = 0;

  // double speed = 1;
  if (this->speed() != 0) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingSpeedState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Speed::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Speed* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Speed>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Speed)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Speed)
    MergeFrom(*source);
  }
}

void Grading_Speed::MergeFrom(const Grading_Speed& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Speed)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Speed::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Speed::CopyFrom(const Grading_Speed& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Speed)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Speed::IsInitialized() const {
  return true;
}

void Grading_Speed::Swap(Grading_Speed* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Speed::InternalSwap(Grading_Speed* other) {
  std::swap(speed_, other->speed_);
  std::swap(threshold_, other->threshold_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Speed::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Speed

// double speed = 1;
void Grading_Speed::clear_speed() {
  speed_ = 0;
}
double Grading_Speed::speed() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.speed)
  return speed_;
}
void Grading_Speed::set_speed(double value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.speed)
}

// .sim_msg.GradingSpeedState state = 2;
void Grading_Speed::clear_state() {
  state_ = 0;
}
::sim_msg::GradingSpeedState Grading_Speed::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.state)
  return static_cast< ::sim_msg::GradingSpeedState >(state_);
}
void Grading_Speed::set_state(::sim_msg::GradingSpeedState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.state)
}

// double threshold = 3;
void Grading_Speed::clear_threshold() {
  threshold_ = 0;
}
double Grading_Speed::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Speed.threshold)
  return threshold_;
}
void Grading_Speed::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Speed.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Acceleration::kAccelerationFieldNumber;
const int Grading_Acceleration::kStateFieldNumber;
const int Grading_Acceleration::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Acceleration::Grading_Acceleration()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Acceleration)
}
Grading_Acceleration::Grading_Acceleration(const Grading_Acceleration& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acceleration_, &from.acceleration_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&acceleration_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Acceleration)
}

void Grading_Acceleration::SharedCtor() {
  ::memset(&acceleration_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&acceleration_) + sizeof(state_));
  _cached_size_ = 0;
}

Grading_Acceleration::~Grading_Acceleration() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Acceleration)
  SharedDtor();
}

void Grading_Acceleration::SharedDtor() {
}

void Grading_Acceleration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Acceleration::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[2].descriptor;
}

const Grading_Acceleration& Grading_Acceleration::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Acceleration* Grading_Acceleration::New(::google::protobuf::Arena* arena) const {
  Grading_Acceleration* n = new Grading_Acceleration;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Acceleration::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Acceleration)
  ::memset(&acceleration_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&acceleration_) + sizeof(state_));
}

bool Grading_Acceleration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Acceleration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acceleration = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingAccelerationState state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingAccelerationState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Acceleration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Acceleration)
  return false;
#undef DO_
}

void Grading_Acceleration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Acceleration)
  // double acceleration = 1;
  if (this->acceleration() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acceleration(), output);
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Acceleration)
}

::google::protobuf::uint8* Grading_Acceleration::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Acceleration)
  // double acceleration = 1;
  if (this->acceleration() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acceleration(), target);
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Acceleration)
  return target;
}

size_t Grading_Acceleration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Acceleration)
  size_t total_size = 0;

  // double acceleration = 1;
  if (this->acceleration() != 0) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingAccelerationState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Acceleration::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Acceleration* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Acceleration>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Acceleration)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Acceleration)
    MergeFrom(*source);
  }
}

void Grading_Acceleration::MergeFrom(const Grading_Acceleration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Acceleration)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.acceleration() != 0) {
    set_acceleration(from.acceleration());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Acceleration::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Acceleration::CopyFrom(const Grading_Acceleration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Acceleration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Acceleration::IsInitialized() const {
  return true;
}

void Grading_Acceleration::Swap(Grading_Acceleration* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Acceleration::InternalSwap(Grading_Acceleration* other) {
  std::swap(acceleration_, other->acceleration_);
  std::swap(threshold_, other->threshold_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Acceleration::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Acceleration

// double acceleration = 1;
void Grading_Acceleration::clear_acceleration() {
  acceleration_ = 0;
}
double Grading_Acceleration::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.acceleration)
  return acceleration_;
}
void Grading_Acceleration::set_acceleration(double value) {
  
  acceleration_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.acceleration)
}

// .sim_msg.GradingAccelerationState state = 2;
void Grading_Acceleration::clear_state() {
  state_ = 0;
}
::sim_msg::GradingAccelerationState Grading_Acceleration::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.state)
  return static_cast< ::sim_msg::GradingAccelerationState >(state_);
}
void Grading_Acceleration::set_state(::sim_msg::GradingAccelerationState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.state)
}

// double threshold = 3;
void Grading_Acceleration::clear_threshold() {
  threshold_ = 0;
}
double Grading_Acceleration::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Acceleration.threshold)
  return threshold_;
}
void Grading_Acceleration::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Acceleration.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Collision::kStateFieldNumber;
const int Grading_Collision::kLocationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Collision::Grading_Collision()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Collision)
}
Grading_Collision::Grading_Collision(const Grading_Collision& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    location_ = new ::sim_msg::Vec3(*from.location_);
  } else {
    location_ = NULL;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Collision)
}

void Grading_Collision::SharedCtor() {
  ::memset(&location_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&location_) + sizeof(state_));
  _cached_size_ = 0;
}

Grading_Collision::~Grading_Collision() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Collision)
  SharedDtor();
}

void Grading_Collision::SharedDtor() {
  if (this != internal_default_instance()) {
    delete location_;
  }
}

void Grading_Collision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Collision::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[3].descriptor;
}

const Grading_Collision& Grading_Collision::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Collision* Grading_Collision::New(::google::protobuf::Arena* arena) const {
  Grading_Collision* n = new Grading_Collision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Collision::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Collision)
  if (GetArenaNoVirtual() == NULL && location_ != NULL) {
    delete location_;
  }
  location_ = NULL;
  state_ = 0;
}

bool Grading_Collision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Collision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingCollisionState state = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingCollisionState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 location = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Collision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Collision)
  return false;
#undef DO_
}

void Grading_Collision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Collision)
  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->location_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Collision)
}

::google::protobuf::uint8* Grading_Collision::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Collision)
  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->location_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Collision)
  return target;
}

size_t Grading_Collision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Collision)
  size_t total_size = 0;

  // .sim_msg.Vec3 location = 2;
  if (this->has_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->location_);
  }

  // .sim_msg.GradingCollisionState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Collision::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Collision* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Collision>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Collision)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Collision)
    MergeFrom(*source);
  }
}

void Grading_Collision::MergeFrom(const Grading_Collision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Collision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_location()) {
    mutable_location()->::sim_msg::Vec3::MergeFrom(from.location());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Collision::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Collision::CopyFrom(const Grading_Collision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Collision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Collision::IsInitialized() const {
  return true;
}

void Grading_Collision::Swap(Grading_Collision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Collision::InternalSwap(Grading_Collision* other) {
  std::swap(location_, other->location_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Collision::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Collision

// .sim_msg.GradingCollisionState state = 1;
void Grading_Collision::clear_state() {
  state_ = 0;
}
::sim_msg::GradingCollisionState Grading_Collision::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Collision.state)
  return static_cast< ::sim_msg::GradingCollisionState >(state_);
}
void Grading_Collision::set_state(::sim_msg::GradingCollisionState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Collision.state)
}

// .sim_msg.Vec3 location = 2;
bool Grading_Collision::has_location() const {
  return this != internal_default_instance() && location_ != NULL;
}
void Grading_Collision::clear_location() {
  if (GetArenaNoVirtual() == NULL && location_ != NULL) delete location_;
  location_ = NULL;
}
const ::sim_msg::Vec3& Grading_Collision::location() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Collision.location)
  return location_ != NULL ? *location_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Grading_Collision::mutable_location() {
  
  if (location_ == NULL) {
    location_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Collision.location)
  return location_;
}
::sim_msg::Vec3* Grading_Collision::release_location() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Collision.location)
  
  ::sim_msg::Vec3* temp = location_;
  location_ = NULL;
  return temp;
}
void Grading_Collision::set_allocated_location(::sim_msg::Vec3* location) {
  delete location_;
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Collision.location)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_TimeHeadway::kATHFieldNumber;
const int Grading_TimeHeadway::kStateFieldNumber;
const int Grading_TimeHeadway::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_TimeHeadway::Grading_TimeHeadway()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TimeHeadway)
}
Grading_TimeHeadway::Grading_TimeHeadway(const Grading_TimeHeadway& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ath_, &from.ath_,
    reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&ath_) + sizeof(threshold_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TimeHeadway)
}

void Grading_TimeHeadway::SharedCtor() {
  ::memset(&ath_, 0, reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&ath_) + sizeof(threshold_));
  _cached_size_ = 0;
}

Grading_TimeHeadway::~Grading_TimeHeadway() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TimeHeadway)
  SharedDtor();
}

void Grading_TimeHeadway::SharedDtor() {
}

void Grading_TimeHeadway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_TimeHeadway::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[4].descriptor;
}

const Grading_TimeHeadway& Grading_TimeHeadway::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_TimeHeadway* Grading_TimeHeadway::New(::google::protobuf::Arena* arena) const {
  Grading_TimeHeadway* n = new Grading_TimeHeadway;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_TimeHeadway::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TimeHeadway)
  ::memset(&ath_, 0, reinterpret_cast<char*>(&threshold_) -
    reinterpret_cast<char*>(&ath_) + sizeof(threshold_));
}

bool Grading_TimeHeadway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TimeHeadway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float ATH = 1;
      case 1: {
        if (tag == 13u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ath_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingTimeHeadwayState state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingTimeHeadwayState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TimeHeadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TimeHeadway)
  return false;
#undef DO_
}

void Grading_TimeHeadway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TimeHeadway)
  // float ATH = 1;
  if (this->ath() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->ath(), output);
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TimeHeadway)
}

::google::protobuf::uint8* Grading_TimeHeadway::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TimeHeadway)
  // float ATH = 1;
  if (this->ath() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->ath(), target);
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TimeHeadway)
  return target;
}

size_t Grading_TimeHeadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TimeHeadway)
  size_t total_size = 0;

  // float ATH = 1;
  if (this->ath() != 0) {
    total_size += 1 + 4;
  }

  // .sim_msg.GradingTimeHeadwayState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_TimeHeadway::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TimeHeadway* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_TimeHeadway>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TimeHeadway)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TimeHeadway)
    MergeFrom(*source);
  }
}

void Grading_TimeHeadway::MergeFrom(const Grading_TimeHeadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TimeHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ath() != 0) {
    set_ath(from.ath());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
}

void Grading_TimeHeadway::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TimeHeadway::CopyFrom(const Grading_TimeHeadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TimeHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TimeHeadway::IsInitialized() const {
  return true;
}

void Grading_TimeHeadway::Swap(Grading_TimeHeadway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_TimeHeadway::InternalSwap(Grading_TimeHeadway* other) {
  std::swap(ath_, other->ath_);
  std::swap(state_, other->state_);
  std::swap(threshold_, other->threshold_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_TimeHeadway::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_TimeHeadway

// float ATH = 1;
void Grading_TimeHeadway::clear_ath() {
  ath_ = 0;
}
float Grading_TimeHeadway::ath() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.ATH)
  return ath_;
}
void Grading_TimeHeadway::set_ath(float value) {
  
  ath_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.ATH)
}

// .sim_msg.GradingTimeHeadwayState state = 2;
void Grading_TimeHeadway::clear_state() {
  state_ = 0;
}
::sim_msg::GradingTimeHeadwayState Grading_TimeHeadway::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.state)
  return static_cast< ::sim_msg::GradingTimeHeadwayState >(state_);
}
void Grading_TimeHeadway::set_state(::sim_msg::GradingTimeHeadwayState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.state)
}

// double threshold = 3;
void Grading_TimeHeadway::clear_threshold() {
  threshold_ = 0;
}
double Grading_TimeHeadway::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TimeHeadway.threshold)
  return threshold_;
}
void Grading_TimeHeadway::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TimeHeadway.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_DistHeadway::kDistToFellowFieldNumber;
const int Grading_DistHeadway::kDistStateFieldNumber;
const int Grading_DistHeadway::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_DistHeadway::Grading_DistHeadway()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.DistHeadway)
}
Grading_DistHeadway::Grading_DistHeadway(const Grading_DistHeadway& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dist_to_fellow_, &from.dist_to_fellow_,
    reinterpret_cast<char*>(&dist_state_) -
    reinterpret_cast<char*>(&dist_to_fellow_) + sizeof(dist_state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.DistHeadway)
}

void Grading_DistHeadway::SharedCtor() {
  ::memset(&dist_to_fellow_, 0, reinterpret_cast<char*>(&dist_state_) -
    reinterpret_cast<char*>(&dist_to_fellow_) + sizeof(dist_state_));
  _cached_size_ = 0;
}

Grading_DistHeadway::~Grading_DistHeadway() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.DistHeadway)
  SharedDtor();
}

void Grading_DistHeadway::SharedDtor() {
}

void Grading_DistHeadway::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_DistHeadway::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[5].descriptor;
}

const Grading_DistHeadway& Grading_DistHeadway::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_DistHeadway* Grading_DistHeadway::New(::google::protobuf::Arena* arena) const {
  Grading_DistHeadway* n = new Grading_DistHeadway;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_DistHeadway::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.DistHeadway)
  ::memset(&dist_to_fellow_, 0, reinterpret_cast<char*>(&dist_state_) -
    reinterpret_cast<char*>(&dist_to_fellow_) + sizeof(dist_state_));
}

bool Grading_DistHeadway::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.DistHeadway)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double dist_to_fellow = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_to_fellow_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingDistHeadwayState dist_state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_dist_state(static_cast< ::sim_msg::GradingDistHeadwayState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.DistHeadway)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.DistHeadway)
  return false;
#undef DO_
}

void Grading_DistHeadway::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.DistHeadway)
  // double dist_to_fellow = 1;
  if (this->dist_to_fellow() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->dist_to_fellow(), output);
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dist_state(), output);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.DistHeadway)
}

::google::protobuf::uint8* Grading_DistHeadway::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.DistHeadway)
  // double dist_to_fellow = 1;
  if (this->dist_to_fellow() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->dist_to_fellow(), target);
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dist_state(), target);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.DistHeadway)
  return target;
}

size_t Grading_DistHeadway::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.DistHeadway)
  size_t total_size = 0;

  // double dist_to_fellow = 1;
  if (this->dist_to_fellow() != 0) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingDistHeadwayState dist_state = 2;
  if (this->dist_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->dist_state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_DistHeadway::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.DistHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_DistHeadway* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_DistHeadway>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.DistHeadway)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.DistHeadway)
    MergeFrom(*source);
  }
}

void Grading_DistHeadway::MergeFrom(const Grading_DistHeadway& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.DistHeadway)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dist_to_fellow() != 0) {
    set_dist_to_fellow(from.dist_to_fellow());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.dist_state() != 0) {
    set_dist_state(from.dist_state());
  }
}

void Grading_DistHeadway::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.DistHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_DistHeadway::CopyFrom(const Grading_DistHeadway& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.DistHeadway)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_DistHeadway::IsInitialized() const {
  return true;
}

void Grading_DistHeadway::Swap(Grading_DistHeadway* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_DistHeadway::InternalSwap(Grading_DistHeadway* other) {
  std::swap(dist_to_fellow_, other->dist_to_fellow_);
  std::swap(threshold_, other->threshold_);
  std::swap(dist_state_, other->dist_state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_DistHeadway::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_DistHeadway

// double dist_to_fellow = 1;
void Grading_DistHeadway::clear_dist_to_fellow() {
  dist_to_fellow_ = 0;
}
double Grading_DistHeadway::dist_to_fellow() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.dist_to_fellow)
  return dist_to_fellow_;
}
void Grading_DistHeadway::set_dist_to_fellow(double value) {
  
  dist_to_fellow_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.dist_to_fellow)
}

// .sim_msg.GradingDistHeadwayState dist_state = 2;
void Grading_DistHeadway::clear_dist_state() {
  dist_state_ = 0;
}
::sim_msg::GradingDistHeadwayState Grading_DistHeadway::dist_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.dist_state)
  return static_cast< ::sim_msg::GradingDistHeadwayState >(dist_state_);
}
void Grading_DistHeadway::set_dist_state(::sim_msg::GradingDistHeadwayState value) {
  
  dist_state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.dist_state)
}

// double threshold = 3;
void Grading_DistHeadway::clear_threshold() {
  threshold_ = 0;
}
double Grading_DistHeadway::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.DistHeadway.threshold)
  return threshold_;
}
void Grading_DistHeadway::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.DistHeadway.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Algorithm::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Algorithm::Grading_Algorithm()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Algorithm)
}
Grading_Algorithm::Grading_Algorithm(const Grading_Algorithm& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Algorithm)
}

void Grading_Algorithm::SharedCtor() {
  state_ = 0;
  _cached_size_ = 0;
}

Grading_Algorithm::~Grading_Algorithm() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Algorithm)
  SharedDtor();
}

void Grading_Algorithm::SharedDtor() {
}

void Grading_Algorithm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Algorithm::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[6].descriptor;
}

const Grading_Algorithm& Grading_Algorithm::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Algorithm* Grading_Algorithm::New(::google::protobuf::Arena* arena) const {
  Grading_Algorithm* n = new Grading_Algorithm;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Algorithm::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Algorithm)
  state_ = 0;
}

bool Grading_Algorithm::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Algorithm)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingAlgorithmState state = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingAlgorithmState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Algorithm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Algorithm)
  return false;
#undef DO_
}

void Grading_Algorithm::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Algorithm)
  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Algorithm)
}

::google::protobuf::uint8* Grading_Algorithm::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Algorithm)
  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Algorithm)
  return target;
}

size_t Grading_Algorithm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Algorithm)
  size_t total_size = 0;

  // .sim_msg.GradingAlgorithmState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Algorithm::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Algorithm* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Algorithm>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Algorithm)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Algorithm)
    MergeFrom(*source);
  }
}

void Grading_Algorithm::MergeFrom(const Grading_Algorithm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Algorithm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Algorithm::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Algorithm::CopyFrom(const Grading_Algorithm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Algorithm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Algorithm::IsInitialized() const {
  return true;
}

void Grading_Algorithm::Swap(Grading_Algorithm* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Algorithm::InternalSwap(Grading_Algorithm* other) {
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Algorithm::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Algorithm

// .sim_msg.GradingAlgorithmState state = 1;
void Grading_Algorithm::clear_state() {
  state_ = 0;
}
::sim_msg::GradingAlgorithmState Grading_Algorithm::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Algorithm.state)
  return static_cast< ::sim_msg::GradingAlgorithmState >(state_);
}
void Grading_Algorithm::set_state(::sim_msg::GradingAlgorithmState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Algorithm.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Lane::kIsOnSolidLineFieldNumber;
const int Grading_Lane::kIsOnDottedLineFieldNumber;
const int Grading_Lane::kIsOnStopLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Lane::Grading_Lane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Lane)
}
Grading_Lane::Grading_Lane(const Grading_Lane& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&isonsolidline_, &from.isonsolidline_,
    reinterpret_cast<char*>(&isonstopline_) -
    reinterpret_cast<char*>(&isonsolidline_) + sizeof(isonstopline_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Lane)
}

void Grading_Lane::SharedCtor() {
  ::memset(&isonsolidline_, 0, reinterpret_cast<char*>(&isonstopline_) -
    reinterpret_cast<char*>(&isonsolidline_) + sizeof(isonstopline_));
  _cached_size_ = 0;
}

Grading_Lane::~Grading_Lane() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Lane)
  SharedDtor();
}

void Grading_Lane::SharedDtor() {
}

void Grading_Lane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Lane::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[7].descriptor;
}

const Grading_Lane& Grading_Lane::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Lane* Grading_Lane::New(::google::protobuf::Arena* arena) const {
  Grading_Lane* n = new Grading_Lane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Lane::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Lane)
  ::memset(&isonsolidline_, 0, reinterpret_cast<char*>(&isonstopline_) -
    reinterpret_cast<char*>(&isonsolidline_) + sizeof(isonstopline_));
}

bool Grading_Lane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Lane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool isOnSolidLine = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonsolidline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOnDottedLine = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isondottedline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOnStopLine = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonstopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Lane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Lane)
  return false;
#undef DO_
}

void Grading_Lane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Lane)
  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isonsolidline(), output);
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isondottedline(), output);
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isonstopline(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Lane)
}

::google::protobuf::uint8* Grading_Lane::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Lane)
  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isonsolidline(), target);
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isondottedline(), target);
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isonstopline(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Lane)
  return target;
}

size_t Grading_Lane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Lane)
  size_t total_size = 0;

  // bool isOnSolidLine = 1;
  if (this->isonsolidline() != 0) {
    total_size += 1 + 1;
  }

  // bool isOnDottedLine = 2;
  if (this->isondottedline() != 0) {
    total_size += 1 + 1;
  }

  // bool isOnStopLine = 3;
  if (this->isonstopline() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Lane::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Lane* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Lane>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Lane)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Lane)
    MergeFrom(*source);
  }
}

void Grading_Lane::MergeFrom(const Grading_Lane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Lane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.isonsolidline() != 0) {
    set_isonsolidline(from.isonsolidline());
  }
  if (from.isondottedline() != 0) {
    set_isondottedline(from.isondottedline());
  }
  if (from.isonstopline() != 0) {
    set_isonstopline(from.isonstopline());
  }
}

void Grading_Lane::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Lane::CopyFrom(const Grading_Lane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Lane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Lane::IsInitialized() const {
  return true;
}

void Grading_Lane::Swap(Grading_Lane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Lane::InternalSwap(Grading_Lane* other) {
  std::swap(isonsolidline_, other->isonsolidline_);
  std::swap(isondottedline_, other->isondottedline_);
  std::swap(isonstopline_, other->isonstopline_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Lane::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Lane

// bool isOnSolidLine = 1;
void Grading_Lane::clear_isonsolidline() {
  isonsolidline_ = false;
}
bool Grading_Lane::isonsolidline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnSolidLine)
  return isonsolidline_;
}
void Grading_Lane::set_isonsolidline(bool value) {
  
  isonsolidline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnSolidLine)
}

// bool isOnDottedLine = 2;
void Grading_Lane::clear_isondottedline() {
  isondottedline_ = false;
}
bool Grading_Lane::isondottedline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnDottedLine)
  return isondottedline_;
}
void Grading_Lane::set_isondottedline(bool value) {
  
  isondottedline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnDottedLine)
}

// bool isOnStopLine = 3;
void Grading_Lane::clear_isonstopline() {
  isonstopline_ = false;
}
bool Grading_Lane::isonstopline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Lane.isOnStopLine)
  return isonstopline_;
}
void Grading_Lane::set_isonstopline(bool value) {
  
  isonstopline_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Lane.isOnStopLine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_TrafficLight::kStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_TrafficLight::Grading_TrafficLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.TrafficLight)
}
Grading_TrafficLight::Grading_TrafficLight(const Grading_TrafficLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.TrafficLight)
}

void Grading_TrafficLight::SharedCtor() {
  state_ = 0;
  _cached_size_ = 0;
}

Grading_TrafficLight::~Grading_TrafficLight() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.TrafficLight)
  SharedDtor();
}

void Grading_TrafficLight::SharedDtor() {
}

void Grading_TrafficLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_TrafficLight::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[8].descriptor;
}

const Grading_TrafficLight& Grading_TrafficLight::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_TrafficLight* Grading_TrafficLight::New(::google::protobuf::Arena* arena) const {
  Grading_TrafficLight* n = new Grading_TrafficLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.TrafficLight)
  state_ = 0;
}

bool Grading_TrafficLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.TrafficLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.GradingTrafficLightState state = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingTrafficLightState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.TrafficLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.TrafficLight)
  return false;
#undef DO_
}

void Grading_TrafficLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.TrafficLight)
  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->state(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.TrafficLight)
}

::google::protobuf::uint8* Grading_TrafficLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.TrafficLight)
  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->state(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.TrafficLight)
  return target;
}

size_t Grading_TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.TrafficLight)
  size_t total_size = 0;

  // .sim_msg.GradingTrafficLightState state = 1;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_TrafficLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_TrafficLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_TrafficLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.TrafficLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.TrafficLight)
    MergeFrom(*source);
  }
}

void Grading_TrafficLight::MergeFrom(const Grading_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_TrafficLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_TrafficLight::CopyFrom(const Grading_TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_TrafficLight::IsInitialized() const {
  return true;
}

void Grading_TrafficLight::Swap(Grading_TrafficLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_TrafficLight::InternalSwap(Grading_TrafficLight* other) {
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_TrafficLight::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_TrafficLight

// .sim_msg.GradingTrafficLightState state = 1;
void Grading_TrafficLight::clear_state() {
  state_ = 0;
}
::sim_msg::GradingTrafficLightState Grading_TrafficLight::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.TrafficLight.state)
  return static_cast< ::sim_msg::GradingTrafficLightState >(state_);
}
void Grading_TrafficLight::set_state(::sim_msg::GradingTrafficLightState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.TrafficLight.state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Control::kPosErrorHFieldNumber;
const int Grading_Control::kStateFieldNumber;
const int Grading_Control::kThresholdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Control::Grading_Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Control)
}
Grading_Control::Grading_Control(const Grading_Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&poserror_h_, &from.poserror_h_,
    reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&poserror_h_) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Control)
}

void Grading_Control::SharedCtor() {
  ::memset(&poserror_h_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&poserror_h_) + sizeof(state_));
  _cached_size_ = 0;
}

Grading_Control::~Grading_Control() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Control)
  SharedDtor();
}

void Grading_Control::SharedDtor() {
}

void Grading_Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Control::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[9].descriptor;
}

const Grading_Control& Grading_Control::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Control* Grading_Control::New(::google::protobuf::Arena* arena) const {
  Grading_Control* n = new Grading_Control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Control::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Control)
  ::memset(&poserror_h_, 0, reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&poserror_h_) + sizeof(state_));
}

bool Grading_Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double posError_H = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &poserror_h_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.GradingPosErrorState state = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_state(static_cast< ::sim_msg::GradingPosErrorState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double threshold = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &threshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Control)
  return false;
#undef DO_
}

void Grading_Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Control)
  // double posError_H = 1;
  if (this->poserror_h() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->poserror_h(), output);
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->state(), output);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->threshold(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Control)
}

::google::protobuf::uint8* Grading_Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Control)
  // double posError_H = 1;
  if (this->poserror_h() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->poserror_h(), target);
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->state(), target);
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->threshold(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Control)
  return target;
}

size_t Grading_Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Control)
  size_t total_size = 0;

  // double posError_H = 1;
  if (this->poserror_h() != 0) {
    total_size += 1 + 8;
  }

  // double threshold = 3;
  if (this->threshold() != 0) {
    total_size += 1 + 8;
  }

  // .sim_msg.GradingPosErrorState state = 2;
  if (this->state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->state());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Control)
    MergeFrom(*source);
  }
}

void Grading_Control::MergeFrom(const Grading_Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.poserror_h() != 0) {
    set_poserror_h(from.poserror_h());
  }
  if (from.threshold() != 0) {
    set_threshold(from.threshold());
  }
  if (from.state() != 0) {
    set_state(from.state());
  }
}

void Grading_Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Control::CopyFrom(const Grading_Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Control::IsInitialized() const {
  return true;
}

void Grading_Control::Swap(Grading_Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Control::InternalSwap(Grading_Control* other) {
  std::swap(poserror_h_, other->poserror_h_);
  std::swap(threshold_, other->threshold_);
  std::swap(state_, other->state_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Control::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Control

// double posError_H = 1;
void Grading_Control::clear_poserror_h() {
  poserror_h_ = 0;
}
double Grading_Control::poserror_h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.posError_H)
  return poserror_h_;
}
void Grading_Control::set_poserror_h(double value) {
  
  poserror_h_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.posError_H)
}

// .sim_msg.GradingPosErrorState state = 2;
void Grading_Control::clear_state() {
  state_ = 0;
}
::sim_msg::GradingPosErrorState Grading_Control::state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.state)
  return static_cast< ::sim_msg::GradingPosErrorState >(state_);
}
void Grading_Control::set_state(::sim_msg::GradingPosErrorState value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.state)
}

// double threshold = 3;
void Grading_Control::clear_threshold() {
  threshold_ = 0;
}
double Grading_Control::threshold() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Control.threshold)
  return threshold_;
}
void Grading_Control::set_threshold(double value) {
  
  threshold_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Control.threshold)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Planning::kIsReachEndpointFieldNumber;
const int Grading_Planning::kCurrentPointFieldNumber;
const int Grading_Planning::kEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Planning::Grading_Planning()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Planning)
}
Grading_Planning::Grading_Planning(const Grading_Planning& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_point()) {
    current_point_ = new ::sim_msg::Vec3(*from.current_point_);
  } else {
    current_point_ = NULL;
  }
  if (from.has_endpoint()) {
    endpoint_ = new ::sim_msg::Vec3(*from.endpoint_);
  } else {
    endpoint_ = NULL;
  }
  is_reachendpoint_ = from.is_reachendpoint_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Planning)
}

void Grading_Planning::SharedCtor() {
  ::memset(&current_point_, 0, reinterpret_cast<char*>(&is_reachendpoint_) -
    reinterpret_cast<char*>(&current_point_) + sizeof(is_reachendpoint_));
  _cached_size_ = 0;
}

Grading_Planning::~Grading_Planning() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Planning)
  SharedDtor();
}

void Grading_Planning::SharedDtor() {
  if (this != internal_default_instance()) {
    delete current_point_;
  }
  if (this != internal_default_instance()) {
    delete endpoint_;
  }
}

void Grading_Planning::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Planning::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[10].descriptor;
}

const Grading_Planning& Grading_Planning::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Planning* Grading_Planning::New(::google::protobuf::Arena* arena) const {
  Grading_Planning* n = new Grading_Planning;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Planning::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Planning)
  if (GetArenaNoVirtual() == NULL && current_point_ != NULL) {
    delete current_point_;
  }
  current_point_ = NULL;
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) {
    delete endpoint_;
  }
  endpoint_ = NULL;
  is_reachendpoint_ = false;
}

bool Grading_Planning::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Planning)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_reachEndpoint = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_reachendpoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 current_point = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Vec3 endpoint = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Planning)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Planning)
  return false;
#undef DO_
}

void Grading_Planning::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Planning)
  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->is_reachendpoint(), output);
  }

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->current_point_, output);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->endpoint_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Planning)
}

::google::protobuf::uint8* Grading_Planning::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Planning)
  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->is_reachendpoint(), target);
  }

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->current_point_, false, target);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->endpoint_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Planning)
  return target;
}

size_t Grading_Planning::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Planning)
  size_t total_size = 0;

  // .sim_msg.Vec3 current_point = 2;
  if (this->has_current_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->current_point_);
  }

  // .sim_msg.Vec3 endpoint = 3;
  if (this->has_endpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->endpoint_);
  }

  // bool is_reachEndpoint = 1;
  if (this->is_reachendpoint() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Planning::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Planning)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Planning* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Planning>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Planning)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Planning)
    MergeFrom(*source);
  }
}

void Grading_Planning::MergeFrom(const Grading_Planning& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Planning)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_current_point()) {
    mutable_current_point()->::sim_msg::Vec3::MergeFrom(from.current_point());
  }
  if (from.has_endpoint()) {
    mutable_endpoint()->::sim_msg::Vec3::MergeFrom(from.endpoint());
  }
  if (from.is_reachendpoint() != 0) {
    set_is_reachendpoint(from.is_reachendpoint());
  }
}

void Grading_Planning::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Planning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Planning::CopyFrom(const Grading_Planning& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Planning)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Planning::IsInitialized() const {
  return true;
}

void Grading_Planning::Swap(Grading_Planning* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Planning::InternalSwap(Grading_Planning* other) {
  std::swap(current_point_, other->current_point_);
  std::swap(endpoint_, other->endpoint_);
  std::swap(is_reachendpoint_, other->is_reachendpoint_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Planning::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Planning

// bool is_reachEndpoint = 1;
void Grading_Planning::clear_is_reachendpoint() {
  is_reachendpoint_ = false;
}
bool Grading_Planning::is_reachendpoint() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.is_reachEndpoint)
  return is_reachendpoint_;
}
void Grading_Planning::set_is_reachendpoint(bool value) {
  
  is_reachendpoint_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Planning.is_reachEndpoint)
}

// .sim_msg.Vec3 current_point = 2;
bool Grading_Planning::has_current_point() const {
  return this != internal_default_instance() && current_point_ != NULL;
}
void Grading_Planning::clear_current_point() {
  if (GetArenaNoVirtual() == NULL && current_point_ != NULL) delete current_point_;
  current_point_ = NULL;
}
const ::sim_msg::Vec3& Grading_Planning::current_point() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.current_point)
  return current_point_ != NULL ? *current_point_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Grading_Planning::mutable_current_point() {
  
  if (current_point_ == NULL) {
    current_point_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Planning.current_point)
  return current_point_;
}
::sim_msg::Vec3* Grading_Planning::release_current_point() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Planning.current_point)
  
  ::sim_msg::Vec3* temp = current_point_;
  current_point_ = NULL;
  return temp;
}
void Grading_Planning::set_allocated_current_point(::sim_msg::Vec3* current_point) {
  delete current_point_;
  current_point_ = current_point;
  if (current_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Planning.current_point)
}

// .sim_msg.Vec3 endpoint = 3;
bool Grading_Planning::has_endpoint() const {
  return this != internal_default_instance() && endpoint_ != NULL;
}
void Grading_Planning::clear_endpoint() {
  if (GetArenaNoVirtual() == NULL && endpoint_ != NULL) delete endpoint_;
  endpoint_ = NULL;
}
const ::sim_msg::Vec3& Grading_Planning::endpoint() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Planning.endpoint)
  return endpoint_ != NULL ? *endpoint_
                         : *::sim_msg::Vec3::internal_default_instance();
}
::sim_msg::Vec3* Grading_Planning::mutable_endpoint() {
  
  if (endpoint_ == NULL) {
    endpoint_ = new ::sim_msg::Vec3;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Planning.endpoint)
  return endpoint_;
}
::sim_msg::Vec3* Grading_Planning::release_endpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Planning.endpoint)
  
  ::sim_msg::Vec3* temp = endpoint_;
  endpoint_ = NULL;
  return temp;
}
void Grading_Planning::set_allocated_endpoint(::sim_msg::Vec3* endpoint) {
  delete endpoint_;
  endpoint_ = endpoint;
  if (endpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Planning.endpoint)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_CarExpData::kIdFieldNumber;
const int Grading_CarExpData::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_CarExpData::Grading_CarExpData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.CarExpData)
}
Grading_CarExpData::Grading_CarExpData(const Grading_CarExpData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.CarExpData)
}

void Grading_CarExpData::SharedCtor() {
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
  _cached_size_ = 0;
}

Grading_CarExpData::~Grading_CarExpData() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.CarExpData)
  SharedDtor();
}

void Grading_CarExpData::SharedDtor() {
}

void Grading_CarExpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_CarExpData::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[11].descriptor;
}

const Grading_CarExpData& Grading_CarExpData::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_CarExpData* Grading_CarExpData::New(::google::protobuf::Arena* arena) const {
  Grading_CarExpData* n = new Grading_CarExpData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_CarExpData::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.CarExpData)
  ::memset(&id_, 0, reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&id_) + sizeof(value_));
}

bool Grading_CarExpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.CarExpData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double id = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double value = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.CarExpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.CarExpData)
  return false;
#undef DO_
}

void Grading_CarExpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.CarExpData)
  // double id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->id(), output);
  }

  // double value = 2;
  if (this->value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.CarExpData)
}

::google::protobuf::uint8* Grading_CarExpData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.CarExpData)
  // double id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->id(), target);
  }

  // double value = 2;
  if (this->value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.CarExpData)
  return target;
}

size_t Grading_CarExpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.CarExpData)
  size_t total_size = 0;

  // double id = 1;
  if (this->id() != 0) {
    total_size += 1 + 8;
  }

  // double value = 2;
  if (this->value() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_CarExpData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.CarExpData)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_CarExpData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_CarExpData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.CarExpData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.CarExpData)
    MergeFrom(*source);
  }
}

void Grading_CarExpData::MergeFrom(const Grading_CarExpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.CarExpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.value() != 0) {
    set_value(from.value());
  }
}

void Grading_CarExpData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.CarExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_CarExpData::CopyFrom(const Grading_CarExpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.CarExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_CarExpData::IsInitialized() const {
  return true;
}

void Grading_CarExpData::Swap(Grading_CarExpData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_CarExpData::InternalSwap(Grading_CarExpData* other) {
  std::swap(id_, other->id_);
  std::swap(value_, other->value_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_CarExpData::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_CarExpData

// double id = 1;
void Grading_CarExpData::clear_id() {
  id_ = 0;
}
double Grading_CarExpData::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.CarExpData.id)
  return id_;
}
void Grading_CarExpData::set_id(double value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.CarExpData.id)
}

// double value = 2;
void Grading_CarExpData::clear_value() {
  value_ = 0;
}
double Grading_CarExpData::value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.CarExpData.value)
  return value_;
}
void Grading_CarExpData::set_value(double value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.CarExpData.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_ExpData::kDistFromCarFieldNumber;
const int Grading_ExpData::kDistFromCarHFieldNumber;
const int Grading_ExpData::kDistFromCarVFieldNumber;
const int Grading_ExpData::kThFromCarFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_ExpData::Grading_ExpData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.ExpData)
}
Grading_ExpData::Grading_ExpData(const Grading_ExpData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      distfromcar_(from.distfromcar_),
      distfromcar_h_(from.distfromcar_h_),
      distfromcar_v_(from.distfromcar_v_),
      thfromcar_(from.thfromcar_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.ExpData)
}

void Grading_ExpData::SharedCtor() {
  _cached_size_ = 0;
}

Grading_ExpData::~Grading_ExpData() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.ExpData)
  SharedDtor();
}

void Grading_ExpData::SharedDtor() {
}

void Grading_ExpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_ExpData::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[12].descriptor;
}

const Grading_ExpData& Grading_ExpData::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_ExpData* Grading_ExpData::New(::google::protobuf::Arena* arena) const {
  Grading_ExpData* n = new Grading_ExpData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_ExpData::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.ExpData)
  distfromcar_.Clear();
  distfromcar_h_.Clear();
  distfromcar_v_.Clear();
  thfromcar_.Clear();
}

bool Grading_ExpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.ExpData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_distfromcar()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_distfromcar_h()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_distfromcar_v()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_thfromcar()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.ExpData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.ExpData)
  return false;
#undef DO_
}

void Grading_ExpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.ExpData)
  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  for (unsigned int i = 0, n = this->distfromcar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->distfromcar(i), output);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  for (unsigned int i = 0, n = this->distfromcar_h_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->distfromcar_h(i), output);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  for (unsigned int i = 0, n = this->distfromcar_v_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->distfromcar_v(i), output);
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  for (unsigned int i = 0, n = this->thfromcar_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->thfromcar(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.ExpData)
}

::google::protobuf::uint8* Grading_ExpData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.ExpData)
  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  for (unsigned int i = 0, n = this->distfromcar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->distfromcar(i), false, target);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  for (unsigned int i = 0, n = this->distfromcar_h_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->distfromcar_h(i), false, target);
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  for (unsigned int i = 0, n = this->distfromcar_v_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->distfromcar_v(i), false, target);
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  for (unsigned int i = 0, n = this->thfromcar_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->thfromcar(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.ExpData)
  return target;
}

size_t Grading_ExpData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.ExpData)
  size_t total_size = 0;

  // repeated .sim_msg.Grading.CarExpData distFromCar = 1;
  {
    unsigned int count = this->distfromcar_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distfromcar(i));
    }
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
  {
    unsigned int count = this->distfromcar_h_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distfromcar_h(i));
    }
  }

  // repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
  {
    unsigned int count = this->distfromcar_v_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->distfromcar_v(i));
    }
  }

  // repeated .sim_msg.Grading.CarExpData thFromCar = 4;
  {
    unsigned int count = this->thfromcar_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->thfromcar(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_ExpData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.ExpData)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_ExpData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_ExpData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.ExpData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.ExpData)
    MergeFrom(*source);
  }
}

void Grading_ExpData::MergeFrom(const Grading_ExpData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.ExpData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  distfromcar_.MergeFrom(from.distfromcar_);
  distfromcar_h_.MergeFrom(from.distfromcar_h_);
  distfromcar_v_.MergeFrom(from.distfromcar_v_);
  thfromcar_.MergeFrom(from.thfromcar_);
}

void Grading_ExpData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.ExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_ExpData::CopyFrom(const Grading_ExpData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.ExpData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_ExpData::IsInitialized() const {
  return true;
}

void Grading_ExpData::Swap(Grading_ExpData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_ExpData::InternalSwap(Grading_ExpData* other) {
  distfromcar_.UnsafeArenaSwap(&other->distfromcar_);
  distfromcar_h_.UnsafeArenaSwap(&other->distfromcar_h_);
  distfromcar_v_.UnsafeArenaSwap(&other->distfromcar_v_);
  thfromcar_.UnsafeArenaSwap(&other->thfromcar_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_ExpData::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_ExpData

// repeated .sim_msg.Grading.CarExpData distFromCar = 1;
int Grading_ExpData::distfromcar_size() const {
  return distfromcar_.size();
}
void Grading_ExpData::clear_distfromcar() {
  distfromcar_.Clear();
}
const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Get(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Mutable(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar)
  return &distfromcar_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar)
  return distfromcar_;
}

// repeated .sim_msg.Grading.CarExpData distFromCar_H = 2;
int Grading_ExpData::distfromcar_h_size() const {
  return distfromcar_h_.size();
}
void Grading_ExpData::clear_distfromcar_h() {
  distfromcar_h_.Clear();
}
const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar_h(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Get(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar_h(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Mutable(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar_h() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar_h() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar_H)
  return &distfromcar_h_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar_h() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar_H)
  return distfromcar_h_;
}

// repeated .sim_msg.Grading.CarExpData distFromCar_V = 3;
int Grading_ExpData::distfromcar_v_size() const {
  return distfromcar_v_.size();
}
void Grading_ExpData::clear_distfromcar_v() {
  distfromcar_v_.Clear();
}
const ::sim_msg::Grading_CarExpData& Grading_ExpData::distfromcar_v(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Get(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_distfromcar_v(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Mutable(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::add_distfromcar_v() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_distfromcar_v() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.distFromCar_V)
  return &distfromcar_v_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::distfromcar_v() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.distFromCar_V)
  return distfromcar_v_;
}

// repeated .sim_msg.Grading.CarExpData thFromCar = 4;
int Grading_ExpData::thfromcar_size() const {
  return thfromcar_.size();
}
void Grading_ExpData::clear_thfromcar() {
  thfromcar_.Clear();
}
const ::sim_msg::Grading_CarExpData& Grading_ExpData::thfromcar(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Get(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::mutable_thfromcar(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Mutable(index);
}
::sim_msg::Grading_CarExpData* Grading_ExpData::add_thfromcar() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >*
Grading_ExpData::mutable_thfromcar() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.ExpData.thFromCar)
  return &thfromcar_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_CarExpData >&
Grading_ExpData::thfromcar() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.ExpData.thFromCar)
  return thfromcar_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Statistics_DetailItem::kEvalValueFieldNumber;
const int Grading_Statistics_DetailItem::kIsEnabledFieldNumber;
const int Grading_Statistics_DetailItem::kIsPassFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Statistics_DetailItem::Grading_Statistics_DetailItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.DetailItem)
}
Grading_Statistics_DetailItem::Grading_Statistics_DetailItem(const Grading_Statistics_DetailItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eval_value_, &from.eval_value_,
    reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&eval_value_) + sizeof(is_pass_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.DetailItem)
}

void Grading_Statistics_DetailItem::SharedCtor() {
  ::memset(&eval_value_, 0, reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&eval_value_) + sizeof(is_pass_));
  _cached_size_ = 0;
}

Grading_Statistics_DetailItem::~Grading_Statistics_DetailItem() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.DetailItem)
  SharedDtor();
}

void Grading_Statistics_DetailItem::SharedDtor() {
}

void Grading_Statistics_DetailItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Statistics_DetailItem::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[13].descriptor;
}

const Grading_Statistics_DetailItem& Grading_Statistics_DetailItem::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Statistics_DetailItem* Grading_Statistics_DetailItem::New(::google::protobuf::Arena* arena) const {
  Grading_Statistics_DetailItem* n = new Grading_Statistics_DetailItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Statistics_DetailItem::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.DetailItem)
  ::memset(&eval_value_, 0, reinterpret_cast<char*>(&is_pass_) -
    reinterpret_cast<char*>(&eval_value_) + sizeof(is_pass_));
}

bool Grading_Statistics_DetailItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.DetailItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double eval_value = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eval_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_enabled = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pass = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.DetailItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.DetailItem)
  return false;
#undef DO_
}

void Grading_Statistics_DetailItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.DetailItem)
  // double eval_value = 1;
  if (this->eval_value() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->eval_value(), output);
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_enabled(), output);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.DetailItem)
}

::google::protobuf::uint8* Grading_Statistics_DetailItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.DetailItem)
  // double eval_value = 1;
  if (this->eval_value() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->eval_value(), target);
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_enabled(), target);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.DetailItem)
  return target;
}

size_t Grading_Statistics_DetailItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.DetailItem)
  size_t total_size = 0;

  // double eval_value = 1;
  if (this->eval_value() != 0) {
    total_size += 1 + 8;
  }

  // bool is_enabled = 2;
  if (this->is_enabled() != 0) {
    total_size += 1 + 1;
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Statistics_DetailItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.DetailItem)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_DetailItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Statistics_DetailItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.DetailItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.DetailItem)
    MergeFrom(*source);
  }
}

void Grading_Statistics_DetailItem::MergeFrom(const Grading_Statistics_DetailItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.DetailItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.eval_value() != 0) {
    set_eval_value(from.eval_value());
  }
  if (from.is_enabled() != 0) {
    set_is_enabled(from.is_enabled());
  }
  if (from.is_pass() != 0) {
    set_is_pass(from.is_pass());
  }
}

void Grading_Statistics_DetailItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.DetailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_DetailItem::CopyFrom(const Grading_Statistics_DetailItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.DetailItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_DetailItem::IsInitialized() const {
  return true;
}

void Grading_Statistics_DetailItem::Swap(Grading_Statistics_DetailItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Statistics_DetailItem::InternalSwap(Grading_Statistics_DetailItem* other) {
  std::swap(eval_value_, other->eval_value_);
  std::swap(is_enabled_, other->is_enabled_);
  std::swap(is_pass_, other->is_pass_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Statistics_DetailItem::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Statistics_DetailItem

// double eval_value = 1;
void Grading_Statistics_DetailItem::clear_eval_value() {
  eval_value_ = 0;
}
double Grading_Statistics_DetailItem::eval_value() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.eval_value)
  return eval_value_;
}
void Grading_Statistics_DetailItem::set_eval_value(double value) {
  
  eval_value_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.eval_value)
}

// bool is_enabled = 2;
void Grading_Statistics_DetailItem::clear_is_enabled() {
  is_enabled_ = false;
}
bool Grading_Statistics_DetailItem::is_enabled() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.is_enabled)
  return is_enabled_;
}
void Grading_Statistics_DetailItem::set_is_enabled(bool value) {
  
  is_enabled_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.is_enabled)
}

// bool is_pass = 3;
void Grading_Statistics_DetailItem::clear_is_pass() {
  is_pass_ = false;
}
bool Grading_Statistics_DetailItem::is_pass() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.DetailItem.is_pass)
  return is_pass_;
}
void Grading_Statistics_DetailItem::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.DetailItem.is_pass)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Statistics_Detail::kCountOverSpeedFieldNumber;
const int Grading_Statistics_Detail::kCountOverAccelerationFieldNumber;
const int Grading_Statistics_Detail::kCountOverDecellerationFieldNumber;
const int Grading_Statistics_Detail::kCountOverTurningAccelerationFieldNumber;
const int Grading_Statistics_Detail::kCountTooCloseTTCFieldNumber;
const int Grading_Statistics_Detail::kCountTooCloseDistanceFieldNumber;
const int Grading_Statistics_Detail::kCountOverMaxPosErrorHFieldNumber;
const int Grading_Statistics_Detail::kAveragePosErrorHFieldNumber;
const int Grading_Statistics_Detail::kMaxPosErrorHFieldNumber;
const int Grading_Statistics_Detail::kMaxPosErrorHLFieldNumber;
const int Grading_Statistics_Detail::kMaxPosErrorHRFieldNumber;
const int Grading_Statistics_Detail::kCountCrossSolidLineFieldNumber;
const int Grading_Statistics_Detail::kCountRanRedLightFieldNumber;
const int Grading_Statistics_Detail::kReachEndPointFieldNumber;
const int Grading_Statistics_Detail::kCollisionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Statistics_Detail::Grading_Statistics_Detail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.Detail)
}
Grading_Statistics_Detail::Grading_Statistics_Detail(const Grading_Statistics_Detail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count_overspeed()) {
    count_overspeed_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overspeed_);
  } else {
    count_overspeed_ = NULL;
  }
  if (from.has_count_overacceleration()) {
    count_overacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overacceleration_);
  } else {
    count_overacceleration_ = NULL;
  }
  if (from.has_count_overdecelleration()) {
    count_overdecelleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overdecelleration_);
  } else {
    count_overdecelleration_ = NULL;
  }
  if (from.has_count_overturningacceleration()) {
    count_overturningacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overturningacceleration_);
  } else {
    count_overturningacceleration_ = NULL;
  }
  if (from.has_count_tooclosettc()) {
    count_tooclosettc_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_tooclosettc_);
  } else {
    count_tooclosettc_ = NULL;
  }
  if (from.has_count_tooclosedistance()) {
    count_tooclosedistance_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_tooclosedistance_);
  } else {
    count_tooclosedistance_ = NULL;
  }
  if (from.has_count_overmaxposerror_h()) {
    count_overmaxposerror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_overmaxposerror_h_);
  } else {
    count_overmaxposerror_h_ = NULL;
  }
  if (from.has_average_poserror_h()) {
    average_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.average_poserror_h_);
  } else {
    average_poserror_h_ = NULL;
  }
  if (from.has_max_poserror_h()) {
    max_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_);
  } else {
    max_poserror_h_ = NULL;
  }
  if (from.has_max_poserror_h_l()) {
    max_poserror_h_l_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_l_);
  } else {
    max_poserror_h_l_ = NULL;
  }
  if (from.has_max_poserror_h_r()) {
    max_poserror_h_r_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.max_poserror_h_r_);
  } else {
    max_poserror_h_r_ = NULL;
  }
  if (from.has_count_crosssolidline()) {
    count_crosssolidline_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_crosssolidline_);
  } else {
    count_crosssolidline_ = NULL;
  }
  if (from.has_count_ranredlight()) {
    count_ranredlight_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.count_ranredlight_);
  } else {
    count_ranredlight_ = NULL;
  }
  if (from.has_reachendpoint()) {
    reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.reachendpoint_);
  } else {
    reachendpoint_ = NULL;
  }
  if (from.has_collision()) {
    collision_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.collision_);
  } else {
    collision_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.Detail)
}

void Grading_Statistics_Detail::SharedCtor() {
  ::memset(&count_overspeed_, 0, reinterpret_cast<char*>(&collision_) -
    reinterpret_cast<char*>(&count_overspeed_) + sizeof(collision_));
  _cached_size_ = 0;
}

Grading_Statistics_Detail::~Grading_Statistics_Detail() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.Detail)
  SharedDtor();
}

void Grading_Statistics_Detail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete count_overspeed_;
  }
  if (this != internal_default_instance()) {
    delete count_overacceleration_;
  }
  if (this != internal_default_instance()) {
    delete count_overdecelleration_;
  }
  if (this != internal_default_instance()) {
    delete count_overturningacceleration_;
  }
  if (this != internal_default_instance()) {
    delete count_tooclosettc_;
  }
  if (this != internal_default_instance()) {
    delete count_tooclosedistance_;
  }
  if (this != internal_default_instance()) {
    delete count_overmaxposerror_h_;
  }
  if (this != internal_default_instance()) {
    delete average_poserror_h_;
  }
  if (this != internal_default_instance()) {
    delete max_poserror_h_;
  }
  if (this != internal_default_instance()) {
    delete max_poserror_h_l_;
  }
  if (this != internal_default_instance()) {
    delete max_poserror_h_r_;
  }
  if (this != internal_default_instance()) {
    delete count_crosssolidline_;
  }
  if (this != internal_default_instance()) {
    delete count_ranredlight_;
  }
  if (this != internal_default_instance()) {
    delete reachendpoint_;
  }
  if (this != internal_default_instance()) {
    delete collision_;
  }
}

void Grading_Statistics_Detail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Statistics_Detail::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[14].descriptor;
}

const Grading_Statistics_Detail& Grading_Statistics_Detail::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Statistics_Detail* Grading_Statistics_Detail::New(::google::protobuf::Arena* arena) const {
  Grading_Statistics_Detail* n = new Grading_Statistics_Detail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Statistics_Detail::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.Detail)
  if (GetArenaNoVirtual() == NULL && count_overspeed_ != NULL) {
    delete count_overspeed_;
  }
  count_overspeed_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_overacceleration_ != NULL) {
    delete count_overacceleration_;
  }
  count_overacceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_overdecelleration_ != NULL) {
    delete count_overdecelleration_;
  }
  count_overdecelleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_overturningacceleration_ != NULL) {
    delete count_overturningacceleration_;
  }
  count_overturningacceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_tooclosettc_ != NULL) {
    delete count_tooclosettc_;
  }
  count_tooclosettc_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_tooclosedistance_ != NULL) {
    delete count_tooclosedistance_;
  }
  count_tooclosedistance_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_overmaxposerror_h_ != NULL) {
    delete count_overmaxposerror_h_;
  }
  count_overmaxposerror_h_ = NULL;
  if (GetArenaNoVirtual() == NULL && average_poserror_h_ != NULL) {
    delete average_poserror_h_;
  }
  average_poserror_h_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_poserror_h_ != NULL) {
    delete max_poserror_h_;
  }
  max_poserror_h_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_poserror_h_l_ != NULL) {
    delete max_poserror_h_l_;
  }
  max_poserror_h_l_ = NULL;
  if (GetArenaNoVirtual() == NULL && max_poserror_h_r_ != NULL) {
    delete max_poserror_h_r_;
  }
  max_poserror_h_r_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_crosssolidline_ != NULL) {
    delete count_crosssolidline_;
  }
  count_crosssolidline_ = NULL;
  if (GetArenaNoVirtual() == NULL && count_ranredlight_ != NULL) {
    delete count_ranredlight_;
  }
  count_ranredlight_ = NULL;
  if (GetArenaNoVirtual() == NULL && reachendpoint_ != NULL) {
    delete reachendpoint_;
  }
  reachendpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && collision_ != NULL) {
    delete collision_;
  }
  collision_ = NULL;
}

bool Grading_Statistics_Detail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.Detail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_overspeed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_overacceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_overdecelleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_overturningacceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_tooclosettc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_tooclosedistance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_overmaxposerror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_average_poserror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_poserror_h()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_poserror_h_l()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_max_poserror_h_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_crosssolidline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_count_ranredlight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reachendpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem collision = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_collision()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.Detail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.Detail)
  return false;
#undef DO_
}

void Grading_Statistics_Detail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.Detail)
  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->count_overspeed_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->count_overacceleration_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->count_overdecelleration_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->count_overturningacceleration_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->count_tooclosettc_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->count_tooclosedistance_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->count_overmaxposerror_h_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->average_poserror_h_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->max_poserror_h_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->max_poserror_h_l_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->max_poserror_h_r_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->count_crosssolidline_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->count_ranredlight_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->reachendpoint_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->collision_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.Detail)
}

::google::protobuf::uint8* Grading_Statistics_Detail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.Detail)
  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->count_overspeed_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->count_overacceleration_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->count_overdecelleration_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->count_overturningacceleration_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->count_tooclosettc_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->count_tooclosedistance_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->count_overmaxposerror_h_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->average_poserror_h_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->max_poserror_h_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->max_poserror_h_l_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->max_poserror_h_r_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->count_crosssolidline_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->count_ranredlight_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->reachendpoint_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->collision_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.Detail)
  return target;
}

size_t Grading_Statistics_Detail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.Detail)
  size_t total_size = 0;

  // .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
  if (this->has_count_overspeed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_overspeed_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
  if (this->has_count_overacceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_overacceleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
  if (this->has_count_overdecelleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_overdecelleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
  if (this->has_count_overturningacceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_overturningacceleration_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
  if (this->has_count_tooclosettc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_tooclosettc_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
  if (this->has_count_tooclosedistance()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_tooclosedistance_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
  if (this->has_count_overmaxposerror_h()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_overmaxposerror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
  if (this->has_average_poserror_h()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->average_poserror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
  if (this->has_max_poserror_h()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_poserror_h_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
  if (this->has_max_poserror_h_l()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_poserror_h_l_);
  }

  // .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
  if (this->has_max_poserror_h_r()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->max_poserror_h_r_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
  if (this->has_count_crosssolidline()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_crosssolidline_);
  }

  // .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
  if (this->has_count_ranredlight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->count_ranredlight_);
  }

  // .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
  if (this->has_reachendpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reachendpoint_);
  }

  // .sim_msg.Grading.Statistics.DetailItem collision = 15;
  if (this->has_collision()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->collision_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Statistics_Detail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_Detail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Statistics_Detail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.Detail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.Detail)
    MergeFrom(*source);
  }
}

void Grading_Statistics_Detail::MergeFrom(const Grading_Statistics_Detail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.Detail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_count_overspeed()) {
    mutable_count_overspeed()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overspeed());
  }
  if (from.has_count_overacceleration()) {
    mutable_count_overacceleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overacceleration());
  }
  if (from.has_count_overdecelleration()) {
    mutable_count_overdecelleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overdecelleration());
  }
  if (from.has_count_overturningacceleration()) {
    mutable_count_overturningacceleration()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overturningacceleration());
  }
  if (from.has_count_tooclosettc()) {
    mutable_count_tooclosettc()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_tooclosettc());
  }
  if (from.has_count_tooclosedistance()) {
    mutable_count_tooclosedistance()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_tooclosedistance());
  }
  if (from.has_count_overmaxposerror_h()) {
    mutable_count_overmaxposerror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_overmaxposerror_h());
  }
  if (from.has_average_poserror_h()) {
    mutable_average_poserror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.average_poserror_h());
  }
  if (from.has_max_poserror_h()) {
    mutable_max_poserror_h()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h());
  }
  if (from.has_max_poserror_h_l()) {
    mutable_max_poserror_h_l()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h_l());
  }
  if (from.has_max_poserror_h_r()) {
    mutable_max_poserror_h_r()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.max_poserror_h_r());
  }
  if (from.has_count_crosssolidline()) {
    mutable_count_crosssolidline()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_crosssolidline());
  }
  if (from.has_count_ranredlight()) {
    mutable_count_ranredlight()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.count_ranredlight());
  }
  if (from.has_reachendpoint()) {
    mutable_reachendpoint()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.reachendpoint());
  }
  if (from.has_collision()) {
    mutable_collision()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.collision());
  }
}

void Grading_Statistics_Detail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_Detail::CopyFrom(const Grading_Statistics_Detail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.Detail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_Detail::IsInitialized() const {
  return true;
}

void Grading_Statistics_Detail::Swap(Grading_Statistics_Detail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Statistics_Detail::InternalSwap(Grading_Statistics_Detail* other) {
  std::swap(count_overspeed_, other->count_overspeed_);
  std::swap(count_overacceleration_, other->count_overacceleration_);
  std::swap(count_overdecelleration_, other->count_overdecelleration_);
  std::swap(count_overturningacceleration_, other->count_overturningacceleration_);
  std::swap(count_tooclosettc_, other->count_tooclosettc_);
  std::swap(count_tooclosedistance_, other->count_tooclosedistance_);
  std::swap(count_overmaxposerror_h_, other->count_overmaxposerror_h_);
  std::swap(average_poserror_h_, other->average_poserror_h_);
  std::swap(max_poserror_h_, other->max_poserror_h_);
  std::swap(max_poserror_h_l_, other->max_poserror_h_l_);
  std::swap(max_poserror_h_r_, other->max_poserror_h_r_);
  std::swap(count_crosssolidline_, other->count_crosssolidline_);
  std::swap(count_ranredlight_, other->count_ranredlight_);
  std::swap(reachendpoint_, other->reachendpoint_);
  std::swap(collision_, other->collision_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Statistics_Detail::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Statistics_Detail

// .sim_msg.Grading.Statistics.DetailItem count_overSpeed = 1;
bool Grading_Statistics_Detail::has_count_overspeed() const {
  return this != internal_default_instance() && count_overspeed_ != NULL;
}
void Grading_Statistics_Detail::clear_count_overspeed() {
  if (GetArenaNoVirtual() == NULL && count_overspeed_ != NULL) delete count_overspeed_;
  count_overspeed_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overspeed() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  return count_overspeed_ != NULL ? *count_overspeed_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overspeed() {
  
  if (count_overspeed_ == NULL) {
    count_overspeed_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  return count_overspeed_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overspeed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overSpeed)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overspeed_;
  count_overspeed_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_overspeed(::sim_msg::Grading_Statistics_DetailItem* count_overspeed) {
  delete count_overspeed_;
  count_overspeed_ = count_overspeed;
  if (count_overspeed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overSpeed)
}

// .sim_msg.Grading.Statistics.DetailItem count_overAcceleration = 2;
bool Grading_Statistics_Detail::has_count_overacceleration() const {
  return this != internal_default_instance() && count_overacceleration_ != NULL;
}
void Grading_Statistics_Detail::clear_count_overacceleration() {
  if (GetArenaNoVirtual() == NULL && count_overacceleration_ != NULL) delete count_overacceleration_;
  count_overacceleration_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overacceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  return count_overacceleration_ != NULL ? *count_overacceleration_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overacceleration() {
  
  if (count_overacceleration_ == NULL) {
    count_overacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  return count_overacceleration_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overacceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overacceleration_;
  count_overacceleration_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_overacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overacceleration) {
  delete count_overacceleration_;
  count_overacceleration_ = count_overacceleration;
  if (count_overacceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overAcceleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_overDecelleration = 3;
bool Grading_Statistics_Detail::has_count_overdecelleration() const {
  return this != internal_default_instance() && count_overdecelleration_ != NULL;
}
void Grading_Statistics_Detail::clear_count_overdecelleration() {
  if (GetArenaNoVirtual() == NULL && count_overdecelleration_ != NULL) delete count_overdecelleration_;
  count_overdecelleration_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overdecelleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  return count_overdecelleration_ != NULL ? *count_overdecelleration_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overdecelleration() {
  
  if (count_overdecelleration_ == NULL) {
    count_overdecelleration_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  return count_overdecelleration_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overdecelleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overdecelleration_;
  count_overdecelleration_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_overdecelleration(::sim_msg::Grading_Statistics_DetailItem* count_overdecelleration) {
  delete count_overdecelleration_;
  count_overdecelleration_ = count_overdecelleration;
  if (count_overdecelleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overDecelleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_overTurningAcceleration = 4;
bool Grading_Statistics_Detail::has_count_overturningacceleration() const {
  return this != internal_default_instance() && count_overturningacceleration_ != NULL;
}
void Grading_Statistics_Detail::clear_count_overturningacceleration() {
  if (GetArenaNoVirtual() == NULL && count_overturningacceleration_ != NULL) delete count_overturningacceleration_;
  count_overturningacceleration_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overturningacceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  return count_overturningacceleration_ != NULL ? *count_overturningacceleration_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overturningacceleration() {
  
  if (count_overturningacceleration_ == NULL) {
    count_overturningacceleration_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  return count_overturningacceleration_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overturningacceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overturningacceleration_;
  count_overturningacceleration_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_overturningacceleration(::sim_msg::Grading_Statistics_DetailItem* count_overturningacceleration) {
  delete count_overturningacceleration_;
  count_overturningacceleration_ = count_overturningacceleration;
  if (count_overturningacceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overTurningAcceleration)
}

// .sim_msg.Grading.Statistics.DetailItem count_tooCloseTTC = 5;
bool Grading_Statistics_Detail::has_count_tooclosettc() const {
  return this != internal_default_instance() && count_tooclosettc_ != NULL;
}
void Grading_Statistics_Detail::clear_count_tooclosettc() {
  if (GetArenaNoVirtual() == NULL && count_tooclosettc_ != NULL) delete count_tooclosettc_;
  count_tooclosettc_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_tooclosettc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  return count_tooclosettc_ != NULL ? *count_tooclosettc_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_tooclosettc() {
  
  if (count_tooclosettc_ == NULL) {
    count_tooclosettc_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  return count_tooclosettc_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_tooclosettc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_tooclosettc_;
  count_tooclosettc_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_tooclosettc(::sim_msg::Grading_Statistics_DetailItem* count_tooclosettc) {
  delete count_tooclosettc_;
  count_tooclosettc_ = count_tooclosettc;
  if (count_tooclosettc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_tooCloseTTC)
}

// .sim_msg.Grading.Statistics.DetailItem count_tooCloseDistance = 6;
bool Grading_Statistics_Detail::has_count_tooclosedistance() const {
  return this != internal_default_instance() && count_tooclosedistance_ != NULL;
}
void Grading_Statistics_Detail::clear_count_tooclosedistance() {
  if (GetArenaNoVirtual() == NULL && count_tooclosedistance_ != NULL) delete count_tooclosedistance_;
  count_tooclosedistance_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_tooclosedistance() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  return count_tooclosedistance_ != NULL ? *count_tooclosedistance_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_tooclosedistance() {
  
  if (count_tooclosedistance_ == NULL) {
    count_tooclosedistance_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  return count_tooclosedistance_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_tooclosedistance() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_tooclosedistance_;
  count_tooclosedistance_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_tooclosedistance(::sim_msg::Grading_Statistics_DetailItem* count_tooclosedistance) {
  delete count_tooclosedistance_;
  count_tooclosedistance_ = count_tooclosedistance;
  if (count_tooclosedistance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_tooCloseDistance)
}

// .sim_msg.Grading.Statistics.DetailItem count_overMaxPosError_H = 7;
bool Grading_Statistics_Detail::has_count_overmaxposerror_h() const {
  return this != internal_default_instance() && count_overmaxposerror_h_ != NULL;
}
void Grading_Statistics_Detail::clear_count_overmaxposerror_h() {
  if (GetArenaNoVirtual() == NULL && count_overmaxposerror_h_ != NULL) delete count_overmaxposerror_h_;
  count_overmaxposerror_h_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_overmaxposerror_h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  return count_overmaxposerror_h_ != NULL ? *count_overmaxposerror_h_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_overmaxposerror_h() {
  
  if (count_overmaxposerror_h_ == NULL) {
    count_overmaxposerror_h_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  return count_overmaxposerror_h_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_overmaxposerror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_overmaxposerror_h_;
  count_overmaxposerror_h_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_overmaxposerror_h(::sim_msg::Grading_Statistics_DetailItem* count_overmaxposerror_h) {
  delete count_overmaxposerror_h_;
  count_overmaxposerror_h_ = count_overmaxposerror_h;
  if (count_overmaxposerror_h) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_overMaxPosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem average_PosError_H = 8;
bool Grading_Statistics_Detail::has_average_poserror_h() const {
  return this != internal_default_instance() && average_poserror_h_ != NULL;
}
void Grading_Statistics_Detail::clear_average_poserror_h() {
  if (GetArenaNoVirtual() == NULL && average_poserror_h_ != NULL) delete average_poserror_h_;
  average_poserror_h_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::average_poserror_h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  return average_poserror_h_ != NULL ? *average_poserror_h_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_average_poserror_h() {
  
  if (average_poserror_h_ == NULL) {
    average_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  return average_poserror_h_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_average_poserror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.average_PosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = average_poserror_h_;
  average_poserror_h_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_average_poserror_h(::sim_msg::Grading_Statistics_DetailItem* average_poserror_h) {
  delete average_poserror_h_;
  average_poserror_h_ = average_poserror_h;
  if (average_poserror_h) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.average_PosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H = 9;
bool Grading_Statistics_Detail::has_max_poserror_h() const {
  return this != internal_default_instance() && max_poserror_h_ != NULL;
}
void Grading_Statistics_Detail::clear_max_poserror_h() {
  if (GetArenaNoVirtual() == NULL && max_poserror_h_ != NULL) delete max_poserror_h_;
  max_poserror_h_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  return max_poserror_h_ != NULL ? *max_poserror_h_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h() {
  
  if (max_poserror_h_ == NULL) {
    max_poserror_h_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  return max_poserror_h_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_;
  max_poserror_h_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_max_poserror_h(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h) {
  delete max_poserror_h_;
  max_poserror_h_ = max_poserror_h;
  if (max_poserror_h) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H_L = 10;
bool Grading_Statistics_Detail::has_max_poserror_h_l() const {
  return this != internal_default_instance() && max_poserror_h_l_ != NULL;
}
void Grading_Statistics_Detail::clear_max_poserror_h_l() {
  if (GetArenaNoVirtual() == NULL && max_poserror_h_l_ != NULL) delete max_poserror_h_l_;
  max_poserror_h_l_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h_l() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  return max_poserror_h_l_ != NULL ? *max_poserror_h_l_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h_l() {
  
  if (max_poserror_h_l_ == NULL) {
    max_poserror_h_l_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  return max_poserror_h_l_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h_l() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_l_;
  max_poserror_h_l_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_max_poserror_h_l(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_l) {
  delete max_poserror_h_l_;
  max_poserror_h_l_ = max_poserror_h_l;
  if (max_poserror_h_l) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H_L)
}

// .sim_msg.Grading.Statistics.DetailItem max_PosError_H_R = 11;
bool Grading_Statistics_Detail::has_max_poserror_h_r() const {
  return this != internal_default_instance() && max_poserror_h_r_ != NULL;
}
void Grading_Statistics_Detail::clear_max_poserror_h_r() {
  if (GetArenaNoVirtual() == NULL && max_poserror_h_r_ != NULL) delete max_poserror_h_r_;
  max_poserror_h_r_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::max_poserror_h_r() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  return max_poserror_h_r_ != NULL ? *max_poserror_h_r_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_max_poserror_h_r() {
  
  if (max_poserror_h_r_ == NULL) {
    max_poserror_h_r_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  return max_poserror_h_r_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_max_poserror_h_r() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = max_poserror_h_r_;
  max_poserror_h_r_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_max_poserror_h_r(::sim_msg::Grading_Statistics_DetailItem* max_poserror_h_r) {
  delete max_poserror_h_r_;
  max_poserror_h_r_ = max_poserror_h_r;
  if (max_poserror_h_r) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.max_PosError_H_R)
}

// .sim_msg.Grading.Statistics.DetailItem count_CrossSolidLine = 12;
bool Grading_Statistics_Detail::has_count_crosssolidline() const {
  return this != internal_default_instance() && count_crosssolidline_ != NULL;
}
void Grading_Statistics_Detail::clear_count_crosssolidline() {
  if (GetArenaNoVirtual() == NULL && count_crosssolidline_ != NULL) delete count_crosssolidline_;
  count_crosssolidline_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_crosssolidline() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  return count_crosssolidline_ != NULL ? *count_crosssolidline_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_crosssolidline() {
  
  if (count_crosssolidline_ == NULL) {
    count_crosssolidline_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  return count_crosssolidline_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_crosssolidline() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_crosssolidline_;
  count_crosssolidline_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_crosssolidline(::sim_msg::Grading_Statistics_DetailItem* count_crosssolidline) {
  delete count_crosssolidline_;
  count_crosssolidline_ = count_crosssolidline;
  if (count_crosssolidline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_CrossSolidLine)
}

// .sim_msg.Grading.Statistics.DetailItem count_RanRedLight = 13;
bool Grading_Statistics_Detail::has_count_ranredlight() const {
  return this != internal_default_instance() && count_ranredlight_ != NULL;
}
void Grading_Statistics_Detail::clear_count_ranredlight() {
  if (GetArenaNoVirtual() == NULL && count_ranredlight_ != NULL) delete count_ranredlight_;
  count_ranredlight_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::count_ranredlight() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  return count_ranredlight_ != NULL ? *count_ranredlight_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_count_ranredlight() {
  
  if (count_ranredlight_ == NULL) {
    count_ranredlight_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  return count_ranredlight_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_count_ranredlight() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = count_ranredlight_;
  count_ranredlight_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_count_ranredlight(::sim_msg::Grading_Statistics_DetailItem* count_ranredlight) {
  delete count_ranredlight_;
  count_ranredlight_ = count_ranredlight;
  if (count_ranredlight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.count_RanRedLight)
}

// .sim_msg.Grading.Statistics.DetailItem reachEndPoint = 14;
bool Grading_Statistics_Detail::has_reachendpoint() const {
  return this != internal_default_instance() && reachendpoint_ != NULL;
}
void Grading_Statistics_Detail::clear_reachendpoint() {
  if (GetArenaNoVirtual() == NULL && reachendpoint_ != NULL) delete reachendpoint_;
  reachendpoint_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::reachendpoint() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  return reachendpoint_ != NULL ? *reachendpoint_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_reachendpoint() {
  
  if (reachendpoint_ == NULL) {
    reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  return reachendpoint_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_reachendpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.reachEndPoint)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = reachendpoint_;
  reachendpoint_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* reachendpoint) {
  delete reachendpoint_;
  reachendpoint_ = reachendpoint;
  if (reachendpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.reachEndPoint)
}

// .sim_msg.Grading.Statistics.DetailItem collision = 15;
bool Grading_Statistics_Detail::has_collision() const {
  return this != internal_default_instance() && collision_ != NULL;
}
void Grading_Statistics_Detail::clear_collision() {
  if (GetArenaNoVirtual() == NULL && collision_ != NULL) delete collision_;
  collision_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_Detail::collision() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.Detail.collision)
  return collision_ != NULL ? *collision_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::mutable_collision() {
  
  if (collision_ == NULL) {
    collision_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.Detail.collision)
  return collision_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_Detail::release_collision() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.Detail.collision)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = collision_;
  collision_ = NULL;
  return temp;
}
void Grading_Statistics_Detail::set_allocated_collision(::sim_msg::Grading_Statistics_DetailItem* collision) {
  delete collision_;
  collision_ = collision;
  if (collision) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.Detail.collision)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Statistics_CustomDetail::kCustomReachEndPointFieldNumber;
const int Grading_Statistics_CustomDetail::kCustomMaxPosErrorExceedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Statistics_CustomDetail::Grading_Statistics_CustomDetail()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics.CustomDetail)
}
Grading_Statistics_CustomDetail::Grading_Statistics_CustomDetail(const Grading_Statistics_CustomDetail& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_reachendpoint()) {
    custom_reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.custom_reachendpoint_);
  } else {
    custom_reachendpoint_ = NULL;
  }
  if (from.has_custom_maxposerror_exceed()) {
    custom_maxposerror_exceed_ = new ::sim_msg::Grading_Statistics_DetailItem(*from.custom_maxposerror_exceed_);
  } else {
    custom_maxposerror_exceed_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics.CustomDetail)
}

void Grading_Statistics_CustomDetail::SharedCtor() {
  ::memset(&custom_reachendpoint_, 0, reinterpret_cast<char*>(&custom_maxposerror_exceed_) -
    reinterpret_cast<char*>(&custom_reachendpoint_) + sizeof(custom_maxposerror_exceed_));
  _cached_size_ = 0;
}

Grading_Statistics_CustomDetail::~Grading_Statistics_CustomDetail() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics.CustomDetail)
  SharedDtor();
}

void Grading_Statistics_CustomDetail::SharedDtor() {
  if (this != internal_default_instance()) {
    delete custom_reachendpoint_;
  }
  if (this != internal_default_instance()) {
    delete custom_maxposerror_exceed_;
  }
}

void Grading_Statistics_CustomDetail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Statistics_CustomDetail::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[15].descriptor;
}

const Grading_Statistics_CustomDetail& Grading_Statistics_CustomDetail::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Statistics_CustomDetail* Grading_Statistics_CustomDetail::New(::google::protobuf::Arena* arena) const {
  Grading_Statistics_CustomDetail* n = new Grading_Statistics_CustomDetail;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Statistics_CustomDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics.CustomDetail)
  if (GetArenaNoVirtual() == NULL && custom_reachendpoint_ != NULL) {
    delete custom_reachendpoint_;
  }
  custom_reachendpoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && custom_maxposerror_exceed_ != NULL) {
    delete custom_maxposerror_exceed_;
  }
  custom_maxposerror_exceed_ = NULL;
}

bool Grading_Statistics_CustomDetail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics.CustomDetail)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_reachendpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_maxposerror_exceed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics.CustomDetail)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics.CustomDetail)
  return false;
#undef DO_
}

void Grading_Statistics_CustomDetail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics.CustomDetail)
  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->custom_reachendpoint_, output);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->custom_maxposerror_exceed_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics.CustomDetail)
}

::google::protobuf::uint8* Grading_Statistics_CustomDetail::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics.CustomDetail)
  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->custom_reachendpoint_, false, target);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->custom_maxposerror_exceed_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics.CustomDetail)
  return target;
}

size_t Grading_Statistics_CustomDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics.CustomDetail)
  size_t total_size = 0;

  // .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
  if (this->has_custom_reachendpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->custom_reachendpoint_);
  }

  // .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
  if (this->has_custom_maxposerror_exceed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->custom_maxposerror_exceed_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Statistics_CustomDetail::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics.CustomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics_CustomDetail* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Statistics_CustomDetail>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics.CustomDetail)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics.CustomDetail)
    MergeFrom(*source);
  }
}

void Grading_Statistics_CustomDetail::MergeFrom(const Grading_Statistics_CustomDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics.CustomDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_custom_reachendpoint()) {
    mutable_custom_reachendpoint()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.custom_reachendpoint());
  }
  if (from.has_custom_maxposerror_exceed()) {
    mutable_custom_maxposerror_exceed()->::sim_msg::Grading_Statistics_DetailItem::MergeFrom(from.custom_maxposerror_exceed());
  }
}

void Grading_Statistics_CustomDetail::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics.CustomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics_CustomDetail::CopyFrom(const Grading_Statistics_CustomDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics.CustomDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics_CustomDetail::IsInitialized() const {
  return true;
}

void Grading_Statistics_CustomDetail::Swap(Grading_Statistics_CustomDetail* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Statistics_CustomDetail::InternalSwap(Grading_Statistics_CustomDetail* other) {
  std::swap(custom_reachendpoint_, other->custom_reachendpoint_);
  std::swap(custom_maxposerror_exceed_, other->custom_maxposerror_exceed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Statistics_CustomDetail::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Statistics_CustomDetail

// .sim_msg.Grading.Statistics.DetailItem custom_ReachEndPoint = 1;
bool Grading_Statistics_CustomDetail::has_custom_reachendpoint() const {
  return this != internal_default_instance() && custom_reachendpoint_ != NULL;
}
void Grading_Statistics_CustomDetail::clear_custom_reachendpoint() {
  if (GetArenaNoVirtual() == NULL && custom_reachendpoint_ != NULL) delete custom_reachendpoint_;
  custom_reachendpoint_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_CustomDetail::custom_reachendpoint() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  return custom_reachendpoint_ != NULL ? *custom_reachendpoint_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::mutable_custom_reachendpoint() {
  
  if (custom_reachendpoint_ == NULL) {
    custom_reachendpoint_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  return custom_reachendpoint_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::release_custom_reachendpoint() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = custom_reachendpoint_;
  custom_reachendpoint_ = NULL;
  return temp;
}
void Grading_Statistics_CustomDetail::set_allocated_custom_reachendpoint(::sim_msg::Grading_Statistics_DetailItem* custom_reachendpoint) {
  delete custom_reachendpoint_;
  custom_reachendpoint_ = custom_reachendpoint;
  if (custom_reachendpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.CustomDetail.custom_ReachEndPoint)
}

// .sim_msg.Grading.Statistics.DetailItem custom_maxPosError_Exceed = 2;
bool Grading_Statistics_CustomDetail::has_custom_maxposerror_exceed() const {
  return this != internal_default_instance() && custom_maxposerror_exceed_ != NULL;
}
void Grading_Statistics_CustomDetail::clear_custom_maxposerror_exceed() {
  if (GetArenaNoVirtual() == NULL && custom_maxposerror_exceed_ != NULL) delete custom_maxposerror_exceed_;
  custom_maxposerror_exceed_ = NULL;
}
const ::sim_msg::Grading_Statistics_DetailItem& Grading_Statistics_CustomDetail::custom_maxposerror_exceed() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  return custom_maxposerror_exceed_ != NULL ? *custom_maxposerror_exceed_
                         : *::sim_msg::Grading_Statistics_DetailItem::internal_default_instance();
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::mutable_custom_maxposerror_exceed() {
  
  if (custom_maxposerror_exceed_ == NULL) {
    custom_maxposerror_exceed_ = new ::sim_msg::Grading_Statistics_DetailItem;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  return custom_maxposerror_exceed_;
}
::sim_msg::Grading_Statistics_DetailItem* Grading_Statistics_CustomDetail::release_custom_maxposerror_exceed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
  
  ::sim_msg::Grading_Statistics_DetailItem* temp = custom_maxposerror_exceed_;
  custom_maxposerror_exceed_ = NULL;
  return temp;
}
void Grading_Statistics_CustomDetail::set_allocated_custom_maxposerror_exceed(::sim_msg::Grading_Statistics_DetailItem* custom_maxposerror_exceed) {
  delete custom_maxposerror_exceed_;
  custom_maxposerror_exceed_ = custom_maxposerror_exceed;
  if (custom_maxposerror_exceed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.CustomDetail.custom_maxPosError_Exceed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading_Statistics::kSceneNameFieldNumber;
const int Grading_Statistics::kReportDateFieldNumber;
const int Grading_Statistics::kIsPassFieldNumber;
const int Grading_Statistics::kTotalTimeFieldNumber;
const int Grading_Statistics::kTotalMilleageFieldNumber;
const int Grading_Statistics::kIsTimeoutFieldNumber;
const int Grading_Statistics::kGradingXmlFieldNumber;
const int Grading_Statistics::kDetailFieldNumber;
const int Grading_Statistics::kCustomDetailFieldNumber;
const int Grading_Statistics::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading_Statistics::Grading_Statistics()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading.Statistics)
}
Grading_Statistics::Grading_Statistics(const Grading_Statistics& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.scene_name().size() > 0) {
    scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  report_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.report_date().size() > 0) {
    report_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_date_);
  }
  grading_xml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.grading_xml().size() > 0) {
    grading_xml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grading_xml_);
  }
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.reason().size() > 0) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_detail()) {
    detail_ = new ::sim_msg::Grading_Statistics_Detail(*from.detail_);
  } else {
    detail_ = NULL;
  }
  if (from.has_custom_detail()) {
    custom_detail_ = new ::sim_msg::Grading_Statistics_CustomDetail(*from.custom_detail_);
  } else {
    custom_detail_ = NULL;
  }
  ::memcpy(&total_time_, &from.total_time_,
    reinterpret_cast<char*>(&is_timeout_) -
    reinterpret_cast<char*>(&total_time_) + sizeof(is_timeout_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading.Statistics)
}

void Grading_Statistics::SharedCtor() {
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grading_xml_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&detail_, 0, reinterpret_cast<char*>(&is_timeout_) -
    reinterpret_cast<char*>(&detail_) + sizeof(is_timeout_));
  _cached_size_ = 0;
}

Grading_Statistics::~Grading_Statistics() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading.Statistics)
  SharedDtor();
}

void Grading_Statistics::SharedDtor() {
  scene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grading_xml_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete detail_;
  }
  if (this != internal_default_instance()) {
    delete custom_detail_;
  }
}

void Grading_Statistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading_Statistics::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[16].descriptor;
}

const Grading_Statistics& Grading_Statistics::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading_Statistics* Grading_Statistics::New(::google::protobuf::Arena* arena) const {
  Grading_Statistics* n = new Grading_Statistics;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading_Statistics::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading.Statistics)
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  report_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  grading_xml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) {
    delete detail_;
  }
  detail_ = NULL;
  if (GetArenaNoVirtual() == NULL && custom_detail_ != NULL) {
    delete custom_detail_;
  }
  custom_detail_ = NULL;
  ::memset(&total_time_, 0, reinterpret_cast<char*>(&is_timeout_) -
    reinterpret_cast<char*>(&total_time_) + sizeof(is_timeout_));
}

bool Grading_Statistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading.Statistics)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string scene_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->scene_name().data(), this->scene_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.scene_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string report_date = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->report_date().data(), this->report_date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.report_date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_pass = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_time = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double total_milleage = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_milleage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_timeout = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_timeout_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string grading_xml = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_grading_xml()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->grading_xml().data(), this->grading_xml().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.grading_xml"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.Detail detail = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_custom_detail()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string reason = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "sim_msg.Grading.Statistics.reason"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading.Statistics)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading.Statistics)
  return false;
#undef DO_
}

void Grading_Statistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading.Statistics)
  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->scene_name(), output);
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_date().data(), this->report_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.report_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->report_date(), output);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_pass(), output);
  }

  // double total_time = 4;
  if (this->total_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->total_time(), output);
  }

  // double total_milleage = 5;
  if (this->total_milleage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->total_milleage(), output);
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->is_timeout(), output);
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grading_xml().data(), this->grading_xml().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.grading_xml");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->grading_xml(), output);
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->detail_, output);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->custom_detail_, output);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.reason");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reason(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading.Statistics)
}

::google::protobuf::uint8* Grading_Statistics::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading.Statistics)
  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->scene_name().data(), this->scene_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->scene_name(), target);
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->report_date().data(), this->report_date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.report_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->report_date(), target);
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_pass(), target);
  }

  // double total_time = 4;
  if (this->total_time() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->total_time(), target);
  }

  // double total_milleage = 5;
  if (this->total_milleage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->total_milleage(), target);
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->is_timeout(), target);
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->grading_xml().data(), this->grading_xml().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.grading_xml");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->grading_xml(), target);
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->detail_, false, target);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->custom_detail_, false, target);
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "sim_msg.Grading.Statistics.reason");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->reason(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading.Statistics)
  return target;
}

size_t Grading_Statistics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading.Statistics)
  size_t total_size = 0;

  // string scene_name = 1;
  if (this->scene_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->scene_name());
  }

  // string report_date = 2;
  if (this->report_date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->report_date());
  }

  // string grading_xml = 7;
  if (this->grading_xml().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->grading_xml());
  }

  // string reason = 10;
  if (this->reason().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->reason());
  }

  // .sim_msg.Grading.Statistics.Detail detail = 8;
  if (this->has_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->detail_);
  }

  // .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
  if (this->has_custom_detail()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->custom_detail_);
  }

  // double total_time = 4;
  if (this->total_time() != 0) {
    total_size += 1 + 8;
  }

  // double total_milleage = 5;
  if (this->total_milleage() != 0) {
    total_size += 1 + 8;
  }

  // bool is_pass = 3;
  if (this->is_pass() != 0) {
    total_size += 1 + 1;
  }

  // bool is_timeout = 6;
  if (this->is_timeout() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading_Statistics::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading_Statistics* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading_Statistics>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading.Statistics)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading.Statistics)
    MergeFrom(*source);
  }
}

void Grading_Statistics::MergeFrom(const Grading_Statistics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading.Statistics)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.scene_name().size() > 0) {

    scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  if (from.report_date().size() > 0) {

    report_date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.report_date_);
  }
  if (from.grading_xml().size() > 0) {

    grading_xml_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.grading_xml_);
  }
  if (from.reason().size() > 0) {

    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  if (from.has_detail()) {
    mutable_detail()->::sim_msg::Grading_Statistics_Detail::MergeFrom(from.detail());
  }
  if (from.has_custom_detail()) {
    mutable_custom_detail()->::sim_msg::Grading_Statistics_CustomDetail::MergeFrom(from.custom_detail());
  }
  if (from.total_time() != 0) {
    set_total_time(from.total_time());
  }
  if (from.total_milleage() != 0) {
    set_total_milleage(from.total_milleage());
  }
  if (from.is_pass() != 0) {
    set_is_pass(from.is_pass());
  }
  if (from.is_timeout() != 0) {
    set_is_timeout(from.is_timeout());
  }
}

void Grading_Statistics::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading_Statistics::CopyFrom(const Grading_Statistics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading.Statistics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading_Statistics::IsInitialized() const {
  return true;
}

void Grading_Statistics::Swap(Grading_Statistics* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading_Statistics::InternalSwap(Grading_Statistics* other) {
  scene_name_.Swap(&other->scene_name_);
  report_date_.Swap(&other->report_date_);
  grading_xml_.Swap(&other->grading_xml_);
  reason_.Swap(&other->reason_);
  std::swap(detail_, other->detail_);
  std::swap(custom_detail_, other->custom_detail_);
  std::swap(total_time_, other->total_time_);
  std::swap(total_milleage_, other->total_milleage_);
  std::swap(is_pass_, other->is_pass_);
  std::swap(is_timeout_, other->is_timeout_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading_Statistics::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading_Statistics

// string scene_name = 1;
void Grading_Statistics::clear_scene_name() {
  scene_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Grading_Statistics::scene_name() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.scene_name)
  return scene_name_.GetNoArena();
}
void Grading_Statistics::set_scene_name(const ::std::string& value) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.scene_name)
}
#if LANG_CXX11
void Grading_Statistics::set_scene_name(::std::string&& value) {
  
  scene_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.scene_name)
}
#endif
void Grading_Statistics::set_scene_name(const char* value) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.scene_name)
}
void Grading_Statistics::set_scene_name(const char* value, size_t size) {
  
  scene_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.scene_name)
}
::std::string* Grading_Statistics::mutable_scene_name() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.scene_name)
  return scene_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Grading_Statistics::release_scene_name() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.scene_name)
  
  return scene_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Grading_Statistics::set_allocated_scene_name(::std::string* scene_name) {
  if (scene_name != NULL) {
    
  } else {
    
  }
  scene_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scene_name);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.scene_name)
}

// string report_date = 2;
void Grading_Statistics::clear_report_date() {
  report_date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Grading_Statistics::report_date() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.report_date)
  return report_date_.GetNoArena();
}
void Grading_Statistics::set_report_date(const ::std::string& value) {
  
  report_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.report_date)
}
#if LANG_CXX11
void Grading_Statistics::set_report_date(::std::string&& value) {
  
  report_date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.report_date)
}
#endif
void Grading_Statistics::set_report_date(const char* value) {
  
  report_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.report_date)
}
void Grading_Statistics::set_report_date(const char* value, size_t size) {
  
  report_date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.report_date)
}
::std::string* Grading_Statistics::mutable_report_date() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.report_date)
  return report_date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Grading_Statistics::release_report_date() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.report_date)
  
  return report_date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Grading_Statistics::set_allocated_report_date(::std::string* report_date) {
  if (report_date != NULL) {
    
  } else {
    
  }
  report_date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), report_date);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.report_date)
}

// bool is_pass = 3;
void Grading_Statistics::clear_is_pass() {
  is_pass_ = false;
}
bool Grading_Statistics::is_pass() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.is_pass)
  return is_pass_;
}
void Grading_Statistics::set_is_pass(bool value) {
  
  is_pass_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.is_pass)
}

// double total_time = 4;
void Grading_Statistics::clear_total_time() {
  total_time_ = 0;
}
double Grading_Statistics::total_time() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.total_time)
  return total_time_;
}
void Grading_Statistics::set_total_time(double value) {
  
  total_time_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.total_time)
}

// double total_milleage = 5;
void Grading_Statistics::clear_total_milleage() {
  total_milleage_ = 0;
}
double Grading_Statistics::total_milleage() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.total_milleage)
  return total_milleage_;
}
void Grading_Statistics::set_total_milleage(double value) {
  
  total_milleage_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.total_milleage)
}

// bool is_timeout = 6;
void Grading_Statistics::clear_is_timeout() {
  is_timeout_ = false;
}
bool Grading_Statistics::is_timeout() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.is_timeout)
  return is_timeout_;
}
void Grading_Statistics::set_is_timeout(bool value) {
  
  is_timeout_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.is_timeout)
}

// string grading_xml = 7;
void Grading_Statistics::clear_grading_xml() {
  grading_xml_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Grading_Statistics::grading_xml() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.grading_xml)
  return grading_xml_.GetNoArena();
}
void Grading_Statistics::set_grading_xml(const ::std::string& value) {
  
  grading_xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.grading_xml)
}
#if LANG_CXX11
void Grading_Statistics::set_grading_xml(::std::string&& value) {
  
  grading_xml_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.grading_xml)
}
#endif
void Grading_Statistics::set_grading_xml(const char* value) {
  
  grading_xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.grading_xml)
}
void Grading_Statistics::set_grading_xml(const char* value, size_t size) {
  
  grading_xml_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.grading_xml)
}
::std::string* Grading_Statistics::mutable_grading_xml() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.grading_xml)
  return grading_xml_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Grading_Statistics::release_grading_xml() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.grading_xml)
  
  return grading_xml_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Grading_Statistics::set_allocated_grading_xml(::std::string* grading_xml) {
  if (grading_xml != NULL) {
    
  } else {
    
  }
  grading_xml_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), grading_xml);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.grading_xml)
}

// .sim_msg.Grading.Statistics.Detail detail = 8;
bool Grading_Statistics::has_detail() const {
  return this != internal_default_instance() && detail_ != NULL;
}
void Grading_Statistics::clear_detail() {
  if (GetArenaNoVirtual() == NULL && detail_ != NULL) delete detail_;
  detail_ = NULL;
}
const ::sim_msg::Grading_Statistics_Detail& Grading_Statistics::detail() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.detail)
  return detail_ != NULL ? *detail_
                         : *::sim_msg::Grading_Statistics_Detail::internal_default_instance();
}
::sim_msg::Grading_Statistics_Detail* Grading_Statistics::mutable_detail() {
  
  if (detail_ == NULL) {
    detail_ = new ::sim_msg::Grading_Statistics_Detail;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.detail)
  return detail_;
}
::sim_msg::Grading_Statistics_Detail* Grading_Statistics::release_detail() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.detail)
  
  ::sim_msg::Grading_Statistics_Detail* temp = detail_;
  detail_ = NULL;
  return temp;
}
void Grading_Statistics::set_allocated_detail(::sim_msg::Grading_Statistics_Detail* detail) {
  delete detail_;
  detail_ = detail;
  if (detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.detail)
}

// .sim_msg.Grading.Statistics.CustomDetail custom_detail = 9;
bool Grading_Statistics::has_custom_detail() const {
  return this != internal_default_instance() && custom_detail_ != NULL;
}
void Grading_Statistics::clear_custom_detail() {
  if (GetArenaNoVirtual() == NULL && custom_detail_ != NULL) delete custom_detail_;
  custom_detail_ = NULL;
}
const ::sim_msg::Grading_Statistics_CustomDetail& Grading_Statistics::custom_detail() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.custom_detail)
  return custom_detail_ != NULL ? *custom_detail_
                         : *::sim_msg::Grading_Statistics_CustomDetail::internal_default_instance();
}
::sim_msg::Grading_Statistics_CustomDetail* Grading_Statistics::mutable_custom_detail() {
  
  if (custom_detail_ == NULL) {
    custom_detail_ = new ::sim_msg::Grading_Statistics_CustomDetail;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.custom_detail)
  return custom_detail_;
}
::sim_msg::Grading_Statistics_CustomDetail* Grading_Statistics::release_custom_detail() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.custom_detail)
  
  ::sim_msg::Grading_Statistics_CustomDetail* temp = custom_detail_;
  custom_detail_ = NULL;
  return temp;
}
void Grading_Statistics::set_allocated_custom_detail(::sim_msg::Grading_Statistics_CustomDetail* custom_detail) {
  delete custom_detail_;
  custom_detail_ = custom_detail;
  if (custom_detail) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.custom_detail)
}

// string reason = 10;
void Grading_Statistics::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Grading_Statistics::reason() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.Statistics.reason)
  return reason_.GetNoArena();
}
void Grading_Statistics::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:sim_msg.Grading.Statistics.reason)
}
#if LANG_CXX11
void Grading_Statistics::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:sim_msg.Grading.Statistics.reason)
}
#endif
void Grading_Statistics::set_reason(const char* value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:sim_msg.Grading.Statistics.reason)
}
void Grading_Statistics::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:sim_msg.Grading.Statistics.reason)
}
::std::string* Grading_Statistics::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.Statistics.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Grading_Statistics::release_reason() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.Statistics.reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Grading_Statistics::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.Statistics.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grading::kSpeedFieldNumber;
const int Grading::kAccelerationFieldNumber;
const int Grading::kCollisionFieldNumber;
const int Grading::kTimeHeadwayFieldNumber;
const int Grading::kAlgorithmFieldNumber;
const int Grading::kLaneFieldNumber;
const int Grading::kTrafficeLightFieldNumber;
const int Grading::kTimeStampFieldNumber;
const int Grading::kMileageFieldNumber;
const int Grading::kExpDataFieldNumber;
const int Grading::kDistHeadwayFieldNumber;
const int Grading::kControlFieldNumber;
const int Grading::kPlanningFieldNumber;
const int Grading::kLateralAccFieldNumber;
const int Grading::kDecAccFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grading::Grading()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_grading_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Grading)
}
Grading::Grading(const Grading& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      collision_(from.collision_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_speed()) {
    speed_ = new ::sim_msg::Grading_Speed(*from.speed_);
  } else {
    speed_ = NULL;
  }
  if (from.has_acceleration()) {
    acceleration_ = new ::sim_msg::Grading_Acceleration(*from.acceleration_);
  } else {
    acceleration_ = NULL;
  }
  if (from.has_timeheadway()) {
    timeheadway_ = new ::sim_msg::Grading_TimeHeadway(*from.timeheadway_);
  } else {
    timeheadway_ = NULL;
  }
  if (from.has_algorithm()) {
    algorithm_ = new ::sim_msg::Grading_Algorithm(*from.algorithm_);
  } else {
    algorithm_ = NULL;
  }
  if (from.has_lane()) {
    lane_ = new ::sim_msg::Grading_Lane(*from.lane_);
  } else {
    lane_ = NULL;
  }
  if (from.has_trafficelight()) {
    trafficelight_ = new ::sim_msg::Grading_TrafficLight(*from.trafficelight_);
  } else {
    trafficelight_ = NULL;
  }
  if (from.has_timestamp()) {
    timestamp_ = new ::sim_msg::Grading_TimeStamp(*from.timestamp_);
  } else {
    timestamp_ = NULL;
  }
  if (from.has_expdata()) {
    expdata_ = new ::sim_msg::Grading_ExpData(*from.expdata_);
  } else {
    expdata_ = NULL;
  }
  if (from.has_distheadway()) {
    distheadway_ = new ::sim_msg::Grading_DistHeadway(*from.distheadway_);
  } else {
    distheadway_ = NULL;
  }
  if (from.has_control()) {
    control_ = new ::sim_msg::Grading_Control(*from.control_);
  } else {
    control_ = NULL;
  }
  if (from.has_planning()) {
    planning_ = new ::sim_msg::Grading_Planning(*from.planning_);
  } else {
    planning_ = NULL;
  }
  if (from.has_lateral_acc()) {
    lateral_acc_ = new ::sim_msg::Grading_Acceleration(*from.lateral_acc_);
  } else {
    lateral_acc_ = NULL;
  }
  if (from.has_dec_acc()) {
    dec_acc_ = new ::sim_msg::Grading_Acceleration(*from.dec_acc_);
  } else {
    dec_acc_ = NULL;
  }
  mileage_ = from.mileage_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Grading)
}

void Grading::SharedCtor() {
  ::memset(&speed_, 0, reinterpret_cast<char*>(&mileage_) -
    reinterpret_cast<char*>(&speed_) + sizeof(mileage_));
  _cached_size_ = 0;
}

Grading::~Grading() {
  // @@protoc_insertion_point(destructor:sim_msg.Grading)
  SharedDtor();
}

void Grading::SharedDtor() {
  if (this != internal_default_instance()) {
    delete speed_;
  }
  if (this != internal_default_instance()) {
    delete acceleration_;
  }
  if (this != internal_default_instance()) {
    delete timeheadway_;
  }
  if (this != internal_default_instance()) {
    delete algorithm_;
  }
  if (this != internal_default_instance()) {
    delete lane_;
  }
  if (this != internal_default_instance()) {
    delete trafficelight_;
  }
  if (this != internal_default_instance()) {
    delete timestamp_;
  }
  if (this != internal_default_instance()) {
    delete expdata_;
  }
  if (this != internal_default_instance()) {
    delete distheadway_;
  }
  if (this != internal_default_instance()) {
    delete control_;
  }
  if (this != internal_default_instance()) {
    delete planning_;
  }
  if (this != internal_default_instance()) {
    delete lateral_acc_;
  }
  if (this != internal_default_instance()) {
    delete dec_acc_;
  }
}

void Grading::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Grading::descriptor() {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[17].descriptor;
}

const Grading& Grading::default_instance() {
  protobuf_grading_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grading* Grading::New(::google::protobuf::Arena* arena) const {
  Grading* n = new Grading;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grading::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Grading)
  collision_.Clear();
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) {
    delete speed_;
  }
  speed_ = NULL;
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) {
    delete acceleration_;
  }
  acceleration_ = NULL;
  if (GetArenaNoVirtual() == NULL && timeheadway_ != NULL) {
    delete timeheadway_;
  }
  timeheadway_ = NULL;
  if (GetArenaNoVirtual() == NULL && algorithm_ != NULL) {
    delete algorithm_;
  }
  algorithm_ = NULL;
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) {
    delete lane_;
  }
  lane_ = NULL;
  if (GetArenaNoVirtual() == NULL && trafficelight_ != NULL) {
    delete trafficelight_;
  }
  trafficelight_ = NULL;
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) {
    delete timestamp_;
  }
  timestamp_ = NULL;
  if (GetArenaNoVirtual() == NULL && expdata_ != NULL) {
    delete expdata_;
  }
  expdata_ = NULL;
  if (GetArenaNoVirtual() == NULL && distheadway_ != NULL) {
    delete distheadway_;
  }
  distheadway_ = NULL;
  if (GetArenaNoVirtual() == NULL && control_ != NULL) {
    delete control_;
  }
  control_ = NULL;
  if (GetArenaNoVirtual() == NULL && planning_ != NULL) {
    delete planning_;
  }
  planning_ = NULL;
  if (GetArenaNoVirtual() == NULL && lateral_acc_ != NULL) {
    delete lateral_acc_;
  }
  lateral_acc_ = NULL;
  if (GetArenaNoVirtual() == NULL && dec_acc_ != NULL) {
    delete dec_acc_;
  }
  dec_acc_ = NULL;
  mileage_ = 0;
}

bool Grading::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Grading)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Grading.Speed speed = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_speed()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration acceleration = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acceleration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Grading.Collision collision = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_collision()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timeheadway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Algorithm algorithm = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_algorithm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Lane lane = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.TrafficLight trafficeLight = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trafficelight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.TimeStamp timeStamp = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double mileage = 9;
      case 9: {
        if (tag == 73u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mileage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.ExpData expData = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_expdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.DistHeadway distHeadway = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_distheadway()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Control control = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Planning planning = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_planning()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration lateral_acc = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lateral_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Grading.Acceleration dec_acc = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dec_acc()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Grading)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Grading)
  return false;
#undef DO_
}

void Grading::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Grading)
  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->speed_, output);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->acceleration_, output);
  }

  // repeated .sim_msg.Grading.Collision collision = 3;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->collision(i), output);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->timeheadway_, output);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->algorithm_, output);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->lane_, output);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->trafficelight_, output);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->timestamp_, output);
  }

  // double mileage = 9;
  if (this->mileage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->mileage(), output);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->expdata_, output);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->distheadway_, output);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->control_, output);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->planning_, output);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->lateral_acc_, output);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->dec_acc_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Grading)
}

::google::protobuf::uint8* Grading::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Grading)
  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->speed_, false, target);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->acceleration_, false, target);
  }

  // repeated .sim_msg.Grading.Collision collision = 3;
  for (unsigned int i = 0, n = this->collision_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->collision(i), false, target);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->timeheadway_, false, target);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->algorithm_, false, target);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->lane_, false, target);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->trafficelight_, false, target);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->timestamp_, false, target);
  }

  // double mileage = 9;
  if (this->mileage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->mileage(), target);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->expdata_, false, target);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->distheadway_, false, target);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->control_, false, target);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->planning_, false, target);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->lateral_acc_, false, target);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->dec_acc_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Grading)
  return target;
}

size_t Grading::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Grading)
  size_t total_size = 0;

  // repeated .sim_msg.Grading.Collision collision = 3;
  {
    unsigned int count = this->collision_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->collision(i));
    }
  }

  // .sim_msg.Grading.Speed speed = 1;
  if (this->has_speed()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->speed_);
  }

  // .sim_msg.Grading.Acceleration acceleration = 2;
  if (this->has_acceleration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acceleration_);
  }

  // .sim_msg.Grading.TimeHeadway timeHeadway = 4;
  if (this->has_timeheadway()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timeheadway_);
  }

  // .sim_msg.Grading.Algorithm algorithm = 5;
  if (this->has_algorithm()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->algorithm_);
  }

  // .sim_msg.Grading.Lane lane = 6;
  if (this->has_lane()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lane_);
  }

  // .sim_msg.Grading.TrafficLight trafficeLight = 7;
  if (this->has_trafficelight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->trafficelight_);
  }

  // .sim_msg.Grading.TimeStamp timeStamp = 8;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  // .sim_msg.Grading.ExpData expData = 10;
  if (this->has_expdata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->expdata_);
  }

  // .sim_msg.Grading.DistHeadway distHeadway = 11;
  if (this->has_distheadway()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->distheadway_);
  }

  // .sim_msg.Grading.Control control = 12;
  if (this->has_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->control_);
  }

  // .sim_msg.Grading.Planning planning = 13;
  if (this->has_planning()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->planning_);
  }

  // .sim_msg.Grading.Acceleration lateral_acc = 14;
  if (this->has_lateral_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->lateral_acc_);
  }

  // .sim_msg.Grading.Acceleration dec_acc = 15;
  if (this->has_dec_acc()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->dec_acc_);
  }

  // double mileage = 9;
  if (this->mileage() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grading::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Grading)
  GOOGLE_DCHECK_NE(&from, this);
  const Grading* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Grading>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Grading)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Grading)
    MergeFrom(*source);
  }
}

void Grading::MergeFrom(const Grading& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Grading)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  collision_.MergeFrom(from.collision_);
  if (from.has_speed()) {
    mutable_speed()->::sim_msg::Grading_Speed::MergeFrom(from.speed());
  }
  if (from.has_acceleration()) {
    mutable_acceleration()->::sim_msg::Grading_Acceleration::MergeFrom(from.acceleration());
  }
  if (from.has_timeheadway()) {
    mutable_timeheadway()->::sim_msg::Grading_TimeHeadway::MergeFrom(from.timeheadway());
  }
  if (from.has_algorithm()) {
    mutable_algorithm()->::sim_msg::Grading_Algorithm::MergeFrom(from.algorithm());
  }
  if (from.has_lane()) {
    mutable_lane()->::sim_msg::Grading_Lane::MergeFrom(from.lane());
  }
  if (from.has_trafficelight()) {
    mutable_trafficelight()->::sim_msg::Grading_TrafficLight::MergeFrom(from.trafficelight());
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::sim_msg::Grading_TimeStamp::MergeFrom(from.timestamp());
  }
  if (from.has_expdata()) {
    mutable_expdata()->::sim_msg::Grading_ExpData::MergeFrom(from.expdata());
  }
  if (from.has_distheadway()) {
    mutable_distheadway()->::sim_msg::Grading_DistHeadway::MergeFrom(from.distheadway());
  }
  if (from.has_control()) {
    mutable_control()->::sim_msg::Grading_Control::MergeFrom(from.control());
  }
  if (from.has_planning()) {
    mutable_planning()->::sim_msg::Grading_Planning::MergeFrom(from.planning());
  }
  if (from.has_lateral_acc()) {
    mutable_lateral_acc()->::sim_msg::Grading_Acceleration::MergeFrom(from.lateral_acc());
  }
  if (from.has_dec_acc()) {
    mutable_dec_acc()->::sim_msg::Grading_Acceleration::MergeFrom(from.dec_acc());
  }
  if (from.mileage() != 0) {
    set_mileage(from.mileage());
  }
}

void Grading::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Grading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grading::CopyFrom(const Grading& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Grading)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grading::IsInitialized() const {
  return true;
}

void Grading::Swap(Grading* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grading::InternalSwap(Grading* other) {
  collision_.UnsafeArenaSwap(&other->collision_);
  std::swap(speed_, other->speed_);
  std::swap(acceleration_, other->acceleration_);
  std::swap(timeheadway_, other->timeheadway_);
  std::swap(algorithm_, other->algorithm_);
  std::swap(lane_, other->lane_);
  std::swap(trafficelight_, other->trafficelight_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(expdata_, other->expdata_);
  std::swap(distheadway_, other->distheadway_);
  std::swap(control_, other->control_);
  std::swap(planning_, other->planning_);
  std::swap(lateral_acc_, other->lateral_acc_);
  std::swap(dec_acc_, other->dec_acc_);
  std::swap(mileage_, other->mileage_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Grading::GetMetadata() const {
  protobuf_grading_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_grading_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grading

// .sim_msg.Grading.Speed speed = 1;
bool Grading::has_speed() const {
  return this != internal_default_instance() && speed_ != NULL;
}
void Grading::clear_speed() {
  if (GetArenaNoVirtual() == NULL && speed_ != NULL) delete speed_;
  speed_ = NULL;
}
const ::sim_msg::Grading_Speed& Grading::speed() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.speed)
  return speed_ != NULL ? *speed_
                         : *::sim_msg::Grading_Speed::internal_default_instance();
}
::sim_msg::Grading_Speed* Grading::mutable_speed() {
  
  if (speed_ == NULL) {
    speed_ = new ::sim_msg::Grading_Speed;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.speed)
  return speed_;
}
::sim_msg::Grading_Speed* Grading::release_speed() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.speed)
  
  ::sim_msg::Grading_Speed* temp = speed_;
  speed_ = NULL;
  return temp;
}
void Grading::set_allocated_speed(::sim_msg::Grading_Speed* speed) {
  delete speed_;
  speed_ = speed;
  if (speed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.speed)
}

// .sim_msg.Grading.Acceleration acceleration = 2;
bool Grading::has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != NULL;
}
void Grading::clear_acceleration() {
  if (GetArenaNoVirtual() == NULL && acceleration_ != NULL) delete acceleration_;
  acceleration_ = NULL;
}
const ::sim_msg::Grading_Acceleration& Grading::acceleration() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.acceleration)
  return acceleration_ != NULL ? *acceleration_
                         : *::sim_msg::Grading_Acceleration::internal_default_instance();
}
::sim_msg::Grading_Acceleration* Grading::mutable_acceleration() {
  
  if (acceleration_ == NULL) {
    acceleration_ = new ::sim_msg::Grading_Acceleration;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.acceleration)
  return acceleration_;
}
::sim_msg::Grading_Acceleration* Grading::release_acceleration() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.acceleration)
  
  ::sim_msg::Grading_Acceleration* temp = acceleration_;
  acceleration_ = NULL;
  return temp;
}
void Grading::set_allocated_acceleration(::sim_msg::Grading_Acceleration* acceleration) {
  delete acceleration_;
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.acceleration)
}

// repeated .sim_msg.Grading.Collision collision = 3;
int Grading::collision_size() const {
  return collision_.size();
}
void Grading::clear_collision() {
  collision_.Clear();
}
const ::sim_msg::Grading_Collision& Grading::collision(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.collision)
  return collision_.Get(index);
}
::sim_msg::Grading_Collision* Grading::mutable_collision(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.collision)
  return collision_.Mutable(index);
}
::sim_msg::Grading_Collision* Grading::add_collision() {
  // @@protoc_insertion_point(field_add:sim_msg.Grading.collision)
  return collision_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_Collision >*
Grading::mutable_collision() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Grading.collision)
  return &collision_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Grading_Collision >&
Grading::collision() const {
  // @@protoc_insertion_point(field_list:sim_msg.Grading.collision)
  return collision_;
}

// .sim_msg.Grading.TimeHeadway timeHeadway = 4;
bool Grading::has_timeheadway() const {
  return this != internal_default_instance() && timeheadway_ != NULL;
}
void Grading::clear_timeheadway() {
  if (GetArenaNoVirtual() == NULL && timeheadway_ != NULL) delete timeheadway_;
  timeheadway_ = NULL;
}
const ::sim_msg::Grading_TimeHeadway& Grading::timeheadway() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.timeHeadway)
  return timeheadway_ != NULL ? *timeheadway_
                         : *::sim_msg::Grading_TimeHeadway::internal_default_instance();
}
::sim_msg::Grading_TimeHeadway* Grading::mutable_timeheadway() {
  
  if (timeheadway_ == NULL) {
    timeheadway_ = new ::sim_msg::Grading_TimeHeadway;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.timeHeadway)
  return timeheadway_;
}
::sim_msg::Grading_TimeHeadway* Grading::release_timeheadway() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.timeHeadway)
  
  ::sim_msg::Grading_TimeHeadway* temp = timeheadway_;
  timeheadway_ = NULL;
  return temp;
}
void Grading::set_allocated_timeheadway(::sim_msg::Grading_TimeHeadway* timeheadway) {
  delete timeheadway_;
  timeheadway_ = timeheadway;
  if (timeheadway) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.timeHeadway)
}

// .sim_msg.Grading.Algorithm algorithm = 5;
bool Grading::has_algorithm() const {
  return this != internal_default_instance() && algorithm_ != NULL;
}
void Grading::clear_algorithm() {
  if (GetArenaNoVirtual() == NULL && algorithm_ != NULL) delete algorithm_;
  algorithm_ = NULL;
}
const ::sim_msg::Grading_Algorithm& Grading::algorithm() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.algorithm)
  return algorithm_ != NULL ? *algorithm_
                         : *::sim_msg::Grading_Algorithm::internal_default_instance();
}
::sim_msg::Grading_Algorithm* Grading::mutable_algorithm() {
  
  if (algorithm_ == NULL) {
    algorithm_ = new ::sim_msg::Grading_Algorithm;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.algorithm)
  return algorithm_;
}
::sim_msg::Grading_Algorithm* Grading::release_algorithm() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.algorithm)
  
  ::sim_msg::Grading_Algorithm* temp = algorithm_;
  algorithm_ = NULL;
  return temp;
}
void Grading::set_allocated_algorithm(::sim_msg::Grading_Algorithm* algorithm) {
  delete algorithm_;
  algorithm_ = algorithm;
  if (algorithm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.algorithm)
}

// .sim_msg.Grading.Lane lane = 6;
bool Grading::has_lane() const {
  return this != internal_default_instance() && lane_ != NULL;
}
void Grading::clear_lane() {
  if (GetArenaNoVirtual() == NULL && lane_ != NULL) delete lane_;
  lane_ = NULL;
}
const ::sim_msg::Grading_Lane& Grading::lane() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.lane)
  return lane_ != NULL ? *lane_
                         : *::sim_msg::Grading_Lane::internal_default_instance();
}
::sim_msg::Grading_Lane* Grading::mutable_lane() {
  
  if (lane_ == NULL) {
    lane_ = new ::sim_msg::Grading_Lane;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.lane)
  return lane_;
}
::sim_msg::Grading_Lane* Grading::release_lane() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.lane)
  
  ::sim_msg::Grading_Lane* temp = lane_;
  lane_ = NULL;
  return temp;
}
void Grading::set_allocated_lane(::sim_msg::Grading_Lane* lane) {
  delete lane_;
  lane_ = lane;
  if (lane) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.lane)
}

// .sim_msg.Grading.TrafficLight trafficeLight = 7;
bool Grading::has_trafficelight() const {
  return this != internal_default_instance() && trafficelight_ != NULL;
}
void Grading::clear_trafficelight() {
  if (GetArenaNoVirtual() == NULL && trafficelight_ != NULL) delete trafficelight_;
  trafficelight_ = NULL;
}
const ::sim_msg::Grading_TrafficLight& Grading::trafficelight() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.trafficeLight)
  return trafficelight_ != NULL ? *trafficelight_
                         : *::sim_msg::Grading_TrafficLight::internal_default_instance();
}
::sim_msg::Grading_TrafficLight* Grading::mutable_trafficelight() {
  
  if (trafficelight_ == NULL) {
    trafficelight_ = new ::sim_msg::Grading_TrafficLight;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.trafficeLight)
  return trafficelight_;
}
::sim_msg::Grading_TrafficLight* Grading::release_trafficelight() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.trafficeLight)
  
  ::sim_msg::Grading_TrafficLight* temp = trafficelight_;
  trafficelight_ = NULL;
  return temp;
}
void Grading::set_allocated_trafficelight(::sim_msg::Grading_TrafficLight* trafficelight) {
  delete trafficelight_;
  trafficelight_ = trafficelight;
  if (trafficelight) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.trafficeLight)
}

// .sim_msg.Grading.TimeStamp timeStamp = 8;
bool Grading::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
void Grading::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::sim_msg::Grading_TimeStamp& Grading::timestamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.timeStamp)
  return timestamp_ != NULL ? *timestamp_
                         : *::sim_msg::Grading_TimeStamp::internal_default_instance();
}
::sim_msg::Grading_TimeStamp* Grading::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::sim_msg::Grading_TimeStamp;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.timeStamp)
  return timestamp_;
}
::sim_msg::Grading_TimeStamp* Grading::release_timestamp() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.timeStamp)
  
  ::sim_msg::Grading_TimeStamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void Grading::set_allocated_timestamp(::sim_msg::Grading_TimeStamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.timeStamp)
}

// double mileage = 9;
void Grading::clear_mileage() {
  mileage_ = 0;
}
double Grading::mileage() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.mileage)
  return mileage_;
}
void Grading::set_mileage(double value) {
  
  mileage_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Grading.mileage)
}

// .sim_msg.Grading.ExpData expData = 10;
bool Grading::has_expdata() const {
  return this != internal_default_instance() && expdata_ != NULL;
}
void Grading::clear_expdata() {
  if (GetArenaNoVirtual() == NULL && expdata_ != NULL) delete expdata_;
  expdata_ = NULL;
}
const ::sim_msg::Grading_ExpData& Grading::expdata() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.expData)
  return expdata_ != NULL ? *expdata_
                         : *::sim_msg::Grading_ExpData::internal_default_instance();
}
::sim_msg::Grading_ExpData* Grading::mutable_expdata() {
  
  if (expdata_ == NULL) {
    expdata_ = new ::sim_msg::Grading_ExpData;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.expData)
  return expdata_;
}
::sim_msg::Grading_ExpData* Grading::release_expdata() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.expData)
  
  ::sim_msg::Grading_ExpData* temp = expdata_;
  expdata_ = NULL;
  return temp;
}
void Grading::set_allocated_expdata(::sim_msg::Grading_ExpData* expdata) {
  delete expdata_;
  expdata_ = expdata;
  if (expdata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.expData)
}

// .sim_msg.Grading.DistHeadway distHeadway = 11;
bool Grading::has_distheadway() const {
  return this != internal_default_instance() && distheadway_ != NULL;
}
void Grading::clear_distheadway() {
  if (GetArenaNoVirtual() == NULL && distheadway_ != NULL) delete distheadway_;
  distheadway_ = NULL;
}
const ::sim_msg::Grading_DistHeadway& Grading::distheadway() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.distHeadway)
  return distheadway_ != NULL ? *distheadway_
                         : *::sim_msg::Grading_DistHeadway::internal_default_instance();
}
::sim_msg::Grading_DistHeadway* Grading::mutable_distheadway() {
  
  if (distheadway_ == NULL) {
    distheadway_ = new ::sim_msg::Grading_DistHeadway;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.distHeadway)
  return distheadway_;
}
::sim_msg::Grading_DistHeadway* Grading::release_distheadway() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.distHeadway)
  
  ::sim_msg::Grading_DistHeadway* temp = distheadway_;
  distheadway_ = NULL;
  return temp;
}
void Grading::set_allocated_distheadway(::sim_msg::Grading_DistHeadway* distheadway) {
  delete distheadway_;
  distheadway_ = distheadway;
  if (distheadway) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.distHeadway)
}

// .sim_msg.Grading.Control control = 12;
bool Grading::has_control() const {
  return this != internal_default_instance() && control_ != NULL;
}
void Grading::clear_control() {
  if (GetArenaNoVirtual() == NULL && control_ != NULL) delete control_;
  control_ = NULL;
}
const ::sim_msg::Grading_Control& Grading::control() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.control)
  return control_ != NULL ? *control_
                         : *::sim_msg::Grading_Control::internal_default_instance();
}
::sim_msg::Grading_Control* Grading::mutable_control() {
  
  if (control_ == NULL) {
    control_ = new ::sim_msg::Grading_Control;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.control)
  return control_;
}
::sim_msg::Grading_Control* Grading::release_control() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.control)
  
  ::sim_msg::Grading_Control* temp = control_;
  control_ = NULL;
  return temp;
}
void Grading::set_allocated_control(::sim_msg::Grading_Control* control) {
  delete control_;
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.control)
}

// .sim_msg.Grading.Planning planning = 13;
bool Grading::has_planning() const {
  return this != internal_default_instance() && planning_ != NULL;
}
void Grading::clear_planning() {
  if (GetArenaNoVirtual() == NULL && planning_ != NULL) delete planning_;
  planning_ = NULL;
}
const ::sim_msg::Grading_Planning& Grading::planning() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.planning)
  return planning_ != NULL ? *planning_
                         : *::sim_msg::Grading_Planning::internal_default_instance();
}
::sim_msg::Grading_Planning* Grading::mutable_planning() {
  
  if (planning_ == NULL) {
    planning_ = new ::sim_msg::Grading_Planning;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.planning)
  return planning_;
}
::sim_msg::Grading_Planning* Grading::release_planning() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.planning)
  
  ::sim_msg::Grading_Planning* temp = planning_;
  planning_ = NULL;
  return temp;
}
void Grading::set_allocated_planning(::sim_msg::Grading_Planning* planning) {
  delete planning_;
  planning_ = planning;
  if (planning) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.planning)
}

// .sim_msg.Grading.Acceleration lateral_acc = 14;
bool Grading::has_lateral_acc() const {
  return this != internal_default_instance() && lateral_acc_ != NULL;
}
void Grading::clear_lateral_acc() {
  if (GetArenaNoVirtual() == NULL && lateral_acc_ != NULL) delete lateral_acc_;
  lateral_acc_ = NULL;
}
const ::sim_msg::Grading_Acceleration& Grading::lateral_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.lateral_acc)
  return lateral_acc_ != NULL ? *lateral_acc_
                         : *::sim_msg::Grading_Acceleration::internal_default_instance();
}
::sim_msg::Grading_Acceleration* Grading::mutable_lateral_acc() {
  
  if (lateral_acc_ == NULL) {
    lateral_acc_ = new ::sim_msg::Grading_Acceleration;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.lateral_acc)
  return lateral_acc_;
}
::sim_msg::Grading_Acceleration* Grading::release_lateral_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.lateral_acc)
  
  ::sim_msg::Grading_Acceleration* temp = lateral_acc_;
  lateral_acc_ = NULL;
  return temp;
}
void Grading::set_allocated_lateral_acc(::sim_msg::Grading_Acceleration* lateral_acc) {
  delete lateral_acc_;
  lateral_acc_ = lateral_acc;
  if (lateral_acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.lateral_acc)
}

// .sim_msg.Grading.Acceleration dec_acc = 15;
bool Grading::has_dec_acc() const {
  return this != internal_default_instance() && dec_acc_ != NULL;
}
void Grading::clear_dec_acc() {
  if (GetArenaNoVirtual() == NULL && dec_acc_ != NULL) delete dec_acc_;
  dec_acc_ = NULL;
}
const ::sim_msg::Grading_Acceleration& Grading::dec_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Grading.dec_acc)
  return dec_acc_ != NULL ? *dec_acc_
                         : *::sim_msg::Grading_Acceleration::internal_default_instance();
}
::sim_msg::Grading_Acceleration* Grading::mutable_dec_acc() {
  
  if (dec_acc_ == NULL) {
    dec_acc_ = new ::sim_msg::Grading_Acceleration;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Grading.dec_acc)
  return dec_acc_;
}
::sim_msg::Grading_Acceleration* Grading::release_dec_acc() {
  // @@protoc_insertion_point(field_release:sim_msg.Grading.dec_acc)
  
  ::sim_msg::Grading_Acceleration* temp = dec_acc_;
  dec_acc_ = NULL;
  return temp;
}
void Grading::set_allocated_dec_acc(::sim_msg::Grading_Acceleration* dec_acc) {
  delete dec_acc_;
  dec_acc_ = dec_acc;
  if (dec_acc) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Grading.dec_acc)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
