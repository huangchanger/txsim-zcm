// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: control.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class Control_PedalControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_PedalControl> {
} _Control_PedalControl_default_instance_;
class Control_AccControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_AccControl> {
} _Control_AccControl_default_instance_;
class Control_AccSteerControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_AccSteerControl> {
} _Control_AccSteerControl_default_instance_;
class Control_BodyCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_BodyCommand> {
} _Control_BodyCommand_default_instance_;
class Control_ChassisCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_ChassisCommand> {
} _Control_ChassisCommand_default_instance_;
class Control_PowerTrainCommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control_PowerTrainCommand> {
} _Control_PowerTrainCommand_default_instance_;
class ControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control> {
} _Control_default_instance_;
class ControlSAICDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ControlSAIC> {
} _ControlSAIC_default_instance_;

namespace protobuf_control_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PedalControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PedalControl, steer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PedalControl, throttle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PedalControl, brake_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccControl, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccControl, front_wheel_angle_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccSteerControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccSteerControl, acc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_AccSteerControl, steer_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, horn_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, turn_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, position_lamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, low_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, high_beam_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, warn_light_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_BodyCommand, fog_lamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_ChassisCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_ChassisCommand, epb_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PowerTrainCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control_PowerTrainCommand, switch_off_engine_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, control_mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, contrl_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, gear_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, pedal_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, acc_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, body_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, chassis_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, powertrain_cmd_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Control, acc_steer_cmd_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, torquereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, steerreq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, drivemodereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, brakepressurereq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ControlSAIC, accreq_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(Control_PedalControl)},
  { 7, -1, sizeof(Control_AccControl)},
  { 13, -1, sizeof(Control_AccSteerControl)},
  { 19, -1, sizeof(Control_BodyCommand)},
  { 30, -1, sizeof(Control_ChassisCommand)},
  { 35, -1, sizeof(Control_PowerTrainCommand)},
  { 40, -1, sizeof(Control)},
  { 54, -1, sizeof(ControlSAIC)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_PedalControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_AccControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_AccSteerControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_BodyCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_ChassisCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_PowerTrainCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_Control_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ControlSAIC_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "control.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

}  // namespace

void TableStruct::Shutdown() {
  _Control_PedalControl_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _Control_AccControl_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _Control_AccSteerControl_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _Control_BodyCommand_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _Control_ChassisCommand_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _Control_PowerTrainCommand_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _Control_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _ControlSAIC_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sim_msg::protobuf_header_2eproto::InitDefaults();
  _Control_PedalControl_default_instance_.DefaultConstruct();
  _Control_AccControl_default_instance_.DefaultConstruct();
  _Control_AccSteerControl_default_instance_.DefaultConstruct();
  _Control_BodyCommand_default_instance_.DefaultConstruct();
  _Control_ChassisCommand_default_instance_.DefaultConstruct();
  _Control_PowerTrainCommand_default_instance_.DefaultConstruct();
  _Control_default_instance_.DefaultConstruct();
  _ControlSAIC_default_instance_.DefaultConstruct();
  _Control_default_instance_.get_mutable()->header_ = const_cast< ::sim_msg::Header*>(
      ::sim_msg::Header::internal_default_instance());
  _Control_default_instance_.get_mutable()->pedal_cmd_ = const_cast< ::sim_msg::Control_PedalControl*>(
      ::sim_msg::Control_PedalControl::internal_default_instance());
  _Control_default_instance_.get_mutable()->acc_cmd_ = const_cast< ::sim_msg::Control_AccControl*>(
      ::sim_msg::Control_AccControl::internal_default_instance());
  _Control_default_instance_.get_mutable()->body_cmd_ = const_cast< ::sim_msg::Control_BodyCommand*>(
      ::sim_msg::Control_BodyCommand::internal_default_instance());
  _Control_default_instance_.get_mutable()->chassis_cmd_ = const_cast< ::sim_msg::Control_ChassisCommand*>(
      ::sim_msg::Control_ChassisCommand::internal_default_instance());
  _Control_default_instance_.get_mutable()->powertrain_cmd_ = const_cast< ::sim_msg::Control_PowerTrainCommand*>(
      ::sim_msg::Control_PowerTrainCommand::internal_default_instance());
  _Control_default_instance_.get_mutable()->acc_steer_cmd_ = const_cast< ::sim_msg::Control_AccSteerControl*>(
      ::sim_msg::Control_AccSteerControl::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rcontrol.proto\022\007sim_msg\032\014header.proto\"\277"
      "\n\n\007Control\022\037\n\006header\030\001 \001(\0132\017.sim_msg.Hea"
      "der\0223\n\014control_mode\030\002 \001(\0162\035.sim_msg.Cont"
      "rol.CONTROL_MODE\0222\n\013contrl_type\030\003 \001(\0162\035."
      "sim_msg.Control.CONTROL_TYPE\022,\n\010gear_cmd"
      "\030\004 \001(\0162\032.sim_msg.Control.GEAR_MODE\0220\n\tpe"
      "dal_cmd\030\005 \001(\0132\035.sim_msg.Control.PedalCon"
      "trol\022,\n\007acc_cmd\030\006 \001(\0132\033.sim_msg.Control."
      "AccControl\022.\n\010body_cmd\030\007 \001(\0132\034.sim_msg.C"
      "ontrol.BodyCommand\0224\n\013chassis_cmd\030\010 \001(\0132"
      "\037.sim_msg.Control.ChassisCommand\022:\n\016powe"
      "rtrain_cmd\030\t \001(\0132\".sim_msg.Control.Power"
      "TrainCommand\0227\n\racc_steer_cmd\030\n \001(\0132 .si"
      "m_msg.Control.AccSteerControl\032>\n\014PedalCo"
      "ntrol\022\r\n\005steer\030\001 \001(\001\022\020\n\010throttle\030\002 \001(\001\022\r"
      "\n\005brake\030\003 \001(\001\0324\n\nAccControl\022\013\n\003acc\030\001 \001(\001"
      "\022\031\n\021front_wheel_angle\030\002 \001(\001\032-\n\017AccSteerC"
      "ontrol\022\013\n\003acc\030\001 \001(\001\022\r\n\005steer\030\002 \001(\001\032\307\001\n\013B"
      "odyCommand\022\014\n\004horn\030\001 \001(\010\022.\n\nturn_light\030\002"
      " \001(\0162\032.sim_msg.Control.TurnLight\022\025\n\rposi"
      "tion_lamp\030\003 \001(\010\022\020\n\010low_beam\030\004 \001(\010\022\021\n\thig"
      "h_beam\030\005 \001(\010\022\022\n\nwarn_light\030\006 \001(\010\022*\n\010fog_"
      "lamp\030\007 \001(\0162\030.sim_msg.Control.FogLamp\032\035\n\016"
      "ChassisCommand\022\013\n\003epb\030\001 \001(\010\032.\n\021PowerTrai"
      "nCommand\022\031\n\021switch_off_engine\030\001 \001(\010\"V\n\014C"
      "ONTROL_MODE\022\r\n\tCM_MANUAL\020\000\022\021\n\rCM_AUTO_DR"
      "IVE\020\001\022\021\n\rCM_ONLY_STEER\020\002\022\021\n\rCM_ONLY_SPEE"
      "D\020\003\"J\n\tGEAR_MODE\022\016\n\nNO_CONTROL\020\000\022\010\n\004PARK"
      "\020\001\022\013\n\007REVERSE\020\002\022\013\n\007NEUTRAL\020\003\022\t\n\005DRIVE\020\004\""
      "I\n\014CONTROL_TYPE\022\021\n\rPEDAL_CONTROL\020\000\022\017\n\013AC"
      "C_CONTROL\020\001\022\025\n\021ACC_STEER_CONTROL\020\002\">\n\tTu"
      "rnLight\022\022\n\016TURN_LIGHT_OFF\020\000\022\r\n\tTURN_LEFT"
      "\020\001\022\016\n\nTURN_RIGHT\020\002\"T\n\007FogLamp\022\020\n\014FOG_LAM"
      "P_OFF\020\000\022\022\n\016FRONT_FOG_LAMP\020\001\022\021\n\rREAR_FOG_"
      "LAMP\020\002\022\020\n\014ALL_FOG_LAMP\020\003\"r\n\013ControlSAIC\022"
      "\021\n\ttorqueReq\030\001 \001(\001\022\020\n\010steerReq\030\002 \001(\001\022\024\n\014"
      "driveModeReq\030\003 \001(\005\022\030\n\020brakePressureReq\030\004"
      " \001(\001\022\016\n\006accReq\030\005 \001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1508);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "control.proto", &protobuf_RegisterTypes);
  ::sim_msg::protobuf_header_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_control_2eproto

const ::google::protobuf::EnumDescriptor* Control_CONTROL_MODE_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[0];
}
bool Control_CONTROL_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_CONTROL_MODE Control::CM_MANUAL;
const Control_CONTROL_MODE Control::CM_AUTO_DRIVE;
const Control_CONTROL_MODE Control::CM_ONLY_STEER;
const Control_CONTROL_MODE Control::CM_ONLY_SPEED;
const Control_CONTROL_MODE Control::CONTROL_MODE_MIN;
const Control_CONTROL_MODE Control::CONTROL_MODE_MAX;
const int Control::CONTROL_MODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Control_GEAR_MODE_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[1];
}
bool Control_GEAR_MODE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_GEAR_MODE Control::NO_CONTROL;
const Control_GEAR_MODE Control::PARK;
const Control_GEAR_MODE Control::REVERSE;
const Control_GEAR_MODE Control::NEUTRAL;
const Control_GEAR_MODE Control::DRIVE;
const Control_GEAR_MODE Control::GEAR_MODE_MIN;
const Control_GEAR_MODE Control::GEAR_MODE_MAX;
const int Control::GEAR_MODE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Control_CONTROL_TYPE_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[2];
}
bool Control_CONTROL_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_CONTROL_TYPE Control::PEDAL_CONTROL;
const Control_CONTROL_TYPE Control::ACC_CONTROL;
const Control_CONTROL_TYPE Control::ACC_STEER_CONTROL;
const Control_CONTROL_TYPE Control::CONTROL_TYPE_MIN;
const Control_CONTROL_TYPE Control::CONTROL_TYPE_MAX;
const int Control::CONTROL_TYPE_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Control_TurnLight_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[3];
}
bool Control_TurnLight_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_TurnLight Control::TURN_LIGHT_OFF;
const Control_TurnLight Control::TURN_LEFT;
const Control_TurnLight Control::TURN_RIGHT;
const Control_TurnLight Control::TurnLight_MIN;
const Control_TurnLight Control::TurnLight_MAX;
const int Control::TurnLight_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Control_FogLamp_descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_enum_descriptors[4];
}
bool Control_FogLamp_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_FogLamp Control::FOG_LAMP_OFF;
const Control_FogLamp Control::FRONT_FOG_LAMP;
const Control_FogLamp Control::REAR_FOG_LAMP;
const Control_FogLamp Control::ALL_FOG_LAMP;
const Control_FogLamp Control::FogLamp_MIN;
const Control_FogLamp Control::FogLamp_MAX;
const int Control::FogLamp_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_PedalControl::kSteerFieldNumber;
const int Control_PedalControl::kThrottleFieldNumber;
const int Control_PedalControl::kBrakeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_PedalControl::Control_PedalControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.PedalControl)
}
Control_PedalControl::Control_PedalControl(const Control_PedalControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&steer_, &from.steer_,
    reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&steer_) + sizeof(brake_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.PedalControl)
}

void Control_PedalControl::SharedCtor() {
  ::memset(&steer_, 0, reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&steer_) + sizeof(brake_));
  _cached_size_ = 0;
}

Control_PedalControl::~Control_PedalControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.PedalControl)
  SharedDtor();
}

void Control_PedalControl::SharedDtor() {
}

void Control_PedalControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_PedalControl::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[0].descriptor;
}

const Control_PedalControl& Control_PedalControl::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_PedalControl* Control_PedalControl::New(::google::protobuf::Arena* arena) const {
  Control_PedalControl* n = new Control_PedalControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_PedalControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.PedalControl)
  ::memset(&steer_, 0, reinterpret_cast<char*>(&brake_) -
    reinterpret_cast<char*>(&steer_) + sizeof(brake_));
}

bool Control_PedalControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.PedalControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double steer = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double throttle = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throttle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brake = 3;
      case 3: {
        if (tag == 25u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.PedalControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.PedalControl)
  return false;
#undef DO_
}

void Control_PedalControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.PedalControl)
  // double steer = 1;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->steer(), output);
  }

  // double throttle = 2;
  if (this->throttle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->throttle(), output);
  }

  // double brake = 3;
  if (this->brake() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->brake(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.PedalControl)
}

::google::protobuf::uint8* Control_PedalControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.PedalControl)
  // double steer = 1;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->steer(), target);
  }

  // double throttle = 2;
  if (this->throttle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->throttle(), target);
  }

  // double brake = 3;
  if (this->brake() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->brake(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.PedalControl)
  return target;
}

size_t Control_PedalControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.PedalControl)
  size_t total_size = 0;

  // double steer = 1;
  if (this->steer() != 0) {
    total_size += 1 + 8;
  }

  // double throttle = 2;
  if (this->throttle() != 0) {
    total_size += 1 + 8;
  }

  // double brake = 3;
  if (this->brake() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_PedalControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.PedalControl)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_PedalControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_PedalControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.PedalControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.PedalControl)
    MergeFrom(*source);
  }
}

void Control_PedalControl::MergeFrom(const Control_PedalControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.PedalControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
  if (from.throttle() != 0) {
    set_throttle(from.throttle());
  }
  if (from.brake() != 0) {
    set_brake(from.brake());
  }
}

void Control_PedalControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.PedalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_PedalControl::CopyFrom(const Control_PedalControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.PedalControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_PedalControl::IsInitialized() const {
  return true;
}

void Control_PedalControl::Swap(Control_PedalControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_PedalControl::InternalSwap(Control_PedalControl* other) {
  std::swap(steer_, other->steer_);
  std::swap(throttle_, other->throttle_);
  std::swap(brake_, other->brake_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_PedalControl::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_PedalControl

// double steer = 1;
void Control_PedalControl::clear_steer() {
  steer_ = 0;
}
double Control_PedalControl::steer() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.PedalControl.steer)
  return steer_;
}
void Control_PedalControl::set_steer(double value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.PedalControl.steer)
}

// double throttle = 2;
void Control_PedalControl::clear_throttle() {
  throttle_ = 0;
}
double Control_PedalControl::throttle() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.PedalControl.throttle)
  return throttle_;
}
void Control_PedalControl::set_throttle(double value) {
  
  throttle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.PedalControl.throttle)
}

// double brake = 3;
void Control_PedalControl::clear_brake() {
  brake_ = 0;
}
double Control_PedalControl::brake() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.PedalControl.brake)
  return brake_;
}
void Control_PedalControl::set_brake(double value) {
  
  brake_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.PedalControl.brake)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_AccControl::kAccFieldNumber;
const int Control_AccControl::kFrontWheelAngleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_AccControl::Control_AccControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.AccControl)
}
Control_AccControl::Control_AccControl(const Control_AccControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_, &from.acc_,
    reinterpret_cast<char*>(&front_wheel_angle_) -
    reinterpret_cast<char*>(&acc_) + sizeof(front_wheel_angle_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.AccControl)
}

void Control_AccControl::SharedCtor() {
  ::memset(&acc_, 0, reinterpret_cast<char*>(&front_wheel_angle_) -
    reinterpret_cast<char*>(&acc_) + sizeof(front_wheel_angle_));
  _cached_size_ = 0;
}

Control_AccControl::~Control_AccControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.AccControl)
  SharedDtor();
}

void Control_AccControl::SharedDtor() {
}

void Control_AccControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_AccControl::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[1].descriptor;
}

const Control_AccControl& Control_AccControl::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_AccControl* Control_AccControl::New(::google::protobuf::Arena* arena) const {
  Control_AccControl* n = new Control_AccControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_AccControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.AccControl)
  ::memset(&acc_, 0, reinterpret_cast<char*>(&front_wheel_angle_) -
    reinterpret_cast<char*>(&acc_) + sizeof(front_wheel_angle_));
}

bool Control_AccControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.AccControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double front_wheel_angle = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &front_wheel_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.AccControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.AccControl)
  return false;
#undef DO_
}

void Control_AccControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.AccControl)
  // double acc = 1;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc(), output);
  }

  // double front_wheel_angle = 2;
  if (this->front_wheel_angle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->front_wheel_angle(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.AccControl)
}

::google::protobuf::uint8* Control_AccControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.AccControl)
  // double acc = 1;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc(), target);
  }

  // double front_wheel_angle = 2;
  if (this->front_wheel_angle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->front_wheel_angle(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.AccControl)
  return target;
}

size_t Control_AccControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.AccControl)
  size_t total_size = 0;

  // double acc = 1;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  // double front_wheel_angle = 2;
  if (this->front_wheel_angle() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_AccControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.AccControl)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_AccControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_AccControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.AccControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.AccControl)
    MergeFrom(*source);
  }
}

void Control_AccControl::MergeFrom(const Control_AccControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.AccControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.front_wheel_angle() != 0) {
    set_front_wheel_angle(from.front_wheel_angle());
  }
}

void Control_AccControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.AccControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_AccControl::CopyFrom(const Control_AccControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.AccControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_AccControl::IsInitialized() const {
  return true;
}

void Control_AccControl::Swap(Control_AccControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_AccControl::InternalSwap(Control_AccControl* other) {
  std::swap(acc_, other->acc_);
  std::swap(front_wheel_angle_, other->front_wheel_angle_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_AccControl::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_AccControl

// double acc = 1;
void Control_AccControl::clear_acc() {
  acc_ = 0;
}
double Control_AccControl::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.AccControl.acc)
  return acc_;
}
void Control_AccControl::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.AccControl.acc)
}

// double front_wheel_angle = 2;
void Control_AccControl::clear_front_wheel_angle() {
  front_wheel_angle_ = 0;
}
double Control_AccControl::front_wheel_angle() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.AccControl.front_wheel_angle)
  return front_wheel_angle_;
}
void Control_AccControl::set_front_wheel_angle(double value) {
  
  front_wheel_angle_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.AccControl.front_wheel_angle)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_AccSteerControl::kAccFieldNumber;
const int Control_AccSteerControl::kSteerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_AccSteerControl::Control_AccSteerControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.AccSteerControl)
}
Control_AccSteerControl::Control_AccSteerControl(const Control_AccSteerControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_, &from.acc_,
    reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&acc_) + sizeof(steer_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.AccSteerControl)
}

void Control_AccSteerControl::SharedCtor() {
  ::memset(&acc_, 0, reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&acc_) + sizeof(steer_));
  _cached_size_ = 0;
}

Control_AccSteerControl::~Control_AccSteerControl() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.AccSteerControl)
  SharedDtor();
}

void Control_AccSteerControl::SharedDtor() {
}

void Control_AccSteerControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_AccSteerControl::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[2].descriptor;
}

const Control_AccSteerControl& Control_AccSteerControl::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_AccSteerControl* Control_AccSteerControl::New(::google::protobuf::Arena* arena) const {
  Control_AccSteerControl* n = new Control_AccSteerControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_AccSteerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.AccSteerControl)
  ::memset(&acc_, 0, reinterpret_cast<char*>(&steer_) -
    reinterpret_cast<char*>(&acc_) + sizeof(steer_));
}

bool Control_AccSteerControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.AccSteerControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double acc = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steer = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.AccSteerControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.AccSteerControl)
  return false;
#undef DO_
}

void Control_AccSteerControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.AccSteerControl)
  // double acc = 1;
  if (this->acc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->acc(), output);
  }

  // double steer = 2;
  if (this->steer() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steer(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.AccSteerControl)
}

::google::protobuf::uint8* Control_AccSteerControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.AccSteerControl)
  // double acc = 1;
  if (this->acc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->acc(), target);
  }

  // double steer = 2;
  if (this->steer() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steer(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.AccSteerControl)
  return target;
}

size_t Control_AccSteerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.AccSteerControl)
  size_t total_size = 0;

  // double acc = 1;
  if (this->acc() != 0) {
    total_size += 1 + 8;
  }

  // double steer = 2;
  if (this->steer() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_AccSteerControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.AccSteerControl)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_AccSteerControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_AccSteerControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.AccSteerControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.AccSteerControl)
    MergeFrom(*source);
  }
}

void Control_AccSteerControl::MergeFrom(const Control_AccSteerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.AccSteerControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.acc() != 0) {
    set_acc(from.acc());
  }
  if (from.steer() != 0) {
    set_steer(from.steer());
  }
}

void Control_AccSteerControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.AccSteerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_AccSteerControl::CopyFrom(const Control_AccSteerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.AccSteerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_AccSteerControl::IsInitialized() const {
  return true;
}

void Control_AccSteerControl::Swap(Control_AccSteerControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_AccSteerControl::InternalSwap(Control_AccSteerControl* other) {
  std::swap(acc_, other->acc_);
  std::swap(steer_, other->steer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_AccSteerControl::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_AccSteerControl

// double acc = 1;
void Control_AccSteerControl::clear_acc() {
  acc_ = 0;
}
double Control_AccSteerControl::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.AccSteerControl.acc)
  return acc_;
}
void Control_AccSteerControl::set_acc(double value) {
  
  acc_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.AccSteerControl.acc)
}

// double steer = 2;
void Control_AccSteerControl::clear_steer() {
  steer_ = 0;
}
double Control_AccSteerControl::steer() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.AccSteerControl.steer)
  return steer_;
}
void Control_AccSteerControl::set_steer(double value) {
  
  steer_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.AccSteerControl.steer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_BodyCommand::kHornFieldNumber;
const int Control_BodyCommand::kTurnLightFieldNumber;
const int Control_BodyCommand::kPositionLampFieldNumber;
const int Control_BodyCommand::kLowBeamFieldNumber;
const int Control_BodyCommand::kHighBeamFieldNumber;
const int Control_BodyCommand::kWarnLightFieldNumber;
const int Control_BodyCommand::kFogLampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_BodyCommand::Control_BodyCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.BodyCommand)
}
Control_BodyCommand::Control_BodyCommand(const Control_BodyCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_light_, &from.turn_light_,
    reinterpret_cast<char*>(&fog_lamp_) -
    reinterpret_cast<char*>(&turn_light_) + sizeof(fog_lamp_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.BodyCommand)
}

void Control_BodyCommand::SharedCtor() {
  ::memset(&turn_light_, 0, reinterpret_cast<char*>(&fog_lamp_) -
    reinterpret_cast<char*>(&turn_light_) + sizeof(fog_lamp_));
  _cached_size_ = 0;
}

Control_BodyCommand::~Control_BodyCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.BodyCommand)
  SharedDtor();
}

void Control_BodyCommand::SharedDtor() {
}

void Control_BodyCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_BodyCommand::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[3].descriptor;
}

const Control_BodyCommand& Control_BodyCommand::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_BodyCommand* Control_BodyCommand::New(::google::protobuf::Arena* arena) const {
  Control_BodyCommand* n = new Control_BodyCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_BodyCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.BodyCommand)
  ::memset(&turn_light_, 0, reinterpret_cast<char*>(&fog_lamp_) -
    reinterpret_cast<char*>(&turn_light_) + sizeof(fog_lamp_));
}

bool Control_BodyCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.BodyCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool horn = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.TurnLight turn_light = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_turn_light(static_cast< ::sim_msg::Control_TurnLight >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool position_lamp = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &position_lamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool low_beam = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool high_beam = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool warn_light = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &warn_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.FogLamp fog_lamp = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fog_lamp(static_cast< ::sim_msg::Control_FogLamp >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.BodyCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.BodyCommand)
  return false;
#undef DO_
}

void Control_BodyCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.BodyCommand)
  // bool horn = 1;
  if (this->horn() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->horn(), output);
  }

  // .sim_msg.Control.TurnLight turn_light = 2;
  if (this->turn_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->turn_light(), output);
  }

  // bool position_lamp = 3;
  if (this->position_lamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->position_lamp(), output);
  }

  // bool low_beam = 4;
  if (this->low_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->low_beam(), output);
  }

  // bool high_beam = 5;
  if (this->high_beam() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->high_beam(), output);
  }

  // bool warn_light = 6;
  if (this->warn_light() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->warn_light(), output);
  }

  // .sim_msg.Control.FogLamp fog_lamp = 7;
  if (this->fog_lamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fog_lamp(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.BodyCommand)
}

::google::protobuf::uint8* Control_BodyCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.BodyCommand)
  // bool horn = 1;
  if (this->horn() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->horn(), target);
  }

  // .sim_msg.Control.TurnLight turn_light = 2;
  if (this->turn_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->turn_light(), target);
  }

  // bool position_lamp = 3;
  if (this->position_lamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->position_lamp(), target);
  }

  // bool low_beam = 4;
  if (this->low_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->low_beam(), target);
  }

  // bool high_beam = 5;
  if (this->high_beam() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->high_beam(), target);
  }

  // bool warn_light = 6;
  if (this->warn_light() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->warn_light(), target);
  }

  // .sim_msg.Control.FogLamp fog_lamp = 7;
  if (this->fog_lamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->fog_lamp(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.BodyCommand)
  return target;
}

size_t Control_BodyCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.BodyCommand)
  size_t total_size = 0;

  // .sim_msg.Control.TurnLight turn_light = 2;
  if (this->turn_light() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_light());
  }

  // bool horn = 1;
  if (this->horn() != 0) {
    total_size += 1 + 1;
  }

  // bool position_lamp = 3;
  if (this->position_lamp() != 0) {
    total_size += 1 + 1;
  }

  // bool low_beam = 4;
  if (this->low_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool high_beam = 5;
  if (this->high_beam() != 0) {
    total_size += 1 + 1;
  }

  // bool warn_light = 6;
  if (this->warn_light() != 0) {
    total_size += 1 + 1;
  }

  // .sim_msg.Control.FogLamp fog_lamp = 7;
  if (this->fog_lamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fog_lamp());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_BodyCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.BodyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_BodyCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_BodyCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.BodyCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.BodyCommand)
    MergeFrom(*source);
  }
}

void Control_BodyCommand::MergeFrom(const Control_BodyCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.BodyCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.turn_light() != 0) {
    set_turn_light(from.turn_light());
  }
  if (from.horn() != 0) {
    set_horn(from.horn());
  }
  if (from.position_lamp() != 0) {
    set_position_lamp(from.position_lamp());
  }
  if (from.low_beam() != 0) {
    set_low_beam(from.low_beam());
  }
  if (from.high_beam() != 0) {
    set_high_beam(from.high_beam());
  }
  if (from.warn_light() != 0) {
    set_warn_light(from.warn_light());
  }
  if (from.fog_lamp() != 0) {
    set_fog_lamp(from.fog_lamp());
  }
}

void Control_BodyCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.BodyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_BodyCommand::CopyFrom(const Control_BodyCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.BodyCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_BodyCommand::IsInitialized() const {
  return true;
}

void Control_BodyCommand::Swap(Control_BodyCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_BodyCommand::InternalSwap(Control_BodyCommand* other) {
  std::swap(turn_light_, other->turn_light_);
  std::swap(horn_, other->horn_);
  std::swap(position_lamp_, other->position_lamp_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(warn_light_, other->warn_light_);
  std::swap(fog_lamp_, other->fog_lamp_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_BodyCommand::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_BodyCommand

// bool horn = 1;
void Control_BodyCommand::clear_horn() {
  horn_ = false;
}
bool Control_BodyCommand::horn() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.horn)
  return horn_;
}
void Control_BodyCommand::set_horn(bool value) {
  
  horn_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.horn)
}

// .sim_msg.Control.TurnLight turn_light = 2;
void Control_BodyCommand::clear_turn_light() {
  turn_light_ = 0;
}
::sim_msg::Control_TurnLight Control_BodyCommand::turn_light() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.turn_light)
  return static_cast< ::sim_msg::Control_TurnLight >(turn_light_);
}
void Control_BodyCommand::set_turn_light(::sim_msg::Control_TurnLight value) {
  
  turn_light_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.turn_light)
}

// bool position_lamp = 3;
void Control_BodyCommand::clear_position_lamp() {
  position_lamp_ = false;
}
bool Control_BodyCommand::position_lamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.position_lamp)
  return position_lamp_;
}
void Control_BodyCommand::set_position_lamp(bool value) {
  
  position_lamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.position_lamp)
}

// bool low_beam = 4;
void Control_BodyCommand::clear_low_beam() {
  low_beam_ = false;
}
bool Control_BodyCommand::low_beam() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.low_beam)
  return low_beam_;
}
void Control_BodyCommand::set_low_beam(bool value) {
  
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.low_beam)
}

// bool high_beam = 5;
void Control_BodyCommand::clear_high_beam() {
  high_beam_ = false;
}
bool Control_BodyCommand::high_beam() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.high_beam)
  return high_beam_;
}
void Control_BodyCommand::set_high_beam(bool value) {
  
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.high_beam)
}

// bool warn_light = 6;
void Control_BodyCommand::clear_warn_light() {
  warn_light_ = false;
}
bool Control_BodyCommand::warn_light() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.warn_light)
  return warn_light_;
}
void Control_BodyCommand::set_warn_light(bool value) {
  
  warn_light_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.warn_light)
}

// .sim_msg.Control.FogLamp fog_lamp = 7;
void Control_BodyCommand::clear_fog_lamp() {
  fog_lamp_ = 0;
}
::sim_msg::Control_FogLamp Control_BodyCommand::fog_lamp() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.BodyCommand.fog_lamp)
  return static_cast< ::sim_msg::Control_FogLamp >(fog_lamp_);
}
void Control_BodyCommand::set_fog_lamp(::sim_msg::Control_FogLamp value) {
  
  fog_lamp_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.BodyCommand.fog_lamp)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_ChassisCommand::kEpbFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_ChassisCommand::Control_ChassisCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.ChassisCommand)
}
Control_ChassisCommand::Control_ChassisCommand(const Control_ChassisCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  epb_ = from.epb_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.ChassisCommand)
}

void Control_ChassisCommand::SharedCtor() {
  epb_ = false;
  _cached_size_ = 0;
}

Control_ChassisCommand::~Control_ChassisCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.ChassisCommand)
  SharedDtor();
}

void Control_ChassisCommand::SharedDtor() {
}

void Control_ChassisCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_ChassisCommand::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[4].descriptor;
}

const Control_ChassisCommand& Control_ChassisCommand::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_ChassisCommand* Control_ChassisCommand::New(::google::protobuf::Arena* arena) const {
  Control_ChassisCommand* n = new Control_ChassisCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_ChassisCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.ChassisCommand)
  epb_ = false;
}

bool Control_ChassisCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.ChassisCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool epb = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &epb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.ChassisCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.ChassisCommand)
  return false;
#undef DO_
}

void Control_ChassisCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.ChassisCommand)
  // bool epb = 1;
  if (this->epb() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->epb(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.ChassisCommand)
}

::google::protobuf::uint8* Control_ChassisCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.ChassisCommand)
  // bool epb = 1;
  if (this->epb() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->epb(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.ChassisCommand)
  return target;
}

size_t Control_ChassisCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.ChassisCommand)
  size_t total_size = 0;

  // bool epb = 1;
  if (this->epb() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_ChassisCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.ChassisCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_ChassisCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_ChassisCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.ChassisCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.ChassisCommand)
    MergeFrom(*source);
  }
}

void Control_ChassisCommand::MergeFrom(const Control_ChassisCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.ChassisCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.epb() != 0) {
    set_epb(from.epb());
  }
}

void Control_ChassisCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.ChassisCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_ChassisCommand::CopyFrom(const Control_ChassisCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.ChassisCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_ChassisCommand::IsInitialized() const {
  return true;
}

void Control_ChassisCommand::Swap(Control_ChassisCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_ChassisCommand::InternalSwap(Control_ChassisCommand* other) {
  std::swap(epb_, other->epb_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_ChassisCommand::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_ChassisCommand

// bool epb = 1;
void Control_ChassisCommand::clear_epb() {
  epb_ = false;
}
bool Control_ChassisCommand::epb() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.ChassisCommand.epb)
  return epb_;
}
void Control_ChassisCommand::set_epb(bool value) {
  
  epb_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.ChassisCommand.epb)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control_PowerTrainCommand::kSwitchOffEngineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control_PowerTrainCommand::Control_PowerTrainCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control.PowerTrainCommand)
}
Control_PowerTrainCommand::Control_PowerTrainCommand(const Control_PowerTrainCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  switch_off_engine_ = from.switch_off_engine_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control.PowerTrainCommand)
}

void Control_PowerTrainCommand::SharedCtor() {
  switch_off_engine_ = false;
  _cached_size_ = 0;
}

Control_PowerTrainCommand::~Control_PowerTrainCommand() {
  // @@protoc_insertion_point(destructor:sim_msg.Control.PowerTrainCommand)
  SharedDtor();
}

void Control_PowerTrainCommand::SharedDtor() {
}

void Control_PowerTrainCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control_PowerTrainCommand::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[5].descriptor;
}

const Control_PowerTrainCommand& Control_PowerTrainCommand::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control_PowerTrainCommand* Control_PowerTrainCommand::New(::google::protobuf::Arena* arena) const {
  Control_PowerTrainCommand* n = new Control_PowerTrainCommand;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control_PowerTrainCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control.PowerTrainCommand)
  switch_off_engine_ = false;
}

bool Control_PowerTrainCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control.PowerTrainCommand)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool switch_off_engine = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &switch_off_engine_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control.PowerTrainCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control.PowerTrainCommand)
  return false;
#undef DO_
}

void Control_PowerTrainCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control.PowerTrainCommand)
  // bool switch_off_engine = 1;
  if (this->switch_off_engine() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->switch_off_engine(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control.PowerTrainCommand)
}

::google::protobuf::uint8* Control_PowerTrainCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control.PowerTrainCommand)
  // bool switch_off_engine = 1;
  if (this->switch_off_engine() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->switch_off_engine(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control.PowerTrainCommand)
  return target;
}

size_t Control_PowerTrainCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control.PowerTrainCommand)
  size_t total_size = 0;

  // bool switch_off_engine = 1;
  if (this->switch_off_engine() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control_PowerTrainCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control.PowerTrainCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const Control_PowerTrainCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control_PowerTrainCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control.PowerTrainCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control.PowerTrainCommand)
    MergeFrom(*source);
  }
}

void Control_PowerTrainCommand::MergeFrom(const Control_PowerTrainCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control.PowerTrainCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.switch_off_engine() != 0) {
    set_switch_off_engine(from.switch_off_engine());
  }
}

void Control_PowerTrainCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control.PowerTrainCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control_PowerTrainCommand::CopyFrom(const Control_PowerTrainCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control.PowerTrainCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control_PowerTrainCommand::IsInitialized() const {
  return true;
}

void Control_PowerTrainCommand::Swap(Control_PowerTrainCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control_PowerTrainCommand::InternalSwap(Control_PowerTrainCommand* other) {
  std::swap(switch_off_engine_, other->switch_off_engine_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control_PowerTrainCommand::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control_PowerTrainCommand

// bool switch_off_engine = 1;
void Control_PowerTrainCommand::clear_switch_off_engine() {
  switch_off_engine_ = false;
}
bool Control_PowerTrainCommand::switch_off_engine() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.PowerTrainCommand.switch_off_engine)
  return switch_off_engine_;
}
void Control_PowerTrainCommand::set_switch_off_engine(bool value) {
  
  switch_off_engine_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.PowerTrainCommand.switch_off_engine)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kHeaderFieldNumber;
const int Control::kControlModeFieldNumber;
const int Control::kContrlTypeFieldNumber;
const int Control::kGearCmdFieldNumber;
const int Control::kPedalCmdFieldNumber;
const int Control::kAccCmdFieldNumber;
const int Control::kBodyCmdFieldNumber;
const int Control::kChassisCmdFieldNumber;
const int Control::kPowertrainCmdFieldNumber;
const int Control::kAccSteerCmdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.Control)
}
Control::Control(const Control& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_pedal_cmd()) {
    pedal_cmd_ = new ::sim_msg::Control_PedalControl(*from.pedal_cmd_);
  } else {
    pedal_cmd_ = NULL;
  }
  if (from.has_acc_cmd()) {
    acc_cmd_ = new ::sim_msg::Control_AccControl(*from.acc_cmd_);
  } else {
    acc_cmd_ = NULL;
  }
  if (from.has_body_cmd()) {
    body_cmd_ = new ::sim_msg::Control_BodyCommand(*from.body_cmd_);
  } else {
    body_cmd_ = NULL;
  }
  if (from.has_chassis_cmd()) {
    chassis_cmd_ = new ::sim_msg::Control_ChassisCommand(*from.chassis_cmd_);
  } else {
    chassis_cmd_ = NULL;
  }
  if (from.has_powertrain_cmd()) {
    powertrain_cmd_ = new ::sim_msg::Control_PowerTrainCommand(*from.powertrain_cmd_);
  } else {
    powertrain_cmd_ = NULL;
  }
  if (from.has_acc_steer_cmd()) {
    acc_steer_cmd_ = new ::sim_msg::Control_AccSteerControl(*from.acc_steer_cmd_);
  } else {
    acc_steer_cmd_ = NULL;
  }
  ::memcpy(&control_mode_, &from.control_mode_,
    reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&control_mode_) + sizeof(gear_cmd_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Control)
}

void Control::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&header_) + sizeof(gear_cmd_));
  _cached_size_ = 0;
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:sim_msg.Control)
  SharedDtor();
}

void Control::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete pedal_cmd_;
  }
  if (this != internal_default_instance()) {
    delete acc_cmd_;
  }
  if (this != internal_default_instance()) {
    delete body_cmd_;
  }
  if (this != internal_default_instance()) {
    delete chassis_cmd_;
  }
  if (this != internal_default_instance()) {
    delete powertrain_cmd_;
  }
  if (this != internal_default_instance()) {
    delete acc_steer_cmd_;
  }
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Control::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[6].descriptor;
}

const Control& Control::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control* Control::New(::google::protobuf::Arena* arena) const {
  Control* n = new Control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Control)
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && pedal_cmd_ != NULL) {
    delete pedal_cmd_;
  }
  pedal_cmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_cmd_ != NULL) {
    delete acc_cmd_;
  }
  acc_cmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_cmd_ != NULL) {
    delete body_cmd_;
  }
  body_cmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && chassis_cmd_ != NULL) {
    delete chassis_cmd_;
  }
  chassis_cmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && powertrain_cmd_ != NULL) {
    delete powertrain_cmd_;
  }
  powertrain_cmd_ = NULL;
  if (GetArenaNoVirtual() == NULL && acc_steer_cmd_ != NULL) {
    delete acc_steer_cmd_;
  }
  acc_steer_cmd_ = NULL;
  ::memset(&control_mode_, 0, reinterpret_cast<char*>(&gear_cmd_) -
    reinterpret_cast<char*>(&control_mode_) + sizeof(gear_cmd_));
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Header header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.CONTROL_MODE control_mode = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_control_mode(static_cast< ::sim_msg::Control_CONTROL_MODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_contrl_type(static_cast< ::sim_msg::Control_CONTROL_TYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gear_cmd(static_cast< ::sim_msg::Control_GEAR_MODE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.PedalControl pedal_cmd = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pedal_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.AccControl acc_cmd = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.BodyCommand body_cmd = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_body_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_powertrain_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_acc_steer_cmd()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.Control)
  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // .sim_msg.Control.CONTROL_MODE control_mode = 2;
  if (this->control_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->control_mode(), output);
  }

  // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
  if (this->contrl_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->contrl_type(), output);
  }

  // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->gear_cmd(), output);
  }

  // .sim_msg.Control.PedalControl pedal_cmd = 5;
  if (this->has_pedal_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->pedal_cmd_, output);
  }

  // .sim_msg.Control.AccControl acc_cmd = 6;
  if (this->has_acc_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->acc_cmd_, output);
  }

  // .sim_msg.Control.BodyCommand body_cmd = 7;
  if (this->has_body_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->body_cmd_, output);
  }

  // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
  if (this->has_chassis_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->chassis_cmd_, output);
  }

  // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
  if (this->has_powertrain_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->powertrain_cmd_, output);
  }

  // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
  if (this->has_acc_steer_cmd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->acc_steer_cmd_, output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.Control)
}

::google::protobuf::uint8* Control::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Control)
  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // .sim_msg.Control.CONTROL_MODE control_mode = 2;
  if (this->control_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->control_mode(), target);
  }

  // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
  if (this->contrl_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->contrl_type(), target);
  }

  // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->gear_cmd(), target);
  }

  // .sim_msg.Control.PedalControl pedal_cmd = 5;
  if (this->has_pedal_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->pedal_cmd_, false, target);
  }

  // .sim_msg.Control.AccControl acc_cmd = 6;
  if (this->has_acc_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->acc_cmd_, false, target);
  }

  // .sim_msg.Control.BodyCommand body_cmd = 7;
  if (this->has_body_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->body_cmd_, false, target);
  }

  // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
  if (this->has_chassis_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->chassis_cmd_, false, target);
  }

  // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
  if (this->has_powertrain_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->powertrain_cmd_, false, target);
  }

  // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
  if (this->has_acc_steer_cmd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->acc_steer_cmd_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Control)
  return target;
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Control)
  size_t total_size = 0;

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // .sim_msg.Control.PedalControl pedal_cmd = 5;
  if (this->has_pedal_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->pedal_cmd_);
  }

  // .sim_msg.Control.AccControl acc_cmd = 6;
  if (this->has_acc_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acc_cmd_);
  }

  // .sim_msg.Control.BodyCommand body_cmd = 7;
  if (this->has_body_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->body_cmd_);
  }

  // .sim_msg.Control.ChassisCommand chassis_cmd = 8;
  if (this->has_chassis_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->chassis_cmd_);
  }

  // .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
  if (this->has_powertrain_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->powertrain_cmd_);
  }

  // .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
  if (this->has_acc_steer_cmd()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->acc_steer_cmd_);
  }

  // .sim_msg.Control.CONTROL_MODE control_mode = 2;
  if (this->control_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->control_mode());
  }

  // .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
  if (this->contrl_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->contrl_type());
  }

  // .sim_msg.Control.GEAR_MODE gear_cmd = 4;
  if (this->gear_cmd() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_cmd());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.Control)
  GOOGLE_DCHECK_NE(&from, this);
  const Control* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Control>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.Control)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.Control)
    MergeFrom(*source);
  }
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    mutable_header()->::sim_msg::Header::MergeFrom(from.header());
  }
  if (from.has_pedal_cmd()) {
    mutable_pedal_cmd()->::sim_msg::Control_PedalControl::MergeFrom(from.pedal_cmd());
  }
  if (from.has_acc_cmd()) {
    mutable_acc_cmd()->::sim_msg::Control_AccControl::MergeFrom(from.acc_cmd());
  }
  if (from.has_body_cmd()) {
    mutable_body_cmd()->::sim_msg::Control_BodyCommand::MergeFrom(from.body_cmd());
  }
  if (from.has_chassis_cmd()) {
    mutable_chassis_cmd()->::sim_msg::Control_ChassisCommand::MergeFrom(from.chassis_cmd());
  }
  if (from.has_powertrain_cmd()) {
    mutable_powertrain_cmd()->::sim_msg::Control_PowerTrainCommand::MergeFrom(from.powertrain_cmd());
  }
  if (from.has_acc_steer_cmd()) {
    mutable_acc_steer_cmd()->::sim_msg::Control_AccSteerControl::MergeFrom(from.acc_steer_cmd());
  }
  if (from.control_mode() != 0) {
    set_control_mode(from.control_mode());
  }
  if (from.contrl_type() != 0) {
    set_contrl_type(from.contrl_type());
  }
  if (from.gear_cmd() != 0) {
    set_gear_cmd(from.gear_cmd());
  }
}

void Control::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  std::swap(header_, other->header_);
  std::swap(pedal_cmd_, other->pedal_cmd_);
  std::swap(acc_cmd_, other->acc_cmd_);
  std::swap(body_cmd_, other->body_cmd_);
  std::swap(chassis_cmd_, other->chassis_cmd_);
  std::swap(powertrain_cmd_, other->powertrain_cmd_);
  std::swap(acc_steer_cmd_, other->acc_steer_cmd_);
  std::swap(control_mode_, other->control_mode_);
  std::swap(contrl_type_, other->contrl_type_);
  std::swap(gear_cmd_, other->gear_cmd_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Control::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// .sim_msg.Header header = 1;
bool Control::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void Control::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::sim_msg::Header& Control::header() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.header)
  return header_ != NULL ? *header_
                         : *::sim_msg::Header::internal_default_instance();
}
::sim_msg::Header* Control::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::sim_msg::Header;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.header)
  return header_;
}
::sim_msg::Header* Control::release_header() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.header)
  
  ::sim_msg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Control::set_allocated_header(::sim_msg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.header)
}

// .sim_msg.Control.CONTROL_MODE control_mode = 2;
void Control::clear_control_mode() {
  control_mode_ = 0;
}
::sim_msg::Control_CONTROL_MODE Control::control_mode() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.control_mode)
  return static_cast< ::sim_msg::Control_CONTROL_MODE >(control_mode_);
}
void Control::set_control_mode(::sim_msg::Control_CONTROL_MODE value) {
  
  control_mode_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.control_mode)
}

// .sim_msg.Control.CONTROL_TYPE contrl_type = 3;
void Control::clear_contrl_type() {
  contrl_type_ = 0;
}
::sim_msg::Control_CONTROL_TYPE Control::contrl_type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.contrl_type)
  return static_cast< ::sim_msg::Control_CONTROL_TYPE >(contrl_type_);
}
void Control::set_contrl_type(::sim_msg::Control_CONTROL_TYPE value) {
  
  contrl_type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.contrl_type)
}

// .sim_msg.Control.GEAR_MODE gear_cmd = 4;
void Control::clear_gear_cmd() {
  gear_cmd_ = 0;
}
::sim_msg::Control_GEAR_MODE Control::gear_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.gear_cmd)
  return static_cast< ::sim_msg::Control_GEAR_MODE >(gear_cmd_);
}
void Control::set_gear_cmd(::sim_msg::Control_GEAR_MODE value) {
  
  gear_cmd_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.Control.gear_cmd)
}

// .sim_msg.Control.PedalControl pedal_cmd = 5;
bool Control::has_pedal_cmd() const {
  return this != internal_default_instance() && pedal_cmd_ != NULL;
}
void Control::clear_pedal_cmd() {
  if (GetArenaNoVirtual() == NULL && pedal_cmd_ != NULL) delete pedal_cmd_;
  pedal_cmd_ = NULL;
}
const ::sim_msg::Control_PedalControl& Control::pedal_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.pedal_cmd)
  return pedal_cmd_ != NULL ? *pedal_cmd_
                         : *::sim_msg::Control_PedalControl::internal_default_instance();
}
::sim_msg::Control_PedalControl* Control::mutable_pedal_cmd() {
  
  if (pedal_cmd_ == NULL) {
    pedal_cmd_ = new ::sim_msg::Control_PedalControl;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.pedal_cmd)
  return pedal_cmd_;
}
::sim_msg::Control_PedalControl* Control::release_pedal_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.pedal_cmd)
  
  ::sim_msg::Control_PedalControl* temp = pedal_cmd_;
  pedal_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_pedal_cmd(::sim_msg::Control_PedalControl* pedal_cmd) {
  delete pedal_cmd_;
  pedal_cmd_ = pedal_cmd;
  if (pedal_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.pedal_cmd)
}

// .sim_msg.Control.AccControl acc_cmd = 6;
bool Control::has_acc_cmd() const {
  return this != internal_default_instance() && acc_cmd_ != NULL;
}
void Control::clear_acc_cmd() {
  if (GetArenaNoVirtual() == NULL && acc_cmd_ != NULL) delete acc_cmd_;
  acc_cmd_ = NULL;
}
const ::sim_msg::Control_AccControl& Control::acc_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.acc_cmd)
  return acc_cmd_ != NULL ? *acc_cmd_
                         : *::sim_msg::Control_AccControl::internal_default_instance();
}
::sim_msg::Control_AccControl* Control::mutable_acc_cmd() {
  
  if (acc_cmd_ == NULL) {
    acc_cmd_ = new ::sim_msg::Control_AccControl;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.acc_cmd)
  return acc_cmd_;
}
::sim_msg::Control_AccControl* Control::release_acc_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.acc_cmd)
  
  ::sim_msg::Control_AccControl* temp = acc_cmd_;
  acc_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_acc_cmd(::sim_msg::Control_AccControl* acc_cmd) {
  delete acc_cmd_;
  acc_cmd_ = acc_cmd;
  if (acc_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.acc_cmd)
}

// .sim_msg.Control.BodyCommand body_cmd = 7;
bool Control::has_body_cmd() const {
  return this != internal_default_instance() && body_cmd_ != NULL;
}
void Control::clear_body_cmd() {
  if (GetArenaNoVirtual() == NULL && body_cmd_ != NULL) delete body_cmd_;
  body_cmd_ = NULL;
}
const ::sim_msg::Control_BodyCommand& Control::body_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.body_cmd)
  return body_cmd_ != NULL ? *body_cmd_
                         : *::sim_msg::Control_BodyCommand::internal_default_instance();
}
::sim_msg::Control_BodyCommand* Control::mutable_body_cmd() {
  
  if (body_cmd_ == NULL) {
    body_cmd_ = new ::sim_msg::Control_BodyCommand;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.body_cmd)
  return body_cmd_;
}
::sim_msg::Control_BodyCommand* Control::release_body_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.body_cmd)
  
  ::sim_msg::Control_BodyCommand* temp = body_cmd_;
  body_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_body_cmd(::sim_msg::Control_BodyCommand* body_cmd) {
  delete body_cmd_;
  body_cmd_ = body_cmd;
  if (body_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.body_cmd)
}

// .sim_msg.Control.ChassisCommand chassis_cmd = 8;
bool Control::has_chassis_cmd() const {
  return this != internal_default_instance() && chassis_cmd_ != NULL;
}
void Control::clear_chassis_cmd() {
  if (GetArenaNoVirtual() == NULL && chassis_cmd_ != NULL) delete chassis_cmd_;
  chassis_cmd_ = NULL;
}
const ::sim_msg::Control_ChassisCommand& Control::chassis_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.chassis_cmd)
  return chassis_cmd_ != NULL ? *chassis_cmd_
                         : *::sim_msg::Control_ChassisCommand::internal_default_instance();
}
::sim_msg::Control_ChassisCommand* Control::mutable_chassis_cmd() {
  
  if (chassis_cmd_ == NULL) {
    chassis_cmd_ = new ::sim_msg::Control_ChassisCommand;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.chassis_cmd)
  return chassis_cmd_;
}
::sim_msg::Control_ChassisCommand* Control::release_chassis_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.chassis_cmd)
  
  ::sim_msg::Control_ChassisCommand* temp = chassis_cmd_;
  chassis_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_chassis_cmd(::sim_msg::Control_ChassisCommand* chassis_cmd) {
  delete chassis_cmd_;
  chassis_cmd_ = chassis_cmd;
  if (chassis_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.chassis_cmd)
}

// .sim_msg.Control.PowerTrainCommand powertrain_cmd = 9;
bool Control::has_powertrain_cmd() const {
  return this != internal_default_instance() && powertrain_cmd_ != NULL;
}
void Control::clear_powertrain_cmd() {
  if (GetArenaNoVirtual() == NULL && powertrain_cmd_ != NULL) delete powertrain_cmd_;
  powertrain_cmd_ = NULL;
}
const ::sim_msg::Control_PowerTrainCommand& Control::powertrain_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.powertrain_cmd)
  return powertrain_cmd_ != NULL ? *powertrain_cmd_
                         : *::sim_msg::Control_PowerTrainCommand::internal_default_instance();
}
::sim_msg::Control_PowerTrainCommand* Control::mutable_powertrain_cmd() {
  
  if (powertrain_cmd_ == NULL) {
    powertrain_cmd_ = new ::sim_msg::Control_PowerTrainCommand;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.powertrain_cmd)
  return powertrain_cmd_;
}
::sim_msg::Control_PowerTrainCommand* Control::release_powertrain_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.powertrain_cmd)
  
  ::sim_msg::Control_PowerTrainCommand* temp = powertrain_cmd_;
  powertrain_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_powertrain_cmd(::sim_msg::Control_PowerTrainCommand* powertrain_cmd) {
  delete powertrain_cmd_;
  powertrain_cmd_ = powertrain_cmd;
  if (powertrain_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.powertrain_cmd)
}

// .sim_msg.Control.AccSteerControl acc_steer_cmd = 10;
bool Control::has_acc_steer_cmd() const {
  return this != internal_default_instance() && acc_steer_cmd_ != NULL;
}
void Control::clear_acc_steer_cmd() {
  if (GetArenaNoVirtual() == NULL && acc_steer_cmd_ != NULL) delete acc_steer_cmd_;
  acc_steer_cmd_ = NULL;
}
const ::sim_msg::Control_AccSteerControl& Control::acc_steer_cmd() const {
  // @@protoc_insertion_point(field_get:sim_msg.Control.acc_steer_cmd)
  return acc_steer_cmd_ != NULL ? *acc_steer_cmd_
                         : *::sim_msg::Control_AccSteerControl::internal_default_instance();
}
::sim_msg::Control_AccSteerControl* Control::mutable_acc_steer_cmd() {
  
  if (acc_steer_cmd_ == NULL) {
    acc_steer_cmd_ = new ::sim_msg::Control_AccSteerControl;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.Control.acc_steer_cmd)
  return acc_steer_cmd_;
}
::sim_msg::Control_AccSteerControl* Control::release_acc_steer_cmd() {
  // @@protoc_insertion_point(field_release:sim_msg.Control.acc_steer_cmd)
  
  ::sim_msg::Control_AccSteerControl* temp = acc_steer_cmd_;
  acc_steer_cmd_ = NULL;
  return temp;
}
void Control::set_allocated_acc_steer_cmd(::sim_msg::Control_AccSteerControl* acc_steer_cmd) {
  delete acc_steer_cmd_;
  acc_steer_cmd_ = acc_steer_cmd;
  if (acc_steer_cmd) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Control.acc_steer_cmd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ControlSAIC::kTorqueReqFieldNumber;
const int ControlSAIC::kSteerReqFieldNumber;
const int ControlSAIC::kDriveModeReqFieldNumber;
const int ControlSAIC::kBrakePressureReqFieldNumber;
const int ControlSAIC::kAccReqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ControlSAIC::ControlSAIC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_control_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.ControlSAIC)
}
ControlSAIC::ControlSAIC(const ControlSAIC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&torquereq_, &from.torquereq_,
    reinterpret_cast<char*>(&drivemodereq_) -
    reinterpret_cast<char*>(&torquereq_) + sizeof(drivemodereq_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.ControlSAIC)
}

void ControlSAIC::SharedCtor() {
  ::memset(&torquereq_, 0, reinterpret_cast<char*>(&drivemodereq_) -
    reinterpret_cast<char*>(&torquereq_) + sizeof(drivemodereq_));
  _cached_size_ = 0;
}

ControlSAIC::~ControlSAIC() {
  // @@protoc_insertion_point(destructor:sim_msg.ControlSAIC)
  SharedDtor();
}

void ControlSAIC::SharedDtor() {
}

void ControlSAIC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ControlSAIC::descriptor() {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[7].descriptor;
}

const ControlSAIC& ControlSAIC::default_instance() {
  protobuf_control_2eproto::InitDefaults();
  return *internal_default_instance();
}

ControlSAIC* ControlSAIC::New(::google::protobuf::Arena* arena) const {
  ControlSAIC* n = new ControlSAIC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ControlSAIC::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ControlSAIC)
  ::memset(&torquereq_, 0, reinterpret_cast<char*>(&drivemodereq_) -
    reinterpret_cast<char*>(&torquereq_) + sizeof(drivemodereq_));
}

bool ControlSAIC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.ControlSAIC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double torqueReq = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &torquereq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double steerReq = 2;
      case 2: {
        if (tag == 17u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steerreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 driveModeReq = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivemodereq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double brakePressureReq = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &brakepressurereq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double accReq = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &accreq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.ControlSAIC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.ControlSAIC)
  return false;
#undef DO_
}

void ControlSAIC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.ControlSAIC)
  // double torqueReq = 1;
  if (this->torquereq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->torquereq(), output);
  }

  // double steerReq = 2;
  if (this->steerreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->steerreq(), output);
  }

  // int32 driveModeReq = 3;
  if (this->drivemodereq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->drivemodereq(), output);
  }

  // double brakePressureReq = 4;
  if (this->brakepressurereq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->brakepressurereq(), output);
  }

  // double accReq = 5;
  if (this->accreq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->accreq(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.ControlSAIC)
}

::google::protobuf::uint8* ControlSAIC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ControlSAIC)
  // double torqueReq = 1;
  if (this->torquereq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->torquereq(), target);
  }

  // double steerReq = 2;
  if (this->steerreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->steerreq(), target);
  }

  // int32 driveModeReq = 3;
  if (this->drivemodereq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->drivemodereq(), target);
  }

  // double brakePressureReq = 4;
  if (this->brakepressurereq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->brakepressurereq(), target);
  }

  // double accReq = 5;
  if (this->accreq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->accreq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ControlSAIC)
  return target;
}

size_t ControlSAIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ControlSAIC)
  size_t total_size = 0;

  // double torqueReq = 1;
  if (this->torquereq() != 0) {
    total_size += 1 + 8;
  }

  // double steerReq = 2;
  if (this->steerreq() != 0) {
    total_size += 1 + 8;
  }

  // double brakePressureReq = 4;
  if (this->brakepressurereq() != 0) {
    total_size += 1 + 8;
  }

  // double accReq = 5;
  if (this->accreq() != 0) {
    total_size += 1 + 8;
  }

  // int32 driveModeReq = 3;
  if (this->drivemodereq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->drivemodereq());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ControlSAIC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.ControlSAIC)
  GOOGLE_DCHECK_NE(&from, this);
  const ControlSAIC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ControlSAIC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.ControlSAIC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.ControlSAIC)
    MergeFrom(*source);
  }
}

void ControlSAIC::MergeFrom(const ControlSAIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ControlSAIC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.torquereq() != 0) {
    set_torquereq(from.torquereq());
  }
  if (from.steerreq() != 0) {
    set_steerreq(from.steerreq());
  }
  if (from.brakepressurereq() != 0) {
    set_brakepressurereq(from.brakepressurereq());
  }
  if (from.accreq() != 0) {
    set_accreq(from.accreq());
  }
  if (from.drivemodereq() != 0) {
    set_drivemodereq(from.drivemodereq());
  }
}

void ControlSAIC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.ControlSAIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ControlSAIC::CopyFrom(const ControlSAIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ControlSAIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlSAIC::IsInitialized() const {
  return true;
}

void ControlSAIC::Swap(ControlSAIC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ControlSAIC::InternalSwap(ControlSAIC* other) {
  std::swap(torquereq_, other->torquereq_);
  std::swap(steerreq_, other->steerreq_);
  std::swap(brakepressurereq_, other->brakepressurereq_);
  std::swap(accreq_, other->accreq_);
  std::swap(drivemodereq_, other->drivemodereq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ControlSAIC::GetMetadata() const {
  protobuf_control_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_control_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ControlSAIC

// double torqueReq = 1;
void ControlSAIC::clear_torquereq() {
  torquereq_ = 0;
}
double ControlSAIC::torquereq() const {
  // @@protoc_insertion_point(field_get:sim_msg.ControlSAIC.torqueReq)
  return torquereq_;
}
void ControlSAIC::set_torquereq(double value) {
  
  torquereq_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ControlSAIC.torqueReq)
}

// double steerReq = 2;
void ControlSAIC::clear_steerreq() {
  steerreq_ = 0;
}
double ControlSAIC::steerreq() const {
  // @@protoc_insertion_point(field_get:sim_msg.ControlSAIC.steerReq)
  return steerreq_;
}
void ControlSAIC::set_steerreq(double value) {
  
  steerreq_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ControlSAIC.steerReq)
}

// int32 driveModeReq = 3;
void ControlSAIC::clear_drivemodereq() {
  drivemodereq_ = 0;
}
::google::protobuf::int32 ControlSAIC::drivemodereq() const {
  // @@protoc_insertion_point(field_get:sim_msg.ControlSAIC.driveModeReq)
  return drivemodereq_;
}
void ControlSAIC::set_drivemodereq(::google::protobuf::int32 value) {
  
  drivemodereq_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ControlSAIC.driveModeReq)
}

// double brakePressureReq = 4;
void ControlSAIC::clear_brakepressurereq() {
  brakepressurereq_ = 0;
}
double ControlSAIC::brakepressurereq() const {
  // @@protoc_insertion_point(field_get:sim_msg.ControlSAIC.brakePressureReq)
  return brakepressurereq_;
}
void ControlSAIC::set_brakepressurereq(double value) {
  
  brakepressurereq_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ControlSAIC.brakePressureReq)
}

// double accReq = 5;
void ControlSAIC::clear_accreq() {
  accreq_ = 0;
}
double ControlSAIC::accreq() const {
  // @@protoc_insertion_point(field_get:sim_msg.ControlSAIC.accReq)
  return accreq_;
}
void ControlSAIC::set_accreq(double value) {
  
  accreq_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.ControlSAIC.accReq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
