// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "trajectory.pb.h"
#include "location.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_traffic_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_traffic_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_2eproto;
namespace sim_msg {
class Car;
struct CarDefaultTypeInternal;
extern CarDefaultTypeInternal _Car_default_instance_;
class DynamicObstacle;
struct DynamicObstacleDefaultTypeInternal;
extern DynamicObstacleDefaultTypeInternal _DynamicObstacle_default_instance_;
class LaneUid;
struct LaneUidDefaultTypeInternal;
extern LaneUidDefaultTypeInternal _LaneUid_default_instance_;
class ManualVehicleControlInfo;
struct ManualVehicleControlInfoDefaultTypeInternal;
extern ManualVehicleControlInfoDefaultTypeInternal _ManualVehicleControlInfo_default_instance_;
class ManualVehicleControlInfoArray;
struct ManualVehicleControlInfoArrayDefaultTypeInternal;
extern ManualVehicleControlInfoArrayDefaultTypeInternal _ManualVehicleControlInfoArray_default_instance_;
class NearestObject;
struct NearestObjectDefaultTypeInternal;
extern NearestObjectDefaultTypeInternal _NearestObject_default_instance_;
class StaticObstacle;
struct StaticObstacleDefaultTypeInternal;
extern StaticObstacleDefaultTypeInternal _StaticObstacle_default_instance_;
class Traffic;
struct TrafficDefaultTypeInternal;
extern TrafficDefaultTypeInternal _Traffic_default_instance_;
class TrafficLight;
struct TrafficLightDefaultTypeInternal;
extern TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> ::sim_msg::Car* Arena::CreateMaybeMessage<::sim_msg::Car>(Arena*);
template<> ::sim_msg::DynamicObstacle* Arena::CreateMaybeMessage<::sim_msg::DynamicObstacle>(Arena*);
template<> ::sim_msg::LaneUid* Arena::CreateMaybeMessage<::sim_msg::LaneUid>(Arena*);
template<> ::sim_msg::ManualVehicleControlInfo* Arena::CreateMaybeMessage<::sim_msg::ManualVehicleControlInfo>(Arena*);
template<> ::sim_msg::ManualVehicleControlInfoArray* Arena::CreateMaybeMessage<::sim_msg::ManualVehicleControlInfoArray>(Arena*);
template<> ::sim_msg::NearestObject* Arena::CreateMaybeMessage<::sim_msg::NearestObject>(Arena*);
template<> ::sim_msg::StaticObstacle* Arena::CreateMaybeMessage<::sim_msg::StaticObstacle>(Arena*);
template<> ::sim_msg::Traffic* Arena::CreateMaybeMessage<::sim_msg::Traffic>(Arena*);
template<> ::sim_msg::TrafficLight* Arena::CreateMaybeMessage<::sim_msg::TrafficLight>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace sim_msg {

enum ControlState : int {
  Autonomous = 0,
  Manual = 1,
  ControlState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ControlState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ControlState_IsValid(int value);
constexpr ControlState ControlState_MIN = Autonomous;
constexpr ControlState ControlState_MAX = Manual;
constexpr int ControlState_ARRAYSIZE = ControlState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlState_descriptor();
template<typename T>
inline const std::string& ControlState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ControlState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ControlState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ControlState_descriptor(), enum_t_value);
}
inline bool ControlState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ControlState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ControlState>(
    ControlState_descriptor(), name, value);
}
enum NearestObjectDirection : int {
  FRONT = 0,
  BACK_DIRECTION = 1,
  LEFT = 2,
  LEFT_FRONT = 3,
  LEFT_BACK = 4,
  RIGHT = 5,
  RIGHT_FRONT = 6,
  RIGHT_BACK = 7,
  NearestObjectDirection_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NearestObjectDirection_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NearestObjectDirection_IsValid(int value);
constexpr NearestObjectDirection NearestObjectDirection_MIN = FRONT;
constexpr NearestObjectDirection NearestObjectDirection_MAX = RIGHT_BACK;
constexpr int NearestObjectDirection_ARRAYSIZE = NearestObjectDirection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NearestObjectDirection_descriptor();
template<typename T>
inline const std::string& NearestObjectDirection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NearestObjectDirection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NearestObjectDirection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NearestObjectDirection_descriptor(), enum_t_value);
}
inline bool NearestObjectDirection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NearestObjectDirection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NearestObjectDirection>(
    NearestObjectDirection_descriptor(), name, value);
}
enum Phase : int {
  U = 0,
  L = 1,
  T = 2,
  R = 3,
  Phase_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Phase_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Phase_IsValid(int value);
constexpr Phase Phase_MIN = U;
constexpr Phase Phase_MAX = R;
constexpr int Phase_ARRAYSIZE = Phase_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor();
template<typename T>
inline const std::string& Phase_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Phase>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Phase_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Phase_descriptor(), enum_t_value);
}
inline bool Phase_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Phase* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Phase>(
    Phase_descriptor(), name, value);
}
// ===================================================================

class ManualVehicleControlInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfo) */ {
 public:
  inline ManualVehicleControlInfo() : ManualVehicleControlInfo(nullptr) {}
  ~ManualVehicleControlInfo() override;
  explicit constexpr ManualVehicleControlInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManualVehicleControlInfo(const ManualVehicleControlInfo& from);
  ManualVehicleControlInfo(ManualVehicleControlInfo&& from) noexcept
    : ManualVehicleControlInfo() {
    *this = ::std::move(from);
  }

  inline ManualVehicleControlInfo& operator=(const ManualVehicleControlInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualVehicleControlInfo& operator=(ManualVehicleControlInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManualVehicleControlInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManualVehicleControlInfo* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfo*>(
               &_ManualVehicleControlInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ManualVehicleControlInfo& a, ManualVehicleControlInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualVehicleControlInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualVehicleControlInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfo* New() const final {
    return new ManualVehicleControlInfo();
  }

  ManualVehicleControlInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualVehicleControlInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManualVehicleControlInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManualVehicleControlInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualVehicleControlInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ManualVehicleControlInfo";
  }
  protected:
  explicit ManualVehicleControlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehControlInfoFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // .sim_msg.Location veh_control_info = 2;
  bool has_veh_control_info() const;
  private:
  bool _internal_has_veh_control_info() const;
  public:
  void clear_veh_control_info();
  const ::sim_msg::Location& veh_control_info() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Location* release_veh_control_info();
  ::sim_msg::Location* mutable_veh_control_info();
  void set_allocated_veh_control_info(::sim_msg::Location* veh_control_info);
  private:
  const ::sim_msg::Location& _internal_veh_control_info() const;
  ::sim_msg::Location* _internal_mutable_veh_control_info();
  public:
  void unsafe_arena_set_allocated_veh_control_info(
      ::sim_msg::Location* veh_control_info);
  ::sim_msg::Location* unsafe_arena_release_veh_control_info();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::sim_msg::Location* veh_control_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class ManualVehicleControlInfoArray final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.ManualVehicleControlInfoArray) */ {
 public:
  inline ManualVehicleControlInfoArray() : ManualVehicleControlInfoArray(nullptr) {}
  ~ManualVehicleControlInfoArray() override;
  explicit constexpr ManualVehicleControlInfoArray(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from);
  ManualVehicleControlInfoArray(ManualVehicleControlInfoArray&& from) noexcept
    : ManualVehicleControlInfoArray() {
    *this = ::std::move(from);
  }

  inline ManualVehicleControlInfoArray& operator=(const ManualVehicleControlInfoArray& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManualVehicleControlInfoArray& operator=(ManualVehicleControlInfoArray&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManualVehicleControlInfoArray& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManualVehicleControlInfoArray* internal_default_instance() {
    return reinterpret_cast<const ManualVehicleControlInfoArray*>(
               &_ManualVehicleControlInfoArray_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ManualVehicleControlInfoArray& a, ManualVehicleControlInfoArray& b) {
    a.Swap(&b);
  }
  inline void Swap(ManualVehicleControlInfoArray* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManualVehicleControlInfoArray* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ManualVehicleControlInfoArray* New() const final {
    return new ManualVehicleControlInfoArray();
  }

  ManualVehicleControlInfoArray* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ManualVehicleControlInfoArray>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ManualVehicleControlInfoArray& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ManualVehicleControlInfoArray& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ManualVehicleControlInfoArray* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.ManualVehicleControlInfoArray";
  }
  protected:
  explicit ManualVehicleControlInfoArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVehiclesControlInfoFieldNumber = 1,
  };
  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  int vehicles_control_info_size() const;
  private:
  int _internal_vehicles_control_info_size() const;
  public:
  void clear_vehicles_control_info();
  ::sim_msg::ManualVehicleControlInfo* mutable_vehicles_control_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
      mutable_vehicles_control_info();
  private:
  const ::sim_msg::ManualVehicleControlInfo& _internal_vehicles_control_info(int index) const;
  ::sim_msg::ManualVehicleControlInfo* _internal_add_vehicles_control_info();
  public:
  const ::sim_msg::ManualVehicleControlInfo& vehicles_control_info(int index) const;
  ::sim_msg::ManualVehicleControlInfo* add_vehicles_control_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
      vehicles_control_info() const;

  // @@protoc_insertion_point(class_scope:sim_msg.ManualVehicleControlInfoArray)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo > vehicles_control_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class NearestObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.NearestObject) */ {
 public:
  inline NearestObject() : NearestObject(nullptr) {}
  ~NearestObject() override;
  explicit constexpr NearestObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NearestObject(const NearestObject& from);
  NearestObject(NearestObject&& from) noexcept
    : NearestObject() {
    *this = ::std::move(from);
  }

  inline NearestObject& operator=(const NearestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearestObject& operator=(NearestObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NearestObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const NearestObject* internal_default_instance() {
    return reinterpret_cast<const NearestObject*>(
               &_NearestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NearestObject& a, NearestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(NearestObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearestObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NearestObject* New() const final {
    return new NearestObject();
  }

  NearestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NearestObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NearestObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NearestObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearestObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.NearestObject";
  }
  protected:
  explicit NearestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEuclidDistFieldNumber = 2,
    kIdFieldNumber = 1,
    kDirFieldNumber = 3,
  };
  // double euclid_dist = 2;
  void clear_euclid_dist();
  double euclid_dist() const;
  void set_euclid_dist(double value);
  private:
  double _internal_euclid_dist() const;
  void _internal_set_euclid_dist(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .sim_msg.NearestObjectDirection dir = 3;
  void clear_dir();
  ::sim_msg::NearestObjectDirection dir() const;
  void set_dir(::sim_msg::NearestObjectDirection value);
  private:
  ::sim_msg::NearestObjectDirection _internal_dir() const;
  void _internal_set_dir(::sim_msg::NearestObjectDirection value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.NearestObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double euclid_dist_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int dir_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class Car final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Car) */ {
 public:
  inline Car() : Car(nullptr) {}
  ~Car() override;
  explicit constexpr Car(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Car(const Car& from);
  Car(Car&& from) noexcept
    : Car() {
    *this = ::std::move(from);
  }

  inline Car& operator=(const Car& from) {
    CopyFrom(from);
    return *this;
  }
  inline Car& operator=(Car&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Car& default_instance() {
    return *internal_default_instance();
  }
  static inline const Car* internal_default_instance() {
    return reinterpret_cast<const Car*>(
               &_Car_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Car& a, Car& b) {
    a.Swap(&b);
  }
  inline void Swap(Car* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Car* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Car* New() const final {
    return new Car();
  }

  Car* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Car>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Car& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Car& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Car* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Car";
  }
  protected:
  explicit Car(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShowNearestObjectInfoFieldNumber = 31,
    kPlanningLineFieldNumber = 21,
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kVFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 12,
    kVlFieldNumber = 7,
    kThetaFieldNumber = 8,
    kLengthFieldNumber = 9,
    kWidthFieldNumber = 10,
    kHeightFieldNumber = 11,
    kAccFieldNumber = 14,
    kLaneIdFieldNumber = 13,
    kAgeFieldNumber = 15,
    kZFieldNumber = 16,
    kTxRoadIdFieldNumber = 17,
    kTxSectionIdFieldNumber = 18,
    kTxLaneIdFieldNumber = 19,
    kTxLanelinkIdFieldNumber = 20,
    kShowAbsVelocityFieldNumber = 22,
    kShowAbsAccFieldNumber = 23,
    kShowRelativeVelocityFieldNumber = 24,
    kShowRelativeAccFieldNumber = 25,
    kShowRelativeVelocityHorizontalFieldNumber = 26,
    kShowRelativeAccHorizontalFieldNumber = 27,
    kShowRelativeDistVerticalFieldNumber = 28,
    kShowRelativeDistHorizontalFieldNumber = 29,
    kControlStateFieldNumber = 30,
  };
  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  int show_nearestobjectinfo_size() const;
  private:
  int _internal_show_nearestobjectinfo_size() const;
  public:
  void clear_show_nearestobjectinfo();
  ::sim_msg::NearestObject* mutable_show_nearestobjectinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >*
      mutable_show_nearestobjectinfo();
  private:
  const ::sim_msg::NearestObject& _internal_show_nearestobjectinfo(int index) const;
  ::sim_msg::NearestObject* _internal_add_show_nearestobjectinfo();
  public:
  const ::sim_msg::NearestObject& show_nearestobjectinfo(int index) const;
  ::sim_msg::NearestObject* add_show_nearestobjectinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >&
      show_nearestobjectinfo() const;

  // .sim_msg.Trajectory planning_line = 21;
  bool has_planning_line() const;
  private:
  bool _internal_has_planning_line() const;
  public:
  void clear_planning_line();
  const ::sim_msg::Trajectory& planning_line() const;
  PROTOBUF_MUST_USE_RESULT ::sim_msg::Trajectory* release_planning_line();
  ::sim_msg::Trajectory* mutable_planning_line();
  void set_allocated_planning_line(::sim_msg::Trajectory* planning_line);
  private:
  const ::sim_msg::Trajectory& _internal_planning_line() const;
  ::sim_msg::Trajectory* _internal_mutable_planning_line();
  public:
  void unsafe_arena_set_allocated_planning_line(
      ::sim_msg::Trajectory* planning_line);
  ::sim_msg::Trajectory* unsafe_arena_release_planning_line();

  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double v = 6;
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 12;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double vl = 7;
  void clear_vl();
  double vl() const;
  void set_vl(double value);
  private:
  double _internal_vl() const;
  void _internal_set_vl(double value);
  public:

  // double theta = 8;
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // double length = 9;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 10;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 11;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double acc = 14;
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // int32 laneId = 13;
  void clear_laneid();
  ::PROTOBUF_NAMESPACE_ID::int32 laneid() const;
  void set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_laneid() const;
  void _internal_set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 age = 15;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double z = 16;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // uint64 tx_road_id = 17;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_road_id() const;
  void _internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_section_id = 18;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_section_id() const;
  void _internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 tx_lane_id = 19;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tx_lane_id() const;
  void _internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint64 tx_lanelink_id = 20;
  void clear_tx_lanelink_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_lanelink_id() const;
  void set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_lanelink_id() const;
  void _internal_set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // double show_abs_velocity = 22;
  void clear_show_abs_velocity();
  double show_abs_velocity() const;
  void set_show_abs_velocity(double value);
  private:
  double _internal_show_abs_velocity() const;
  void _internal_set_show_abs_velocity(double value);
  public:

  // double show_abs_acc = 23;
  void clear_show_abs_acc();
  double show_abs_acc() const;
  void set_show_abs_acc(double value);
  private:
  double _internal_show_abs_acc() const;
  void _internal_set_show_abs_acc(double value);
  public:

  // double show_relative_velocity = 24;
  void clear_show_relative_velocity();
  double show_relative_velocity() const;
  void set_show_relative_velocity(double value);
  private:
  double _internal_show_relative_velocity() const;
  void _internal_set_show_relative_velocity(double value);
  public:

  // double show_relative_acc = 25;
  void clear_show_relative_acc();
  double show_relative_acc() const;
  void set_show_relative_acc(double value);
  private:
  double _internal_show_relative_acc() const;
  void _internal_set_show_relative_acc(double value);
  public:

  // double show_relative_velocity_horizontal = 26;
  void clear_show_relative_velocity_horizontal();
  double show_relative_velocity_horizontal() const;
  void set_show_relative_velocity_horizontal(double value);
  private:
  double _internal_show_relative_velocity_horizontal() const;
  void _internal_set_show_relative_velocity_horizontal(double value);
  public:

  // double show_relative_acc_horizontal = 27;
  void clear_show_relative_acc_horizontal();
  double show_relative_acc_horizontal() const;
  void set_show_relative_acc_horizontal(double value);
  private:
  double _internal_show_relative_acc_horizontal() const;
  void _internal_set_show_relative_acc_horizontal(double value);
  public:

  // double show_relative_dist_vertical = 28;
  void clear_show_relative_dist_vertical();
  double show_relative_dist_vertical() const;
  void set_show_relative_dist_vertical(double value);
  private:
  double _internal_show_relative_dist_vertical() const;
  void _internal_set_show_relative_dist_vertical(double value);
  public:

  // double show_relative_dist_horizontal = 29;
  void clear_show_relative_dist_horizontal();
  double show_relative_dist_horizontal() const;
  void set_show_relative_dist_horizontal(double value);
  private:
  double _internal_show_relative_dist_horizontal() const;
  void _internal_set_show_relative_dist_horizontal(double value);
  public:

  // .sim_msg.ControlState control_state = 30;
  void clear_control_state();
  ::sim_msg::ControlState control_state() const;
  void set_control_state(::sim_msg::ControlState value);
  private:
  ::sim_msg::ControlState _internal_control_state() const;
  void _internal_set_control_state(::sim_msg::ControlState value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.Car)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject > show_nearestobjectinfo_;
  ::sim_msg::Trajectory* planning_line_;
  double t_;
  double x_;
  double y_;
  double heading_;
  double v_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double vl_;
  double theta_;
  double length_;
  double width_;
  double height_;
  double acc_;
  ::PROTOBUF_NAMESPACE_ID::int32 laneid_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_lanelink_id_;
  double show_abs_velocity_;
  double show_abs_acc_;
  double show_relative_velocity_;
  double show_relative_acc_;
  double show_relative_velocity_horizontal_;
  double show_relative_acc_horizontal_;
  double show_relative_dist_vertical_;
  double show_relative_dist_horizontal_;
  int control_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class StaticObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.StaticObstacle) */ {
 public:
  inline StaticObstacle() : StaticObstacle(nullptr) {}
  ~StaticObstacle() override;
  explicit constexpr StaticObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StaticObstacle(const StaticObstacle& from);
  StaticObstacle(StaticObstacle&& from) noexcept
    : StaticObstacle() {
    *this = ::std::move(from);
  }

  inline StaticObstacle& operator=(const StaticObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline StaticObstacle& operator=(StaticObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StaticObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const StaticObstacle* internal_default_instance() {
    return reinterpret_cast<const StaticObstacle*>(
               &_StaticObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StaticObstacle& a, StaticObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(StaticObstacle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StaticObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StaticObstacle* New() const final {
    return new StaticObstacle();
  }

  StaticObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StaticObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StaticObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StaticObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StaticObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.StaticObstacle";
  }
  protected:
  explicit StaticObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 9,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kZFieldNumber = 11,
    kAgeFieldNumber = 10,
  };
  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 9;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 7;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 8;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double z = 11;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // int32 age = 10;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.StaticObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double length_;
  double width_;
  double height_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class DynamicObstacle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.DynamicObstacle) */ {
 public:
  inline DynamicObstacle() : DynamicObstacle(nullptr) {}
  ~DynamicObstacle() override;
  explicit constexpr DynamicObstacle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicObstacle(const DynamicObstacle& from);
  DynamicObstacle(DynamicObstacle&& from) noexcept
    : DynamicObstacle() {
    *this = ::std::move(from);
  }

  inline DynamicObstacle& operator=(const DynamicObstacle& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicObstacle& operator=(DynamicObstacle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicObstacle& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicObstacle* internal_default_instance() {
    return reinterpret_cast<const DynamicObstacle*>(
               &_DynamicObstacle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DynamicObstacle& a, DynamicObstacle& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicObstacle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicObstacle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DynamicObstacle* New() const final {
    return new DynamicObstacle();
  }

  DynamicObstacle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DynamicObstacle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicObstacle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DynamicObstacle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicObstacle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.DynamicObstacle";
  }
  protected:
  explicit DynamicObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTFieldNumber = 2,
    kXFieldNumber = 3,
    kYFieldNumber = 4,
    kHeadingFieldNumber = 5,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 9,
    kLengthFieldNumber = 6,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kVFieldNumber = 10,
    kVlFieldNumber = 11,
    kAccFieldNumber = 12,
    kZFieldNumber = 14,
    kAgeFieldNumber = 13,
  };
  // double t = 2;
  void clear_t();
  double t() const;
  void set_t(double value);
  private:
  double _internal_t() const;
  void _internal_set_t(double value);
  public:

  // double x = 3;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 4;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double heading = 5;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 type = 9;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double length = 6;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 7;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 8;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double v = 10;
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // double vl = 11;
  void clear_vl();
  double vl() const;
  void set_vl(double value);
  private:
  double _internal_vl() const;
  void _internal_set_vl(double value);
  public:

  // double acc = 12;
  void clear_acc();
  double acc() const;
  void set_acc(double value);
  private:
  double _internal_acc() const;
  void _internal_set_acc(double value);
  public:

  // double z = 14;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // int32 age = 13;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.DynamicObstacle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double t_;
  double x_;
  double y_;
  double heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  double length_;
  double width_;
  double height_;
  double v_;
  double vl_;
  double acc_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class LaneUid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.LaneUid) */ {
 public:
  inline LaneUid() : LaneUid(nullptr) {}
  ~LaneUid() override;
  explicit constexpr LaneUid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LaneUid(const LaneUid& from);
  LaneUid(LaneUid&& from) noexcept
    : LaneUid() {
    *this = ::std::move(from);
  }

  inline LaneUid& operator=(const LaneUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline LaneUid& operator=(LaneUid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LaneUid& default_instance() {
    return *internal_default_instance();
  }
  static inline const LaneUid* internal_default_instance() {
    return reinterpret_cast<const LaneUid*>(
               &_LaneUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LaneUid& a, LaneUid& b) {
    a.Swap(&b);
  }
  inline void Swap(LaneUid* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LaneUid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LaneUid* New() const final {
    return new LaneUid();
  }

  LaneUid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LaneUid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LaneUid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LaneUid& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LaneUid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.LaneUid";
  }
  protected:
  explicit LaneUid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTxRoadIdFieldNumber = 1,
    kTxSectionIdFieldNumber = 2,
    kTxLaneIdFieldNumber = 3,
  };
  // uint64 tx_road_id = 1;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_road_id() const;
  void _internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_section_id = 2;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_section_id() const;
  void _internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 tx_lane_id = 3;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tx_lane_id() const;
  void _internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.LaneUid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class TrafficLight final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.TrafficLight) */ {
 public:
  inline TrafficLight() : TrafficLight(nullptr) {}
  ~TrafficLight() override;
  explicit constexpr TrafficLight(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TrafficLight(const TrafficLight& from);
  TrafficLight(TrafficLight&& from) noexcept
    : TrafficLight() {
    *this = ::std::move(from);
  }

  inline TrafficLight& operator=(const TrafficLight& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrafficLight& operator=(TrafficLight&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TrafficLight& default_instance() {
    return *internal_default_instance();
  }
  static inline const TrafficLight* internal_default_instance() {
    return reinterpret_cast<const TrafficLight*>(
               &_TrafficLight_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TrafficLight& a, TrafficLight& b) {
    a.Swap(&b);
  }
  inline void Swap(TrafficLight* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrafficLight* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrafficLight* New() const final {
    return new TrafficLight();
  }

  TrafficLight* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrafficLight>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TrafficLight& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TrafficLight& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrafficLight* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.TrafficLight";
  }
  protected:
  explicit TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlLanesFieldNumber = 11,
    kControlPhasesFieldNumber = 12,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kIdFieldNumber = 1,
    kColorFieldNumber = 5,
    kHeadingFieldNumber = 4,
    kZFieldNumber = 7,
    kTxRoadIdFieldNumber = 8,
    kTxSectionIdFieldNumber = 9,
    kTxLaneIdFieldNumber = 10,
    kAgeFieldNumber = 6,
  };
  // repeated .sim_msg.LaneUid control_lanes = 11;
  int control_lanes_size() const;
  private:
  int _internal_control_lanes_size() const;
  public:
  void clear_control_lanes();
  ::sim_msg::LaneUid* mutable_control_lanes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >*
      mutable_control_lanes();
  private:
  const ::sim_msg::LaneUid& _internal_control_lanes(int index) const;
  ::sim_msg::LaneUid* _internal_add_control_lanes();
  public:
  const ::sim_msg::LaneUid& control_lanes(int index) const;
  ::sim_msg::LaneUid* add_control_lanes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >&
      control_lanes() const;

  // repeated .sim_msg.Phase control_phases = 12;
  int control_phases_size() const;
  private:
  int _internal_control_phases_size() const;
  public:
  void clear_control_phases();
  private:
  ::sim_msg::Phase _internal_control_phases(int index) const;
  void _internal_add_control_phases(::sim_msg::Phase value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_control_phases();
  public:
  ::sim_msg::Phase control_phases(int index) const;
  void set_control_phases(int index, ::sim_msg::Phase value);
  void add_control_phases(::sim_msg::Phase value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& control_phases() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_control_phases();

  // double x = 2;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 3;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 color = 5;
  void clear_color();
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_color() const;
  void _internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // double heading = 4;
  void clear_heading();
  double heading() const;
  void set_heading(double value);
  private:
  double _internal_heading() const;
  void _internal_set_heading(double value);
  public:

  // double z = 7;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // uint64 tx_road_id = 8;
  void clear_tx_road_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id() const;
  void set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_road_id() const;
  void _internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 tx_section_id = 9;
  void clear_tx_section_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id() const;
  void set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_tx_section_id() const;
  void _internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // int64 tx_lane_id = 10;
  void clear_tx_lane_id();
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id() const;
  void set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tx_lane_id() const;
  void _internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 age = 6;
  void clear_age();
  ::PROTOBUF_NAMESPACE_ID::int32 age() const;
  void set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_age() const;
  void _internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:sim_msg.TrafficLight)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid > control_lanes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> control_phases_;
  mutable std::atomic<int> _control_phases_cached_byte_size_;
  double x_;
  double y_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  double heading_;
  double z_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_road_id_;
  ::PROTOBUF_NAMESPACE_ID::uint64 tx_section_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 tx_lane_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 age_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// -------------------------------------------------------------------

class Traffic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:sim_msg.Traffic) */ {
 public:
  inline Traffic() : Traffic(nullptr) {}
  ~Traffic() override;
  explicit constexpr Traffic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Traffic(const Traffic& from);
  Traffic(Traffic&& from) noexcept
    : Traffic() {
    *this = ::std::move(from);
  }

  inline Traffic& operator=(const Traffic& from) {
    CopyFrom(from);
    return *this;
  }
  inline Traffic& operator=(Traffic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Traffic& default_instance() {
    return *internal_default_instance();
  }
  static inline const Traffic* internal_default_instance() {
    return reinterpret_cast<const Traffic*>(
               &_Traffic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Traffic& a, Traffic& b) {
    a.Swap(&b);
  }
  inline void Swap(Traffic* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Traffic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Traffic* New() const final {
    return new Traffic();
  }

  Traffic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Traffic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Traffic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Traffic& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Traffic* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "sim_msg.Traffic";
  }
  protected:
  explicit Traffic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCarsFieldNumber = 1,
    kStaticObstaclesFieldNumber = 2,
    kDynamicObstaclesFieldNumber = 3,
    kTrafficLightsFieldNumber = 4,
  };
  // repeated .sim_msg.Car cars = 1;
  int cars_size() const;
  private:
  int _internal_cars_size() const;
  public:
  void clear_cars();
  ::sim_msg::Car* mutable_cars(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >*
      mutable_cars();
  private:
  const ::sim_msg::Car& _internal_cars(int index) const;
  ::sim_msg::Car* _internal_add_cars();
  public:
  const ::sim_msg::Car& cars(int index) const;
  ::sim_msg::Car* add_cars();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >&
      cars() const;

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  int staticobstacles_size() const;
  private:
  int _internal_staticobstacles_size() const;
  public:
  void clear_staticobstacles();
  ::sim_msg::StaticObstacle* mutable_staticobstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >*
      mutable_staticobstacles();
  private:
  const ::sim_msg::StaticObstacle& _internal_staticobstacles(int index) const;
  ::sim_msg::StaticObstacle* _internal_add_staticobstacles();
  public:
  const ::sim_msg::StaticObstacle& staticobstacles(int index) const;
  ::sim_msg::StaticObstacle* add_staticobstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >&
      staticobstacles() const;

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  int dynamicobstacles_size() const;
  private:
  int _internal_dynamicobstacles_size() const;
  public:
  void clear_dynamicobstacles();
  ::sim_msg::DynamicObstacle* mutable_dynamicobstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
      mutable_dynamicobstacles();
  private:
  const ::sim_msg::DynamicObstacle& _internal_dynamicobstacles(int index) const;
  ::sim_msg::DynamicObstacle* _internal_add_dynamicobstacles();
  public:
  const ::sim_msg::DynamicObstacle& dynamicobstacles(int index) const;
  ::sim_msg::DynamicObstacle* add_dynamicobstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
      dynamicobstacles() const;

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  int trafficlights_size() const;
  private:
  int _internal_trafficlights_size() const;
  public:
  void clear_trafficlights();
  ::sim_msg::TrafficLight* mutable_trafficlights(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >*
      mutable_trafficlights();
  private:
  const ::sim_msg::TrafficLight& _internal_trafficlights(int index) const;
  ::sim_msg::TrafficLight* _internal_add_trafficlights();
  public:
  const ::sim_msg::TrafficLight& trafficlights(int index) const;
  ::sim_msg::TrafficLight* add_trafficlights();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >&
      trafficlights() const;

  // @@protoc_insertion_point(class_scope:sim_msg.Traffic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car > cars_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle > staticobstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle > dynamicobstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight > trafficlights_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_traffic_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ManualVehicleControlInfo

// int32 id = 1;
inline void ManualVehicleControlInfo::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManualVehicleControlInfo::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ManualVehicleControlInfo::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.id)
  return _internal_id();
}
inline void ManualVehicleControlInfo::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ManualVehicleControlInfo::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.ManualVehicleControlInfo.id)
}

// .sim_msg.Location veh_control_info = 2;
inline bool ManualVehicleControlInfo::_internal_has_veh_control_info() const {
  return this != internal_default_instance() && veh_control_info_ != nullptr;
}
inline bool ManualVehicleControlInfo::has_veh_control_info() const {
  return _internal_has_veh_control_info();
}
inline const ::sim_msg::Location& ManualVehicleControlInfo::_internal_veh_control_info() const {
  const ::sim_msg::Location* p = veh_control_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Location&>(
      ::sim_msg::_Location_default_instance_);
}
inline const ::sim_msg::Location& ManualVehicleControlInfo::veh_control_info() const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return _internal_veh_control_info();
}
inline void ManualVehicleControlInfo::unsafe_arena_set_allocated_veh_control_info(
    ::sim_msg::Location* veh_control_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_control_info_);
  }
  veh_control_info_ = veh_control_info;
  if (veh_control_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.ManualVehicleControlInfo.veh_control_info)
}
inline ::sim_msg::Location* ManualVehicleControlInfo::release_veh_control_info() {
  
  ::sim_msg::Location* temp = veh_control_info_;
  veh_control_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Location* ManualVehicleControlInfo::unsafe_arena_release_veh_control_info() {
  // @@protoc_insertion_point(field_release:sim_msg.ManualVehicleControlInfo.veh_control_info)
  
  ::sim_msg::Location* temp = veh_control_info_;
  veh_control_info_ = nullptr;
  return temp;
}
inline ::sim_msg::Location* ManualVehicleControlInfo::_internal_mutable_veh_control_info() {
  
  if (veh_control_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Location>(GetArenaForAllocation());
    veh_control_info_ = p;
  }
  return veh_control_info_;
}
inline ::sim_msg::Location* ManualVehicleControlInfo::mutable_veh_control_info() {
  ::sim_msg::Location* _msg = _internal_mutable_veh_control_info();
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfo.veh_control_info)
  return _msg;
}
inline void ManualVehicleControlInfo::set_allocated_veh_control_info(::sim_msg::Location* veh_control_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_control_info_);
  }
  if (veh_control_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(veh_control_info));
    if (message_arena != submessage_arena) {
      veh_control_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, veh_control_info, submessage_arena);
    }
    
  } else {
    
  }
  veh_control_info_ = veh_control_info;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.ManualVehicleControlInfo.veh_control_info)
}

// -------------------------------------------------------------------

// ManualVehicleControlInfoArray

// repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
inline int ManualVehicleControlInfoArray::_internal_vehicles_control_info_size() const {
  return vehicles_control_info_.size();
}
inline int ManualVehicleControlInfoArray::vehicles_control_info_size() const {
  return _internal_vehicles_control_info_size();
}
inline void ManualVehicleControlInfoArray::clear_vehicles_control_info() {
  vehicles_control_info_.Clear();
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::mutable_vehicles_control_info(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >*
ManualVehicleControlInfoArray::mutable_vehicles_control_info() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return &vehicles_control_info_;
}
inline const ::sim_msg::ManualVehicleControlInfo& ManualVehicleControlInfoArray::_internal_vehicles_control_info(int index) const {
  return vehicles_control_info_.Get(index);
}
inline const ::sim_msg::ManualVehicleControlInfo& ManualVehicleControlInfoArray::vehicles_control_info(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return _internal_vehicles_control_info(index);
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::_internal_add_vehicles_control_info() {
  return vehicles_control_info_.Add();
}
inline ::sim_msg::ManualVehicleControlInfo* ManualVehicleControlInfoArray::add_vehicles_control_info() {
  ::sim_msg::ManualVehicleControlInfo* _add = _internal_add_vehicles_control_info();
  // @@protoc_insertion_point(field_add:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::ManualVehicleControlInfo >&
ManualVehicleControlInfoArray::vehicles_control_info() const {
  // @@protoc_insertion_point(field_list:sim_msg.ManualVehicleControlInfoArray.vehicles_control_info)
  return vehicles_control_info_;
}

// -------------------------------------------------------------------

// NearestObject

// int32 id = 1;
inline void NearestObject::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NearestObject::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NearestObject::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.id)
  return _internal_id();
}
inline void NearestObject::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void NearestObject::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.id)
}

// double euclid_dist = 2;
inline void NearestObject::clear_euclid_dist() {
  euclid_dist_ = 0;
}
inline double NearestObject::_internal_euclid_dist() const {
  return euclid_dist_;
}
inline double NearestObject::euclid_dist() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.euclid_dist)
  return _internal_euclid_dist();
}
inline void NearestObject::_internal_set_euclid_dist(double value) {
  
  euclid_dist_ = value;
}
inline void NearestObject::set_euclid_dist(double value) {
  _internal_set_euclid_dist(value);
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.euclid_dist)
}

// .sim_msg.NearestObjectDirection dir = 3;
inline void NearestObject::clear_dir() {
  dir_ = 0;
}
inline ::sim_msg::NearestObjectDirection NearestObject::_internal_dir() const {
  return static_cast< ::sim_msg::NearestObjectDirection >(dir_);
}
inline ::sim_msg::NearestObjectDirection NearestObject::dir() const {
  // @@protoc_insertion_point(field_get:sim_msg.NearestObject.dir)
  return _internal_dir();
}
inline void NearestObject::_internal_set_dir(::sim_msg::NearestObjectDirection value) {
  
  dir_ = value;
}
inline void NearestObject::set_dir(::sim_msg::NearestObjectDirection value) {
  _internal_set_dir(value);
  // @@protoc_insertion_point(field_set:sim_msg.NearestObject.dir)
}

// -------------------------------------------------------------------

// Car

// int32 id = 1;
inline void Car::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.id)
  return _internal_id();
}
inline void Car::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Car::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.id)
}

// double t = 2;
inline void Car::clear_t() {
  t_ = 0;
}
inline double Car::_internal_t() const {
  return t_;
}
inline double Car::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.t)
  return _internal_t();
}
inline void Car::_internal_set_t(double value) {
  
  t_ = value;
}
inline void Car::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.t)
}

// double x = 3;
inline void Car::clear_x() {
  x_ = 0;
}
inline double Car::_internal_x() const {
  return x_;
}
inline double Car::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.x)
  return _internal_x();
}
inline void Car::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Car::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.x)
}

// double y = 4;
inline void Car::clear_y() {
  y_ = 0;
}
inline double Car::_internal_y() const {
  return y_;
}
inline double Car::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.y)
  return _internal_y();
}
inline void Car::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Car::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.y)
}

// double heading = 5;
inline void Car::clear_heading() {
  heading_ = 0;
}
inline double Car::_internal_heading() const {
  return heading_;
}
inline double Car::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.heading)
  return _internal_heading();
}
inline void Car::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void Car::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.heading)
}

// double v = 6;
inline void Car::clear_v() {
  v_ = 0;
}
inline double Car::_internal_v() const {
  return v_;
}
inline double Car::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.v)
  return _internal_v();
}
inline void Car::_internal_set_v(double value) {
  
  v_ = value;
}
inline void Car::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.v)
}

// double vl = 7;
inline void Car::clear_vl() {
  vl_ = 0;
}
inline double Car::_internal_vl() const {
  return vl_;
}
inline double Car::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.vl)
  return _internal_vl();
}
inline void Car::_internal_set_vl(double value) {
  
  vl_ = value;
}
inline void Car::set_vl(double value) {
  _internal_set_vl(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.vl)
}

// double theta = 8;
inline void Car::clear_theta() {
  theta_ = 0;
}
inline double Car::_internal_theta() const {
  return theta_;
}
inline double Car::theta() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.theta)
  return _internal_theta();
}
inline void Car::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Car::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.theta)
}

// double length = 9;
inline void Car::clear_length() {
  length_ = 0;
}
inline double Car::_internal_length() const {
  return length_;
}
inline double Car::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.length)
  return _internal_length();
}
inline void Car::_internal_set_length(double value) {
  
  length_ = value;
}
inline void Car::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.length)
}

// double width = 10;
inline void Car::clear_width() {
  width_ = 0;
}
inline double Car::_internal_width() const {
  return width_;
}
inline double Car::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.width)
  return _internal_width();
}
inline void Car::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Car::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.width)
}

// double height = 11;
inline void Car::clear_height() {
  height_ = 0;
}
inline double Car::_internal_height() const {
  return height_;
}
inline double Car::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.height)
  return _internal_height();
}
inline void Car::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Car::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.height)
}

// int32 type = 12;
inline void Car::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.type)
  return _internal_type();
}
inline void Car::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void Car::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.type)
}

// int32 laneId = 13;
inline void Car::clear_laneid() {
  laneid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::_internal_laneid() const {
  return laneid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::laneid() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.laneId)
  return _internal_laneid();
}
inline void Car::_internal_set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  laneid_ = value;
}
inline void Car::set_laneid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_laneid(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.laneId)
}

// double acc = 14;
inline void Car::clear_acc() {
  acc_ = 0;
}
inline double Car::_internal_acc() const {
  return acc_;
}
inline double Car::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.acc)
  return _internal_acc();
}
inline void Car::_internal_set_acc(double value) {
  
  acc_ = value;
}
inline void Car::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.acc)
}

// int32 age = 15;
inline void Car::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Car::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.age)
  return _internal_age();
}
inline void Car::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void Car::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.age)
}

// double z = 16;
inline void Car::clear_z() {
  z_ = 0;
}
inline double Car::_internal_z() const {
  return z_;
}
inline double Car::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.z)
  return _internal_z();
}
inline void Car::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Car::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.z)
}

// uint64 tx_road_id = 17;
inline void Car::clear_tx_road_id() {
  tx_road_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::_internal_tx_road_id() const {
  return tx_road_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_road_id)
  return _internal_tx_road_id();
}
inline void Car::_internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
}
inline void Car::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_road_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_road_id)
}

// uint64 tx_section_id = 18;
inline void Car::clear_tx_section_id() {
  tx_section_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::_internal_tx_section_id() const {
  return tx_section_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_section_id)
  return _internal_tx_section_id();
}
inline void Car::_internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
}
inline void Car::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_section_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_section_id)
}

// int64 tx_lane_id = 19;
inline void Car::clear_tx_lane_id() {
  tx_lane_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Car::_internal_tx_lane_id() const {
  return tx_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Car::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lane_id)
  return _internal_tx_lane_id();
}
inline void Car::_internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
}
inline void Car::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tx_lane_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lane_id)
}

// uint64 tx_lanelink_id = 20;
inline void Car::clear_tx_lanelink_id() {
  tx_lanelink_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::_internal_tx_lanelink_id() const {
  return tx_lanelink_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Car::tx_lanelink_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.tx_lanelink_id)
  return _internal_tx_lanelink_id();
}
inline void Car::_internal_set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_lanelink_id_ = value;
}
inline void Car::set_tx_lanelink_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_lanelink_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.tx_lanelink_id)
}

// .sim_msg.Trajectory planning_line = 21;
inline bool Car::_internal_has_planning_line() const {
  return this != internal_default_instance() && planning_line_ != nullptr;
}
inline bool Car::has_planning_line() const {
  return _internal_has_planning_line();
}
inline const ::sim_msg::Trajectory& Car::_internal_planning_line() const {
  const ::sim_msg::Trajectory* p = planning_line_;
  return p != nullptr ? *p : reinterpret_cast<const ::sim_msg::Trajectory&>(
      ::sim_msg::_Trajectory_default_instance_);
}
inline const ::sim_msg::Trajectory& Car::planning_line() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.planning_line)
  return _internal_planning_line();
}
inline void Car::unsafe_arena_set_allocated_planning_line(
    ::sim_msg::Trajectory* planning_line) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_line_);
  }
  planning_line_ = planning_line;
  if (planning_line) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:sim_msg.Car.planning_line)
}
inline ::sim_msg::Trajectory* Car::release_planning_line() {
  
  ::sim_msg::Trajectory* temp = planning_line_;
  planning_line_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::sim_msg::Trajectory* Car::unsafe_arena_release_planning_line() {
  // @@protoc_insertion_point(field_release:sim_msg.Car.planning_line)
  
  ::sim_msg::Trajectory* temp = planning_line_;
  planning_line_ = nullptr;
  return temp;
}
inline ::sim_msg::Trajectory* Car::_internal_mutable_planning_line() {
  
  if (planning_line_ == nullptr) {
    auto* p = CreateMaybeMessage<::sim_msg::Trajectory>(GetArenaForAllocation());
    planning_line_ = p;
  }
  return planning_line_;
}
inline ::sim_msg::Trajectory* Car::mutable_planning_line() {
  ::sim_msg::Trajectory* _msg = _internal_mutable_planning_line();
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.planning_line)
  return _msg;
}
inline void Car::set_allocated_planning_line(::sim_msg::Trajectory* planning_line) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_line_);
  }
  if (planning_line) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(planning_line));
    if (message_arena != submessage_arena) {
      planning_line = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, planning_line, submessage_arena);
    }
    
  } else {
    
  }
  planning_line_ = planning_line;
  // @@protoc_insertion_point(field_set_allocated:sim_msg.Car.planning_line)
}

// double show_abs_velocity = 22;
inline void Car::clear_show_abs_velocity() {
  show_abs_velocity_ = 0;
}
inline double Car::_internal_show_abs_velocity() const {
  return show_abs_velocity_;
}
inline double Car::show_abs_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_velocity)
  return _internal_show_abs_velocity();
}
inline void Car::_internal_set_show_abs_velocity(double value) {
  
  show_abs_velocity_ = value;
}
inline void Car::set_show_abs_velocity(double value) {
  _internal_set_show_abs_velocity(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_velocity)
}

// double show_abs_acc = 23;
inline void Car::clear_show_abs_acc() {
  show_abs_acc_ = 0;
}
inline double Car::_internal_show_abs_acc() const {
  return show_abs_acc_;
}
inline double Car::show_abs_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_abs_acc)
  return _internal_show_abs_acc();
}
inline void Car::_internal_set_show_abs_acc(double value) {
  
  show_abs_acc_ = value;
}
inline void Car::set_show_abs_acc(double value) {
  _internal_set_show_abs_acc(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_abs_acc)
}

// double show_relative_velocity = 24;
inline void Car::clear_show_relative_velocity() {
  show_relative_velocity_ = 0;
}
inline double Car::_internal_show_relative_velocity() const {
  return show_relative_velocity_;
}
inline double Car::show_relative_velocity() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity)
  return _internal_show_relative_velocity();
}
inline void Car::_internal_set_show_relative_velocity(double value) {
  
  show_relative_velocity_ = value;
}
inline void Car::set_show_relative_velocity(double value) {
  _internal_set_show_relative_velocity(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity)
}

// double show_relative_acc = 25;
inline void Car::clear_show_relative_acc() {
  show_relative_acc_ = 0;
}
inline double Car::_internal_show_relative_acc() const {
  return show_relative_acc_;
}
inline double Car::show_relative_acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc)
  return _internal_show_relative_acc();
}
inline void Car::_internal_set_show_relative_acc(double value) {
  
  show_relative_acc_ = value;
}
inline void Car::set_show_relative_acc(double value) {
  _internal_set_show_relative_acc(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc)
}

// double show_relative_velocity_horizontal = 26;
inline void Car::clear_show_relative_velocity_horizontal() {
  show_relative_velocity_horizontal_ = 0;
}
inline double Car::_internal_show_relative_velocity_horizontal() const {
  return show_relative_velocity_horizontal_;
}
inline double Car::show_relative_velocity_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_velocity_horizontal)
  return _internal_show_relative_velocity_horizontal();
}
inline void Car::_internal_set_show_relative_velocity_horizontal(double value) {
  
  show_relative_velocity_horizontal_ = value;
}
inline void Car::set_show_relative_velocity_horizontal(double value) {
  _internal_set_show_relative_velocity_horizontal(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_velocity_horizontal)
}

// double show_relative_acc_horizontal = 27;
inline void Car::clear_show_relative_acc_horizontal() {
  show_relative_acc_horizontal_ = 0;
}
inline double Car::_internal_show_relative_acc_horizontal() const {
  return show_relative_acc_horizontal_;
}
inline double Car::show_relative_acc_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_acc_horizontal)
  return _internal_show_relative_acc_horizontal();
}
inline void Car::_internal_set_show_relative_acc_horizontal(double value) {
  
  show_relative_acc_horizontal_ = value;
}
inline void Car::set_show_relative_acc_horizontal(double value) {
  _internal_set_show_relative_acc_horizontal(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_acc_horizontal)
}

// double show_relative_dist_vertical = 28;
inline void Car::clear_show_relative_dist_vertical() {
  show_relative_dist_vertical_ = 0;
}
inline double Car::_internal_show_relative_dist_vertical() const {
  return show_relative_dist_vertical_;
}
inline double Car::show_relative_dist_vertical() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_vertical)
  return _internal_show_relative_dist_vertical();
}
inline void Car::_internal_set_show_relative_dist_vertical(double value) {
  
  show_relative_dist_vertical_ = value;
}
inline void Car::set_show_relative_dist_vertical(double value) {
  _internal_set_show_relative_dist_vertical(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_vertical)
}

// double show_relative_dist_horizontal = 29;
inline void Car::clear_show_relative_dist_horizontal() {
  show_relative_dist_horizontal_ = 0;
}
inline double Car::_internal_show_relative_dist_horizontal() const {
  return show_relative_dist_horizontal_;
}
inline double Car::show_relative_dist_horizontal() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_relative_dist_horizontal)
  return _internal_show_relative_dist_horizontal();
}
inline void Car::_internal_set_show_relative_dist_horizontal(double value) {
  
  show_relative_dist_horizontal_ = value;
}
inline void Car::set_show_relative_dist_horizontal(double value) {
  _internal_set_show_relative_dist_horizontal(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.show_relative_dist_horizontal)
}

// .sim_msg.ControlState control_state = 30;
inline void Car::clear_control_state() {
  control_state_ = 0;
}
inline ::sim_msg::ControlState Car::_internal_control_state() const {
  return static_cast< ::sim_msg::ControlState >(control_state_);
}
inline ::sim_msg::ControlState Car::control_state() const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.control_state)
  return _internal_control_state();
}
inline void Car::_internal_set_control_state(::sim_msg::ControlState value) {
  
  control_state_ = value;
}
inline void Car::set_control_state(::sim_msg::ControlState value) {
  _internal_set_control_state(value);
  // @@protoc_insertion_point(field_set:sim_msg.Car.control_state)
}

// repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
inline int Car::_internal_show_nearestobjectinfo_size() const {
  return show_nearestobjectinfo_.size();
}
inline int Car::show_nearestobjectinfo_size() const {
  return _internal_show_nearestobjectinfo_size();
}
inline void Car::clear_show_nearestobjectinfo() {
  show_nearestobjectinfo_.Clear();
}
inline ::sim_msg::NearestObject* Car::mutable_show_nearestobjectinfo(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >*
Car::mutable_show_nearestobjectinfo() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Car.show_NearestObjectInfo)
  return &show_nearestobjectinfo_;
}
inline const ::sim_msg::NearestObject& Car::_internal_show_nearestobjectinfo(int index) const {
  return show_nearestobjectinfo_.Get(index);
}
inline const ::sim_msg::NearestObject& Car::show_nearestobjectinfo(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Car.show_NearestObjectInfo)
  return _internal_show_nearestobjectinfo(index);
}
inline ::sim_msg::NearestObject* Car::_internal_add_show_nearestobjectinfo() {
  return show_nearestobjectinfo_.Add();
}
inline ::sim_msg::NearestObject* Car::add_show_nearestobjectinfo() {
  ::sim_msg::NearestObject* _add = _internal_add_show_nearestobjectinfo();
  // @@protoc_insertion_point(field_add:sim_msg.Car.show_NearestObjectInfo)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::NearestObject >&
Car::show_nearestobjectinfo() const {
  // @@protoc_insertion_point(field_list:sim_msg.Car.show_NearestObjectInfo)
  return show_nearestobjectinfo_;
}

// -------------------------------------------------------------------

// StaticObstacle

// int32 id = 1;
inline void StaticObstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.id)
  return _internal_id();
}
inline void StaticObstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void StaticObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.id)
}

// double t = 2;
inline void StaticObstacle::clear_t() {
  t_ = 0;
}
inline double StaticObstacle::_internal_t() const {
  return t_;
}
inline double StaticObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.t)
  return _internal_t();
}
inline void StaticObstacle::_internal_set_t(double value) {
  
  t_ = value;
}
inline void StaticObstacle::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.t)
}

// double x = 3;
inline void StaticObstacle::clear_x() {
  x_ = 0;
}
inline double StaticObstacle::_internal_x() const {
  return x_;
}
inline double StaticObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.x)
  return _internal_x();
}
inline void StaticObstacle::_internal_set_x(double value) {
  
  x_ = value;
}
inline void StaticObstacle::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.x)
}

// double y = 4;
inline void StaticObstacle::clear_y() {
  y_ = 0;
}
inline double StaticObstacle::_internal_y() const {
  return y_;
}
inline double StaticObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.y)
  return _internal_y();
}
inline void StaticObstacle::_internal_set_y(double value) {
  
  y_ = value;
}
inline void StaticObstacle::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.y)
}

// double heading = 5;
inline void StaticObstacle::clear_heading() {
  heading_ = 0;
}
inline double StaticObstacle::_internal_heading() const {
  return heading_;
}
inline double StaticObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.heading)
  return _internal_heading();
}
inline void StaticObstacle::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void StaticObstacle::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.heading)
}

// double length = 6;
inline void StaticObstacle::clear_length() {
  length_ = 0;
}
inline double StaticObstacle::_internal_length() const {
  return length_;
}
inline double StaticObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.length)
  return _internal_length();
}
inline void StaticObstacle::_internal_set_length(double value) {
  
  length_ = value;
}
inline void StaticObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.length)
}

// double width = 7;
inline void StaticObstacle::clear_width() {
  width_ = 0;
}
inline double StaticObstacle::_internal_width() const {
  return width_;
}
inline double StaticObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.width)
  return _internal_width();
}
inline void StaticObstacle::_internal_set_width(double value) {
  
  width_ = value;
}
inline void StaticObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.width)
}

// double height = 8;
inline void StaticObstacle::clear_height() {
  height_ = 0;
}
inline double StaticObstacle::_internal_height() const {
  return height_;
}
inline double StaticObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.height)
  return _internal_height();
}
inline void StaticObstacle::_internal_set_height(double value) {
  
  height_ = value;
}
inline void StaticObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.height)
}

// int32 type = 9;
inline void StaticObstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.type)
  return _internal_type();
}
inline void StaticObstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void StaticObstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.type)
}

// int32 age = 10;
inline void StaticObstacle::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StaticObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.age)
  return _internal_age();
}
inline void StaticObstacle::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void StaticObstacle::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.age)
}

// double z = 11;
inline void StaticObstacle::clear_z() {
  z_ = 0;
}
inline double StaticObstacle::_internal_z() const {
  return z_;
}
inline double StaticObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.StaticObstacle.z)
  return _internal_z();
}
inline void StaticObstacle::_internal_set_z(double value) {
  
  z_ = value;
}
inline void StaticObstacle::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sim_msg.StaticObstacle.z)
}

// -------------------------------------------------------------------

// DynamicObstacle

// int32 id = 1;
inline void DynamicObstacle::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.id)
  return _internal_id();
}
inline void DynamicObstacle::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DynamicObstacle::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.id)
}

// double t = 2;
inline void DynamicObstacle::clear_t() {
  t_ = 0;
}
inline double DynamicObstacle::_internal_t() const {
  return t_;
}
inline double DynamicObstacle::t() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.t)
  return _internal_t();
}
inline void DynamicObstacle::_internal_set_t(double value) {
  
  t_ = value;
}
inline void DynamicObstacle::set_t(double value) {
  _internal_set_t(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.t)
}

// double x = 3;
inline void DynamicObstacle::clear_x() {
  x_ = 0;
}
inline double DynamicObstacle::_internal_x() const {
  return x_;
}
inline double DynamicObstacle::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.x)
  return _internal_x();
}
inline void DynamicObstacle::_internal_set_x(double value) {
  
  x_ = value;
}
inline void DynamicObstacle::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.x)
}

// double y = 4;
inline void DynamicObstacle::clear_y() {
  y_ = 0;
}
inline double DynamicObstacle::_internal_y() const {
  return y_;
}
inline double DynamicObstacle::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.y)
  return _internal_y();
}
inline void DynamicObstacle::_internal_set_y(double value) {
  
  y_ = value;
}
inline void DynamicObstacle::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.y)
}

// double heading = 5;
inline void DynamicObstacle::clear_heading() {
  heading_ = 0;
}
inline double DynamicObstacle::_internal_heading() const {
  return heading_;
}
inline double DynamicObstacle::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.heading)
  return _internal_heading();
}
inline void DynamicObstacle::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void DynamicObstacle::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.heading)
}

// double length = 6;
inline void DynamicObstacle::clear_length() {
  length_ = 0;
}
inline double DynamicObstacle::_internal_length() const {
  return length_;
}
inline double DynamicObstacle::length() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.length)
  return _internal_length();
}
inline void DynamicObstacle::_internal_set_length(double value) {
  
  length_ = value;
}
inline void DynamicObstacle::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.length)
}

// double width = 7;
inline void DynamicObstacle::clear_width() {
  width_ = 0;
}
inline double DynamicObstacle::_internal_width() const {
  return width_;
}
inline double DynamicObstacle::width() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.width)
  return _internal_width();
}
inline void DynamicObstacle::_internal_set_width(double value) {
  
  width_ = value;
}
inline void DynamicObstacle::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.width)
}

// double height = 8;
inline void DynamicObstacle::clear_height() {
  height_ = 0;
}
inline double DynamicObstacle::_internal_height() const {
  return height_;
}
inline double DynamicObstacle::height() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.height)
  return _internal_height();
}
inline void DynamicObstacle::_internal_set_height(double value) {
  
  height_ = value;
}
inline void DynamicObstacle::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.height)
}

// int32 type = 9;
inline void DynamicObstacle::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.type)
  return _internal_type();
}
inline void DynamicObstacle::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void DynamicObstacle::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.type)
}

// double v = 10;
inline void DynamicObstacle::clear_v() {
  v_ = 0;
}
inline double DynamicObstacle::_internal_v() const {
  return v_;
}
inline double DynamicObstacle::v() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.v)
  return _internal_v();
}
inline void DynamicObstacle::_internal_set_v(double value) {
  
  v_ = value;
}
inline void DynamicObstacle::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.v)
}

// double vl = 11;
inline void DynamicObstacle::clear_vl() {
  vl_ = 0;
}
inline double DynamicObstacle::_internal_vl() const {
  return vl_;
}
inline double DynamicObstacle::vl() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.vl)
  return _internal_vl();
}
inline void DynamicObstacle::_internal_set_vl(double value) {
  
  vl_ = value;
}
inline void DynamicObstacle::set_vl(double value) {
  _internal_set_vl(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.vl)
}

// double acc = 12;
inline void DynamicObstacle::clear_acc() {
  acc_ = 0;
}
inline double DynamicObstacle::_internal_acc() const {
  return acc_;
}
inline double DynamicObstacle::acc() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.acc)
  return _internal_acc();
}
inline void DynamicObstacle::_internal_set_acc(double value) {
  
  acc_ = value;
}
inline void DynamicObstacle::set_acc(double value) {
  _internal_set_acc(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.acc)
}

// int32 age = 13;
inline void DynamicObstacle::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DynamicObstacle::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.age)
  return _internal_age();
}
inline void DynamicObstacle::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void DynamicObstacle::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.age)
}

// double z = 14;
inline void DynamicObstacle::clear_z() {
  z_ = 0;
}
inline double DynamicObstacle::_internal_z() const {
  return z_;
}
inline double DynamicObstacle::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.DynamicObstacle.z)
  return _internal_z();
}
inline void DynamicObstacle::_internal_set_z(double value) {
  
  z_ = value;
}
inline void DynamicObstacle::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sim_msg.DynamicObstacle.z)
}

// -------------------------------------------------------------------

// LaneUid

// uint64 tx_road_id = 1;
inline void LaneUid::clear_tx_road_id() {
  tx_road_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::_internal_tx_road_id() const {
  return tx_road_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_road_id)
  return _internal_tx_road_id();
}
inline void LaneUid::_internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
}
inline void LaneUid::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_road_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_road_id)
}

// uint64 tx_section_id = 2;
inline void LaneUid::clear_tx_section_id() {
  tx_section_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::_internal_tx_section_id() const {
  return tx_section_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 LaneUid::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_section_id)
  return _internal_tx_section_id();
}
inline void LaneUid::_internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
}
inline void LaneUid::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_section_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_section_id)
}

// int64 tx_lane_id = 3;
inline void LaneUid::clear_tx_lane_id() {
  tx_lane_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneUid::_internal_tx_lane_id() const {
  return tx_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 LaneUid::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneUid.tx_lane_id)
  return _internal_tx_lane_id();
}
inline void LaneUid::_internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
}
inline void LaneUid::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tx_lane_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.LaneUid.tx_lane_id)
}

// -------------------------------------------------------------------

// TrafficLight

// int32 id = 1;
inline void TrafficLight::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.id)
  return _internal_id();
}
inline void TrafficLight::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void TrafficLight::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.id)
}

// double x = 2;
inline void TrafficLight::clear_x() {
  x_ = 0;
}
inline double TrafficLight::_internal_x() const {
  return x_;
}
inline double TrafficLight::x() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.x)
  return _internal_x();
}
inline void TrafficLight::_internal_set_x(double value) {
  
  x_ = value;
}
inline void TrafficLight::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.x)
}

// double y = 3;
inline void TrafficLight::clear_y() {
  y_ = 0;
}
inline double TrafficLight::_internal_y() const {
  return y_;
}
inline double TrafficLight::y() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.y)
  return _internal_y();
}
inline void TrafficLight::_internal_set_y(double value) {
  
  y_ = value;
}
inline void TrafficLight::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.y)
}

// double heading = 4;
inline void TrafficLight::clear_heading() {
  heading_ = 0;
}
inline double TrafficLight::_internal_heading() const {
  return heading_;
}
inline double TrafficLight::heading() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.heading)
  return _internal_heading();
}
inline void TrafficLight::_internal_set_heading(double value) {
  
  heading_ = value;
}
inline void TrafficLight::set_heading(double value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.heading)
}

// int32 color = 5;
inline void TrafficLight::clear_color() {
  color_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::_internal_color() const {
  return color_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.color)
  return _internal_color();
}
inline void TrafficLight::_internal_set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  color_ = value;
}
inline void TrafficLight::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_color(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.color)
}

// int32 age = 6;
inline void TrafficLight::clear_age() {
  age_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::_internal_age() const {
  return age_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrafficLight::age() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.age)
  return _internal_age();
}
inline void TrafficLight::_internal_set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  age_ = value;
}
inline void TrafficLight::set_age(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_age(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.age)
}

// double z = 7;
inline void TrafficLight::clear_z() {
  z_ = 0;
}
inline double TrafficLight::_internal_z() const {
  return z_;
}
inline double TrafficLight::z() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.z)
  return _internal_z();
}
inline void TrafficLight::_internal_set_z(double value) {
  
  z_ = value;
}
inline void TrafficLight::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.z)
}

// uint64 tx_road_id = 8;
inline void TrafficLight::clear_tx_road_id() {
  tx_road_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::_internal_tx_road_id() const {
  return tx_road_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::tx_road_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_road_id)
  return _internal_tx_road_id();
}
inline void TrafficLight::_internal_set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_road_id_ = value;
}
inline void TrafficLight::set_tx_road_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_road_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_road_id)
}

// uint64 tx_section_id = 9;
inline void TrafficLight::clear_tx_section_id() {
  tx_section_id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::_internal_tx_section_id() const {
  return tx_section_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TrafficLight::tx_section_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_section_id)
  return _internal_tx_section_id();
}
inline void TrafficLight::_internal_set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  tx_section_id_ = value;
}
inline void TrafficLight::set_tx_section_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_tx_section_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_section_id)
}

// int64 tx_lane_id = 10;
inline void TrafficLight::clear_tx_lane_id() {
  tx_lane_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight::_internal_tx_lane_id() const {
  return tx_lane_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TrafficLight::tx_lane_id() const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.tx_lane_id)
  return _internal_tx_lane_id();
}
inline void TrafficLight::_internal_set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  tx_lane_id_ = value;
}
inline void TrafficLight::set_tx_lane_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tx_lane_id(value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.tx_lane_id)
}

// repeated .sim_msg.LaneUid control_lanes = 11;
inline int TrafficLight::_internal_control_lanes_size() const {
  return control_lanes_.size();
}
inline int TrafficLight::control_lanes_size() const {
  return _internal_control_lanes_size();
}
inline void TrafficLight::clear_control_lanes() {
  control_lanes_.Clear();
}
inline ::sim_msg::LaneUid* TrafficLight::mutable_control_lanes(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.TrafficLight.control_lanes)
  return control_lanes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >*
TrafficLight::mutable_control_lanes() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_lanes)
  return &control_lanes_;
}
inline const ::sim_msg::LaneUid& TrafficLight::_internal_control_lanes(int index) const {
  return control_lanes_.Get(index);
}
inline const ::sim_msg::LaneUid& TrafficLight::control_lanes(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_lanes)
  return _internal_control_lanes(index);
}
inline ::sim_msg::LaneUid* TrafficLight::_internal_add_control_lanes() {
  return control_lanes_.Add();
}
inline ::sim_msg::LaneUid* TrafficLight::add_control_lanes() {
  ::sim_msg::LaneUid* _add = _internal_add_control_lanes();
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_lanes)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::LaneUid >&
TrafficLight::control_lanes() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_lanes)
  return control_lanes_;
}

// repeated .sim_msg.Phase control_phases = 12;
inline int TrafficLight::_internal_control_phases_size() const {
  return control_phases_.size();
}
inline int TrafficLight::control_phases_size() const {
  return _internal_control_phases_size();
}
inline void TrafficLight::clear_control_phases() {
  control_phases_.Clear();
}
inline ::sim_msg::Phase TrafficLight::_internal_control_phases(int index) const {
  return static_cast< ::sim_msg::Phase >(control_phases_.Get(index));
}
inline ::sim_msg::Phase TrafficLight::control_phases(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.TrafficLight.control_phases)
  return _internal_control_phases(index);
}
inline void TrafficLight::set_control_phases(int index, ::sim_msg::Phase value) {
  control_phases_.Set(index, value);
  // @@protoc_insertion_point(field_set:sim_msg.TrafficLight.control_phases)
}
inline void TrafficLight::_internal_add_control_phases(::sim_msg::Phase value) {
  control_phases_.Add(value);
}
inline void TrafficLight::add_control_phases(::sim_msg::Phase value) {
  _internal_add_control_phases(value);
  // @@protoc_insertion_point(field_add:sim_msg.TrafficLight.control_phases)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TrafficLight::control_phases() const {
  // @@protoc_insertion_point(field_list:sim_msg.TrafficLight.control_phases)
  return control_phases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrafficLight::_internal_mutable_control_phases() {
  return &control_phases_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TrafficLight::mutable_control_phases() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.TrafficLight.control_phases)
  return _internal_mutable_control_phases();
}

// -------------------------------------------------------------------

// Traffic

// repeated .sim_msg.Car cars = 1;
inline int Traffic::_internal_cars_size() const {
  return cars_.size();
}
inline int Traffic::cars_size() const {
  return _internal_cars_size();
}
inline void Traffic::clear_cars() {
  cars_.Clear();
}
inline ::sim_msg::Car* Traffic::mutable_cars(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.cars)
  return cars_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >*
Traffic::mutable_cars() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.cars)
  return &cars_;
}
inline const ::sim_msg::Car& Traffic::_internal_cars(int index) const {
  return cars_.Get(index);
}
inline const ::sim_msg::Car& Traffic::cars(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.cars)
  return _internal_cars(index);
}
inline ::sim_msg::Car* Traffic::_internal_add_cars() {
  return cars_.Add();
}
inline ::sim_msg::Car* Traffic::add_cars() {
  ::sim_msg::Car* _add = _internal_add_cars();
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.cars)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::Car >&
Traffic::cars() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.cars)
  return cars_;
}

// repeated .sim_msg.StaticObstacle staticObstacles = 2;
inline int Traffic::_internal_staticobstacles_size() const {
  return staticobstacles_.size();
}
inline int Traffic::staticobstacles_size() const {
  return _internal_staticobstacles_size();
}
inline void Traffic::clear_staticobstacles() {
  staticobstacles_.Clear();
}
inline ::sim_msg::StaticObstacle* Traffic::mutable_staticobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.staticObstacles)
  return staticobstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >*
Traffic::mutable_staticobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.staticObstacles)
  return &staticobstacles_;
}
inline const ::sim_msg::StaticObstacle& Traffic::_internal_staticobstacles(int index) const {
  return staticobstacles_.Get(index);
}
inline const ::sim_msg::StaticObstacle& Traffic::staticobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.staticObstacles)
  return _internal_staticobstacles(index);
}
inline ::sim_msg::StaticObstacle* Traffic::_internal_add_staticobstacles() {
  return staticobstacles_.Add();
}
inline ::sim_msg::StaticObstacle* Traffic::add_staticobstacles() {
  ::sim_msg::StaticObstacle* _add = _internal_add_staticobstacles();
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.staticObstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::StaticObstacle >&
Traffic::staticobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.staticObstacles)
  return staticobstacles_;
}

// repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
inline int Traffic::_internal_dynamicobstacles_size() const {
  return dynamicobstacles_.size();
}
inline int Traffic::dynamicobstacles_size() const {
  return _internal_dynamicobstacles_size();
}
inline void Traffic::clear_dynamicobstacles() {
  dynamicobstacles_.Clear();
}
inline ::sim_msg::DynamicObstacle* Traffic::mutable_dynamicobstacles(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >*
Traffic::mutable_dynamicobstacles() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.dynamicObstacles)
  return &dynamicobstacles_;
}
inline const ::sim_msg::DynamicObstacle& Traffic::_internal_dynamicobstacles(int index) const {
  return dynamicobstacles_.Get(index);
}
inline const ::sim_msg::DynamicObstacle& Traffic::dynamicobstacles(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.dynamicObstacles)
  return _internal_dynamicobstacles(index);
}
inline ::sim_msg::DynamicObstacle* Traffic::_internal_add_dynamicobstacles() {
  return dynamicobstacles_.Add();
}
inline ::sim_msg::DynamicObstacle* Traffic::add_dynamicobstacles() {
  ::sim_msg::DynamicObstacle* _add = _internal_add_dynamicobstacles();
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.dynamicObstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::DynamicObstacle >&
Traffic::dynamicobstacles() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.dynamicObstacles)
  return dynamicobstacles_;
}

// repeated .sim_msg.TrafficLight trafficLights = 4;
inline int Traffic::_internal_trafficlights_size() const {
  return trafficlights_.size();
}
inline int Traffic::trafficlights_size() const {
  return _internal_trafficlights_size();
}
inline void Traffic::clear_trafficlights() {
  trafficlights_.Clear();
}
inline ::sim_msg::TrafficLight* Traffic::mutable_trafficlights(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.Traffic.trafficLights)
  return trafficlights_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >*
Traffic::mutable_trafficlights() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.Traffic.trafficLights)
  return &trafficlights_;
}
inline const ::sim_msg::TrafficLight& Traffic::_internal_trafficlights(int index) const {
  return trafficlights_.Get(index);
}
inline const ::sim_msg::TrafficLight& Traffic::trafficlights(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.Traffic.trafficLights)
  return _internal_trafficlights(index);
}
inline ::sim_msg::TrafficLight* Traffic::_internal_add_trafficlights() {
  return trafficlights_.Add();
}
inline ::sim_msg::TrafficLight* Traffic::add_trafficlights() {
  ::sim_msg::TrafficLight* _add = _internal_add_trafficlights();
  // @@protoc_insertion_point(field_add:sim_msg.Traffic.trafficLights)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::sim_msg::TrafficLight >&
Traffic::trafficlights() const {
  // @@protoc_insertion_point(field_list:sim_msg.Traffic.trafficLights)
  return trafficlights_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::sim_msg::ControlState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::ControlState>() {
  return ::sim_msg::ControlState_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::NearestObjectDirection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::NearestObjectDirection>() {
  return ::sim_msg::NearestObjectDirection_descriptor();
}
template <> struct is_proto_enum< ::sim_msg::Phase> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::sim_msg::Phase>() {
  return ::sim_msg::Phase_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_traffic_2eproto
