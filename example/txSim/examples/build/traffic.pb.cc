// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: traffic.proto

#include "traffic.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace sim_msg {
constexpr ManualVehicleControlInfo::ManualVehicleControlInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : veh_control_info_(nullptr)
  , id_(0){}
struct ManualVehicleControlInfoDefaultTypeInternal {
  constexpr ManualVehicleControlInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ManualVehicleControlInfoDefaultTypeInternal() {}
  union {
    ManualVehicleControlInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ManualVehicleControlInfoDefaultTypeInternal _ManualVehicleControlInfo_default_instance_;
constexpr ManualVehicleControlInfoArray::ManualVehicleControlInfoArray(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : vehicles_control_info_(){}
struct ManualVehicleControlInfoArrayDefaultTypeInternal {
  constexpr ManualVehicleControlInfoArrayDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ManualVehicleControlInfoArrayDefaultTypeInternal() {}
  union {
    ManualVehicleControlInfoArray _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ManualVehicleControlInfoArrayDefaultTypeInternal _ManualVehicleControlInfoArray_default_instance_;
constexpr NearestObject::NearestObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : euclid_dist_(0)
  , id_(0)
  , dir_(0)
{}
struct NearestObjectDefaultTypeInternal {
  constexpr NearestObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NearestObjectDefaultTypeInternal() {}
  union {
    NearestObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NearestObjectDefaultTypeInternal _NearestObject_default_instance_;
constexpr Car::Car(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : show_nearestobjectinfo_()
  , planning_line_(nullptr)
  , t_(0)
  , x_(0)
  , y_(0)
  , heading_(0)
  , v_(0)
  , id_(0)
  , type_(0)
  , vl_(0)
  , theta_(0)
  , length_(0)
  , width_(0)
  , height_(0)
  , acc_(0)
  , laneid_(0)
  , age_(0)
  , z_(0)
  , tx_road_id_(uint64_t{0u})
  , tx_section_id_(uint64_t{0u})
  , tx_lane_id_(int64_t{0})
  , tx_lanelink_id_(uint64_t{0u})
  , show_abs_velocity_(0)
  , show_abs_acc_(0)
  , show_relative_velocity_(0)
  , show_relative_acc_(0)
  , show_relative_velocity_horizontal_(0)
  , show_relative_acc_horizontal_(0)
  , show_relative_dist_vertical_(0)
  , show_relative_dist_horizontal_(0)
  , control_state_(0)
{}
struct CarDefaultTypeInternal {
  constexpr CarDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CarDefaultTypeInternal() {}
  union {
    Car _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CarDefaultTypeInternal _Car_default_instance_;
constexpr StaticObstacle::StaticObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : t_(0)
  , x_(0)
  , y_(0)
  , heading_(0)
  , id_(0)
  , type_(0)
  , length_(0)
  , width_(0)
  , height_(0)
  , z_(0)
  , age_(0){}
struct StaticObstacleDefaultTypeInternal {
  constexpr StaticObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StaticObstacleDefaultTypeInternal() {}
  union {
    StaticObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StaticObstacleDefaultTypeInternal _StaticObstacle_default_instance_;
constexpr DynamicObstacle::DynamicObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : t_(0)
  , x_(0)
  , y_(0)
  , heading_(0)
  , id_(0)
  , type_(0)
  , length_(0)
  , width_(0)
  , height_(0)
  , v_(0)
  , vl_(0)
  , acc_(0)
  , z_(0)
  , age_(0){}
struct DynamicObstacleDefaultTypeInternal {
  constexpr DynamicObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicObstacleDefaultTypeInternal() {}
  union {
    DynamicObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicObstacleDefaultTypeInternal _DynamicObstacle_default_instance_;
constexpr LaneUid::LaneUid(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tx_road_id_(uint64_t{0u})
  , tx_section_id_(uint64_t{0u})
  , tx_lane_id_(int64_t{0}){}
struct LaneUidDefaultTypeInternal {
  constexpr LaneUidDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneUidDefaultTypeInternal() {}
  union {
    LaneUid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneUidDefaultTypeInternal _LaneUid_default_instance_;
constexpr TrafficLight::TrafficLight(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_lanes_()
  , control_phases_()
  , _control_phases_cached_byte_size_(0)
  , x_(0)
  , y_(0)
  , id_(0)
  , color_(0)
  , heading_(0)
  , z_(0)
  , tx_road_id_(uint64_t{0u})
  , tx_section_id_(uint64_t{0u})
  , tx_lane_id_(int64_t{0})
  , age_(0){}
struct TrafficLightDefaultTypeInternal {
  constexpr TrafficLightDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficLightDefaultTypeInternal() {}
  union {
    TrafficLight _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficLightDefaultTypeInternal _TrafficLight_default_instance_;
constexpr Traffic::Traffic(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cars_()
  , staticobstacles_()
  , dynamicobstacles_()
  , trafficlights_(){}
struct TrafficDefaultTypeInternal {
  constexpr TrafficDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrafficDefaultTypeInternal() {}
  union {
    Traffic _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrafficDefaultTypeInternal _Traffic_default_instance_;
}  // namespace sim_msg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_traffic_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_traffic_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_traffic_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_traffic_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfo, veh_control_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfoArray, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::ManualVehicleControlInfoArray, vehicles_control_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, euclid_dist_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::NearestObject, dir_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, vl_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, theta_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, laneid_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, tx_lanelink_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, planning_line_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_abs_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_abs_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_velocity_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_velocity_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_acc_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_dist_vertical_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_relative_dist_horizontal_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, control_state_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Car, show_nearestobjectinfo_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::StaticObstacle, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, t_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, length_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, width_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, height_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, v_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, vl_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, acc_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::DynamicObstacle, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::LaneUid, tx_lane_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, x_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, y_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, heading_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, color_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, age_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, z_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_road_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_section_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, tx_lane_id_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, control_lanes_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::TrafficLight, control_phases_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, cars_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, staticobstacles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, dynamicobstacles_),
  PROTOBUF_FIELD_OFFSET(::sim_msg::Traffic, trafficlights_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::sim_msg::ManualVehicleControlInfo)},
  { 7, -1, sizeof(::sim_msg::ManualVehicleControlInfoArray)},
  { 13, -1, sizeof(::sim_msg::NearestObject)},
  { 21, -1, sizeof(::sim_msg::Car)},
  { 57, -1, sizeof(::sim_msg::StaticObstacle)},
  { 73, -1, sizeof(::sim_msg::DynamicObstacle)},
  { 92, -1, sizeof(::sim_msg::LaneUid)},
  { 100, -1, sizeof(::sim_msg::TrafficLight)},
  { 117, -1, sizeof(::sim_msg::Traffic)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ManualVehicleControlInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_ManualVehicleControlInfoArray_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_NearestObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Car_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_StaticObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_DynamicObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_LaneUid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_TrafficLight_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::sim_msg::_Traffic_default_instance_),
};

const char descriptor_table_protodef_traffic_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rtraffic.proto\022\007sim_msg\032\020trajectory.pro"
  "to\032\016location.proto\"S\n\030ManualVehicleContr"
  "olInfo\022\n\n\002id\030\001 \001(\005\022+\n\020veh_control_info\030\002"
  " \001(\0132\021.sim_msg.Location\"a\n\035ManualVehicle"
  "ControlInfoArray\022@\n\025vehicles_control_inf"
  "o\030\001 \003(\0132!.sim_msg.ManualVehicleControlIn"
  "fo\"^\n\rNearestObject\022\n\n\002id\030\001 \001(\005\022\023\n\013eucli"
  "d_dist\030\002 \001(\001\022,\n\003dir\030\003 \001(\0162\037.sim_msg.Near"
  "estObjectDirection\"\315\005\n\003Car\022\n\n\002id\030\001 \001(\005\022\t"
  "\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001(\001\022\017\n\007headi"
  "ng\030\005 \001(\001\022\t\n\001v\030\006 \001(\001\022\n\n\002vl\030\007 \001(\001\022\r\n\005theta"
  "\030\010 \001(\001\022\016\n\006length\030\t \001(\001\022\r\n\005width\030\n \001(\001\022\016\n"
  "\006height\030\013 \001(\001\022\014\n\004type\030\014 \001(\005\022\016\n\006laneId\030\r "
  "\001(\005\022\013\n\003acc\030\016 \001(\001\022\013\n\003age\030\017 \001(\005\022\t\n\001z\030\020 \001(\001"
  "\022\022\n\ntx_road_id\030\021 \001(\004\022\025\n\rtx_section_id\030\022 "
  "\001(\004\022\022\n\ntx_lane_id\030\023 \001(\003\022\026\n\016tx_lanelink_i"
  "d\030\024 \001(\004\022*\n\rplanning_line\030\025 \001(\0132\023.sim_msg"
  ".Trajectory\022\031\n\021show_abs_velocity\030\026 \001(\001\022\024"
  "\n\014show_abs_acc\030\027 \001(\001\022\036\n\026show_relative_ve"
  "locity\030\030 \001(\001\022\031\n\021show_relative_acc\030\031 \001(\001\022"
  ")\n!show_relative_velocity_horizontal\030\032 \001"
  "(\001\022$\n\034show_relative_acc_horizontal\030\033 \001(\001"
  "\022#\n\033show_relative_dist_vertical\030\034 \001(\001\022%\n"
  "\035show_relative_dist_horizontal\030\035 \001(\001\022,\n\r"
  "control_state\030\036 \001(\0162\025.sim_msg.ControlSta"
  "te\0226\n\026show_NearestObjectInfo\030\037 \003(\0132\026.sim"
  "_msg.NearestObject\"\243\001\n\016StaticObstacle\022\n\n"
  "\002id\030\001 \001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t\n\001y\030\004 \001"
  "(\001\022\017\n\007heading\030\005 \001(\001\022\016\n\006length\030\006 \001(\001\022\r\n\005w"
  "idth\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\014\n\004type\030\t \001(\005"
  "\022\013\n\003age\030\n \001(\005\022\t\n\001z\030\013 \001(\001\"\310\001\n\017DynamicObst"
  "acle\022\n\n\002id\030\001 \001(\005\022\t\n\001t\030\002 \001(\001\022\t\n\001x\030\003 \001(\001\022\t"
  "\n\001y\030\004 \001(\001\022\017\n\007heading\030\005 \001(\001\022\016\n\006length\030\006 \001"
  "(\001\022\r\n\005width\030\007 \001(\001\022\016\n\006height\030\010 \001(\001\022\014\n\004typ"
  "e\030\t \001(\005\022\t\n\001v\030\n \001(\001\022\n\n\002vl\030\013 \001(\001\022\013\n\003acc\030\014 "
  "\001(\001\022\013\n\003age\030\r \001(\005\022\t\n\001z\030\016 \001(\001\"H\n\007LaneUid\022\022"
  "\n\ntx_road_id\030\001 \001(\004\022\025\n\rtx_section_id\030\002 \001("
  "\004\022\022\n\ntx_lane_id\030\003 \001(\003\"\370\001\n\014TrafficLight\022\n"
  "\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\001\022\t\n\001y\030\003 \001(\001\022\017\n\007head"
  "ing\030\004 \001(\001\022\r\n\005color\030\005 \001(\005\022\013\n\003age\030\006 \001(\005\022\t\n"
  "\001z\030\007 \001(\001\022\022\n\ntx_road_id\030\010 \001(\004\022\025\n\rtx_secti"
  "on_id\030\t \001(\004\022\022\n\ntx_lane_id\030\n \001(\003\022\'\n\rcontr"
  "ol_lanes\030\013 \003(\0132\020.sim_msg.LaneUid\022&\n\016cont"
  "rol_phases\030\014 \003(\0162\016.sim_msg.Phase\"\271\001\n\007Tra"
  "ffic\022\032\n\004cars\030\001 \003(\0132\014.sim_msg.Car\0220\n\017stat"
  "icObstacles\030\002 \003(\0132\027.sim_msg.StaticObstac"
  "le\0222\n\020dynamicObstacles\030\003 \003(\0132\030.sim_msg.D"
  "ynamicObstacle\022,\n\rtrafficLights\030\004 \003(\0132\025."
  "sim_msg.TrafficLight**\n\014ControlState\022\016\n\n"
  "Autonomous\020\000\022\n\n\006Manual\020\001*\214\001\n\026NearestObje"
  "ctDirection\022\t\n\005FRONT\020\000\022\022\n\016BACK_DIRECTION"
  "\020\001\022\010\n\004LEFT\020\002\022\016\n\nLEFT_FRONT\020\003\022\r\n\tLEFT_BAC"
  "K\020\004\022\t\n\005RIGHT\020\005\022\017\n\013RIGHT_FRONT\020\006\022\016\n\nRIGHT"
  "_BACK\020\007*#\n\005Phase\022\005\n\001U\020\000\022\005\n\001L\020\001\022\005\n\001T\020\002\022\005\n"
  "\001R\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_traffic_2eproto_deps[2] = {
  &::descriptor_table_location_2eproto,
  &::descriptor_table_trajectory_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_traffic_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_traffic_2eproto = {
  false, false, 2172, descriptor_table_protodef_traffic_2eproto, "traffic.proto", 
  &descriptor_table_traffic_2eproto_once, descriptor_table_traffic_2eproto_deps, 2, 9,
  schemas, file_default_instances, TableStruct_traffic_2eproto::offsets,
  file_level_metadata_traffic_2eproto, file_level_enum_descriptors_traffic_2eproto, file_level_service_descriptors_traffic_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_traffic_2eproto_getter() {
  return &descriptor_table_traffic_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_traffic_2eproto(&descriptor_table_traffic_2eproto);
namespace sim_msg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[0];
}
bool ControlState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NearestObjectDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[1];
}
bool NearestObjectDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Phase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_traffic_2eproto);
  return file_level_enum_descriptors_traffic_2eproto[2];
}
bool Phase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ManualVehicleControlInfo::_Internal {
 public:
  static const ::sim_msg::Location& veh_control_info(const ManualVehicleControlInfo* msg);
};

const ::sim_msg::Location&
ManualVehicleControlInfo::_Internal::veh_control_info(const ManualVehicleControlInfo* msg) {
  return *msg->veh_control_info_;
}
void ManualVehicleControlInfo::clear_veh_control_info() {
  if (GetArenaForAllocation() == nullptr && veh_control_info_ != nullptr) {
    delete veh_control_info_;
  }
  veh_control_info_ = nullptr;
}
ManualVehicleControlInfo::ManualVehicleControlInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.ManualVehicleControlInfo)
}
ManualVehicleControlInfo::ManualVehicleControlInfo(const ManualVehicleControlInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_veh_control_info()) {
    veh_control_info_ = new ::sim_msg::Location(*from.veh_control_info_);
  } else {
    veh_control_info_ = nullptr;
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfo)
}

inline void ManualVehicleControlInfo::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&veh_control_info_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&id_) -
    reinterpret_cast<char*>(&veh_control_info_)) + sizeof(id_));
}

ManualVehicleControlInfo::~ManualVehicleControlInfo() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ManualVehicleControlInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete veh_control_info_;
}

void ManualVehicleControlInfo::ArenaDtor(void* object) {
  ManualVehicleControlInfo* _this = reinterpret_cast< ManualVehicleControlInfo* >(object);
  (void)_this;
}
void ManualVehicleControlInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualVehicleControlInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ManualVehicleControlInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && veh_control_info_ != nullptr) {
    delete veh_control_info_;
  }
  veh_control_info_ = nullptr;
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualVehicleControlInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Location veh_control_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_veh_control_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualVehicleControlInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .sim_msg.Location veh_control_info = 2;
  if (this->_internal_has_veh_control_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::veh_control_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfo)
  return target;
}

size_t ManualVehicleControlInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .sim_msg.Location veh_control_info = 2;
  if (this->_internal_has_veh_control_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *veh_control_info_);
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManualVehicleControlInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ManualVehicleControlInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManualVehicleControlInfo::GetClassData() const { return &_class_data_; }

void ManualVehicleControlInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ManualVehicleControlInfo *>(to)->MergeFrom(
      static_cast<const ManualVehicleControlInfo &>(from));
}


void ManualVehicleControlInfo::MergeFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfo)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_veh_control_info()) {
    _internal_mutable_veh_control_info()->::sim_msg::Location::MergeFrom(from._internal_veh_control_info());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManualVehicleControlInfo::CopyFrom(const ManualVehicleControlInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfo::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfo::InternalSwap(ManualVehicleControlInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManualVehicleControlInfo, id_)
      + sizeof(ManualVehicleControlInfo::id_)
      - PROTOBUF_FIELD_OFFSET(ManualVehicleControlInfo, veh_control_info_)>(
          reinterpret_cast<char*>(&veh_control_info_),
          reinterpret_cast<char*>(&other->veh_control_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualVehicleControlInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[0]);
}

// ===================================================================

class ManualVehicleControlInfoArray::_Internal {
 public:
};

ManualVehicleControlInfoArray::ManualVehicleControlInfoArray(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  vehicles_control_info_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.ManualVehicleControlInfoArray)
}
ManualVehicleControlInfoArray::ManualVehicleControlInfoArray(const ManualVehicleControlInfoArray& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vehicles_control_info_(from.vehicles_control_info_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.ManualVehicleControlInfoArray)
}

inline void ManualVehicleControlInfoArray::SharedCtor() {
}

ManualVehicleControlInfoArray::~ManualVehicleControlInfoArray() {
  // @@protoc_insertion_point(destructor:sim_msg.ManualVehicleControlInfoArray)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ManualVehicleControlInfoArray::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ManualVehicleControlInfoArray::ArenaDtor(void* object) {
  ManualVehicleControlInfoArray* _this = reinterpret_cast< ManualVehicleControlInfoArray* >(object);
  (void)_this;
}
void ManualVehicleControlInfoArray::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ManualVehicleControlInfoArray::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ManualVehicleControlInfoArray::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.ManualVehicleControlInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vehicles_control_info_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ManualVehicleControlInfoArray::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vehicles_control_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ManualVehicleControlInfoArray::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.ManualVehicleControlInfoArray)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vehicles_control_info_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vehicles_control_info(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.ManualVehicleControlInfoArray)
  return target;
}

size_t ManualVehicleControlInfoArray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.ManualVehicleControlInfoArray)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.ManualVehicleControlInfo vehicles_control_info = 1;
  total_size += 1UL * this->_internal_vehicles_control_info_size();
  for (const auto& msg : this->vehicles_control_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ManualVehicleControlInfoArray::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ManualVehicleControlInfoArray::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ManualVehicleControlInfoArray::GetClassData() const { return &_class_data_; }

void ManualVehicleControlInfoArray::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ManualVehicleControlInfoArray *>(to)->MergeFrom(
      static_cast<const ManualVehicleControlInfoArray &>(from));
}


void ManualVehicleControlInfoArray::MergeFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.ManualVehicleControlInfoArray)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vehicles_control_info_.MergeFrom(from.vehicles_control_info_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ManualVehicleControlInfoArray::CopyFrom(const ManualVehicleControlInfoArray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.ManualVehicleControlInfoArray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ManualVehicleControlInfoArray::IsInitialized() const {
  return true;
}

void ManualVehicleControlInfoArray::InternalSwap(ManualVehicleControlInfoArray* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  vehicles_control_info_.InternalSwap(&other->vehicles_control_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ManualVehicleControlInfoArray::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[1]);
}

// ===================================================================

class NearestObject::_Internal {
 public:
};

NearestObject::NearestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.NearestObject)
}
NearestObject::NearestObject(const NearestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&euclid_dist_, &from.euclid_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.NearestObject)
}

inline void NearestObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&euclid_dist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&dir_) -
    reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
}

NearestObject::~NearestObject() {
  // @@protoc_insertion_point(destructor:sim_msg.NearestObject)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NearestObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NearestObject::ArenaDtor(void* object) {
  NearestObject* _this = reinterpret_cast< NearestObject* >(object);
  (void)_this;
}
void NearestObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NearestObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NearestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.NearestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&euclid_dist_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dir_) -
      reinterpret_cast<char*>(&euclid_dist_)) + sizeof(dir_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NearestObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double euclid_dist = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          euclid_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.NearestObjectDirection dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dir(static_cast<::sim_msg::NearestObjectDirection>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NearestObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.NearestObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double euclid_dist = 2;
  if (!(this->_internal_euclid_dist() <= 0 && this->_internal_euclid_dist() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_euclid_dist(), target);
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->_internal_dir() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dir(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.NearestObject)
  return target;
}

size_t NearestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.NearestObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double euclid_dist = 2;
  if (!(this->_internal_euclid_dist() <= 0 && this->_internal_euclid_dist() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // .sim_msg.NearestObjectDirection dir = 3;
  if (this->_internal_dir() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dir());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NearestObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NearestObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NearestObject::GetClassData() const { return &_class_data_; }

void NearestObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<NearestObject *>(to)->MergeFrom(
      static_cast<const NearestObject &>(from));
}


void NearestObject::MergeFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.NearestObject)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_euclid_dist() <= 0 && from._internal_euclid_dist() >= 0)) {
    _internal_set_euclid_dist(from._internal_euclid_dist());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_dir() != 0) {
    _internal_set_dir(from._internal_dir());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NearestObject::CopyFrom(const NearestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.NearestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearestObject::IsInitialized() const {
  return true;
}

void NearestObject::InternalSwap(NearestObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NearestObject, dir_)
      + sizeof(NearestObject::dir_)
      - PROTOBUF_FIELD_OFFSET(NearestObject, euclid_dist_)>(
          reinterpret_cast<char*>(&euclid_dist_),
          reinterpret_cast<char*>(&other->euclid_dist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NearestObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[2]);
}

// ===================================================================

class Car::_Internal {
 public:
  static const ::sim_msg::Trajectory& planning_line(const Car* msg);
};

const ::sim_msg::Trajectory&
Car::_Internal::planning_line(const Car* msg) {
  return *msg->planning_line_;
}
void Car::clear_planning_line() {
  if (GetArenaForAllocation() == nullptr && planning_line_ != nullptr) {
    delete planning_line_;
  }
  planning_line_ = nullptr;
}
Car::Car(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  show_nearestobjectinfo_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Car)
}
Car::Car(const Car& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      show_nearestobjectinfo_(from.show_nearestobjectinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_planning_line()) {
    planning_line_ = new ::sim_msg::Trajectory(*from.planning_line_);
  } else {
    planning_line_ = nullptr;
  }
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_state_) -
    reinterpret_cast<char*>(&t_)) + sizeof(control_state_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.Car)
}

inline void Car::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&planning_line_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_state_) -
    reinterpret_cast<char*>(&planning_line_)) + sizeof(control_state_));
}

Car::~Car() {
  // @@protoc_insertion_point(destructor:sim_msg.Car)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Car::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete planning_line_;
}

void Car::ArenaDtor(void* object) {
  Car* _this = reinterpret_cast< Car* >(object);
  (void)_this;
}
void Car::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Car::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Car::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  show_nearestobjectinfo_.Clear();
  if (GetArenaForAllocation() == nullptr && planning_line_ != nullptr) {
    delete planning_line_;
  }
  planning_line_ = nullptr;
  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_state_) -
      reinterpret_cast<char*>(&t_)) + sizeof(control_state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Car::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double v = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vl = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          vl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double theta = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 laneId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          laneid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double acc = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 age = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 tx_road_id = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_lanelink_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          tx_lanelink_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .sim_msg.Trajectory planning_line = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_planning_line(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double show_abs_velocity = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          show_abs_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_abs_acc = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 185)) {
          show_abs_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          show_relative_velocity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          show_relative_acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_velocity_horizontal = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 209)) {
          show_relative_velocity_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_acc_horizontal = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 217)) {
          show_relative_acc_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_vertical = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 225)) {
          show_relative_dist_vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double show_relative_dist_horizontal = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 233)) {
          show_relative_dist_horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .sim_msg.ControlState control_state = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_state(static_cast<::sim_msg::ControlState>(val));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_show_nearestobjectinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Car::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Car)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  // double v = 6;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_v(), target);
  }

  // double vl = 7;
  if (!(this->_internal_vl() <= 0 && this->_internal_vl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_vl(), target);
  }

  // double theta = 8;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_theta(), target);
  }

  // double length = 9;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_length(), target);
  }

  // double width = 10;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_width(), target);
  }

  // double height = 11;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_height(), target);
  }

  // int32 type = 12;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_type(), target);
  }

  // int32 laneId = 13;
  if (this->_internal_laneid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_laneid(), target);
  }

  // double acc = 14;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_acc(), target);
  }

  // int32 age = 15;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_age(), target);
  }

  // double z = 16;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_z(), target);
  }

  // uint64 tx_road_id = 17;
  if (this->_internal_tx_road_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(17, this->_internal_tx_road_id(), target);
  }

  // uint64 tx_section_id = 18;
  if (this->_internal_tx_section_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(18, this->_internal_tx_section_id(), target);
  }

  // int64 tx_lane_id = 19;
  if (this->_internal_tx_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(19, this->_internal_tx_lane_id(), target);
  }

  // uint64 tx_lanelink_id = 20;
  if (this->_internal_tx_lanelink_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_tx_lanelink_id(), target);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->_internal_has_planning_line()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::planning_line(this), target, stream);
  }

  // double show_abs_velocity = 22;
  if (!(this->_internal_show_abs_velocity() <= 0 && this->_internal_show_abs_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_show_abs_velocity(), target);
  }

  // double show_abs_acc = 23;
  if (!(this->_internal_show_abs_acc() <= 0 && this->_internal_show_abs_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(23, this->_internal_show_abs_acc(), target);
  }

  // double show_relative_velocity = 24;
  if (!(this->_internal_show_relative_velocity() <= 0 && this->_internal_show_relative_velocity() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_show_relative_velocity(), target);
  }

  // double show_relative_acc = 25;
  if (!(this->_internal_show_relative_acc() <= 0 && this->_internal_show_relative_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_show_relative_acc(), target);
  }

  // double show_relative_velocity_horizontal = 26;
  if (!(this->_internal_show_relative_velocity_horizontal() <= 0 && this->_internal_show_relative_velocity_horizontal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(26, this->_internal_show_relative_velocity_horizontal(), target);
  }

  // double show_relative_acc_horizontal = 27;
  if (!(this->_internal_show_relative_acc_horizontal() <= 0 && this->_internal_show_relative_acc_horizontal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(27, this->_internal_show_relative_acc_horizontal(), target);
  }

  // double show_relative_dist_vertical = 28;
  if (!(this->_internal_show_relative_dist_vertical() <= 0 && this->_internal_show_relative_dist_vertical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(28, this->_internal_show_relative_dist_vertical(), target);
  }

  // double show_relative_dist_horizontal = 29;
  if (!(this->_internal_show_relative_dist_horizontal() <= 0 && this->_internal_show_relative_dist_horizontal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(29, this->_internal_show_relative_dist_horizontal(), target);
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->_internal_control_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      30, this->_internal_control_state(), target);
  }

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_show_nearestobjectinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_show_nearestobjectinfo(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Car)
  return target;
}

size_t Car::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Car)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.NearestObject show_NearestObjectInfo = 31;
  total_size += 2UL * this->_internal_show_nearestobjectinfo_size();
  for (const auto& msg : this->show_nearestobjectinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .sim_msg.Trajectory planning_line = 21;
  if (this->_internal_has_planning_line()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *planning_line_);
  }

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 6;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 12;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // double vl = 7;
  if (!(this->_internal_vl() <= 0 && this->_internal_vl() >= 0)) {
    total_size += 1 + 8;
  }

  // double theta = 8;
  if (!(this->_internal_theta() <= 0 && this->_internal_theta() >= 0)) {
    total_size += 1 + 8;
  }

  // double length = 9;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 10;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 11;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc = 14;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 laneId = 13;
  if (this->_internal_laneid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_laneid());
  }

  // int32 age = 15;
  if (this->_internal_age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  // double z = 16;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 2 + 8;
  }

  // uint64 tx_road_id = 17;
  if (this->_internal_tx_road_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_road_id());
  }

  // uint64 tx_section_id = 18;
  if (this->_internal_tx_section_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_section_id());
  }

  // int64 tx_lane_id = 19;
  if (this->_internal_tx_lane_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tx_lane_id());
  }

  // uint64 tx_lanelink_id = 20;
  if (this->_internal_tx_lanelink_id() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_lanelink_id());
  }

  // double show_abs_velocity = 22;
  if (!(this->_internal_show_abs_velocity() <= 0 && this->_internal_show_abs_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_abs_acc = 23;
  if (!(this->_internal_show_abs_acc() <= 0 && this->_internal_show_abs_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity = 24;
  if (!(this->_internal_show_relative_velocity() <= 0 && this->_internal_show_relative_velocity() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc = 25;
  if (!(this->_internal_show_relative_acc() <= 0 && this->_internal_show_relative_acc() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_velocity_horizontal = 26;
  if (!(this->_internal_show_relative_velocity_horizontal() <= 0 && this->_internal_show_relative_velocity_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_acc_horizontal = 27;
  if (!(this->_internal_show_relative_acc_horizontal() <= 0 && this->_internal_show_relative_acc_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_vertical = 28;
  if (!(this->_internal_show_relative_dist_vertical() <= 0 && this->_internal_show_relative_dist_vertical() >= 0)) {
    total_size += 2 + 8;
  }

  // double show_relative_dist_horizontal = 29;
  if (!(this->_internal_show_relative_dist_horizontal() <= 0 && this->_internal_show_relative_dist_horizontal() >= 0)) {
    total_size += 2 + 8;
  }

  // .sim_msg.ControlState control_state = 30;
  if (this->_internal_control_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_state());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Car::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Car::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Car::GetClassData() const { return &_class_data_; }

void Car::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Car *>(to)->MergeFrom(
      static_cast<const Car &>(from));
}


void Car::MergeFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Car)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  show_nearestobjectinfo_.MergeFrom(from.show_nearestobjectinfo_);
  if (from._internal_has_planning_line()) {
    _internal_mutable_planning_line()->::sim_msg::Trajectory::MergeFrom(from._internal_planning_line());
  }
  if (!(from._internal_t() <= 0 && from._internal_t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_heading() <= 0 && from._internal_heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from._internal_v() <= 0 && from._internal_v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from._internal_vl() <= 0 && from._internal_vl() >= 0)) {
    _internal_set_vl(from._internal_vl());
  }
  if (!(from._internal_theta() <= 0 && from._internal_theta() >= 0)) {
    _internal_set_theta(from._internal_theta());
  }
  if (!(from._internal_length() <= 0 && from._internal_length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from._internal_width() <= 0 && from._internal_width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from._internal_height() <= 0 && from._internal_height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from._internal_acc() <= 0 && from._internal_acc() >= 0)) {
    _internal_set_acc(from._internal_acc());
  }
  if (from._internal_laneid() != 0) {
    _internal_set_laneid(from._internal_laneid());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from._internal_tx_road_id() != 0) {
    _internal_set_tx_road_id(from._internal_tx_road_id());
  }
  if (from._internal_tx_section_id() != 0) {
    _internal_set_tx_section_id(from._internal_tx_section_id());
  }
  if (from._internal_tx_lane_id() != 0) {
    _internal_set_tx_lane_id(from._internal_tx_lane_id());
  }
  if (from._internal_tx_lanelink_id() != 0) {
    _internal_set_tx_lanelink_id(from._internal_tx_lanelink_id());
  }
  if (!(from._internal_show_abs_velocity() <= 0 && from._internal_show_abs_velocity() >= 0)) {
    _internal_set_show_abs_velocity(from._internal_show_abs_velocity());
  }
  if (!(from._internal_show_abs_acc() <= 0 && from._internal_show_abs_acc() >= 0)) {
    _internal_set_show_abs_acc(from._internal_show_abs_acc());
  }
  if (!(from._internal_show_relative_velocity() <= 0 && from._internal_show_relative_velocity() >= 0)) {
    _internal_set_show_relative_velocity(from._internal_show_relative_velocity());
  }
  if (!(from._internal_show_relative_acc() <= 0 && from._internal_show_relative_acc() >= 0)) {
    _internal_set_show_relative_acc(from._internal_show_relative_acc());
  }
  if (!(from._internal_show_relative_velocity_horizontal() <= 0 && from._internal_show_relative_velocity_horizontal() >= 0)) {
    _internal_set_show_relative_velocity_horizontal(from._internal_show_relative_velocity_horizontal());
  }
  if (!(from._internal_show_relative_acc_horizontal() <= 0 && from._internal_show_relative_acc_horizontal() >= 0)) {
    _internal_set_show_relative_acc_horizontal(from._internal_show_relative_acc_horizontal());
  }
  if (!(from._internal_show_relative_dist_vertical() <= 0 && from._internal_show_relative_dist_vertical() >= 0)) {
    _internal_set_show_relative_dist_vertical(from._internal_show_relative_dist_vertical());
  }
  if (!(from._internal_show_relative_dist_horizontal() <= 0 && from._internal_show_relative_dist_horizontal() >= 0)) {
    _internal_set_show_relative_dist_horizontal(from._internal_show_relative_dist_horizontal());
  }
  if (from._internal_control_state() != 0) {
    _internal_set_control_state(from._internal_control_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Car::CopyFrom(const Car& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Car)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Car::IsInitialized() const {
  return true;
}

void Car::InternalSwap(Car* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  show_nearestobjectinfo_.InternalSwap(&other->show_nearestobjectinfo_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Car, control_state_)
      + sizeof(Car::control_state_)
      - PROTOBUF_FIELD_OFFSET(Car, planning_line_)>(
          reinterpret_cast<char*>(&planning_line_),
          reinterpret_cast<char*>(&other->planning_line_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Car::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[3]);
}

// ===================================================================

class StaticObstacle::_Internal {
 public:
};

StaticObstacle::StaticObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.StaticObstacle)
}
StaticObstacle::StaticObstacle(const StaticObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.StaticObstacle)
}

inline void StaticObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
}

StaticObstacle::~StaticObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.StaticObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StaticObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void StaticObstacle::ArenaDtor(void* object) {
  StaticObstacle* _this = reinterpret_cast< StaticObstacle* >(object);
  (void)_this;
}
void StaticObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StaticObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StaticObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.StaticObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&t_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StaticObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StaticObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.StaticObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  // double length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_length(), target);
  }

  // double width = 7;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_width(), target);
  }

  // double height = 8;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_height(), target);
  }

  // int32 type = 9;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type(), target);
  }

  // int32 age = 10;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_age(), target);
  }

  // double z = 11;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.StaticObstacle)
  return target;
}

size_t StaticObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.StaticObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 9;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // double length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 11;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 age = 10;
  if (this->_internal_age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StaticObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StaticObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StaticObstacle::GetClassData() const { return &_class_data_; }

void StaticObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<StaticObstacle *>(to)->MergeFrom(
      static_cast<const StaticObstacle &>(from));
}


void StaticObstacle::MergeFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.StaticObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_t() <= 0 && from._internal_t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_heading() <= 0 && from._internal_heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from._internal_length() <= 0 && from._internal_length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from._internal_width() <= 0 && from._internal_width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from._internal_height() <= 0 && from._internal_height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StaticObstacle::CopyFrom(const StaticObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.StaticObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StaticObstacle::IsInitialized() const {
  return true;
}

void StaticObstacle::InternalSwap(StaticObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StaticObstacle, age_)
      + sizeof(StaticObstacle::age_)
      - PROTOBUF_FIELD_OFFSET(StaticObstacle, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata StaticObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[4]);
}

// ===================================================================

class DynamicObstacle::_Internal {
 public:
};

DynamicObstacle::DynamicObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.DynamicObstacle)
}
DynamicObstacle::DynamicObstacle(const DynamicObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&t_, &from.t_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.DynamicObstacle)
}

inline void DynamicObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&t_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&t_)) + sizeof(age_));
}

DynamicObstacle::~DynamicObstacle() {
  // @@protoc_insertion_point(destructor:sim_msg.DynamicObstacle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicObstacle::ArenaDtor(void* object) {
  DynamicObstacle* _this = reinterpret_cast< DynamicObstacle* >(object);
  (void)_this;
}
void DynamicObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.DynamicObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&t_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&t_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double t = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          t_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double length = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double v = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          v_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vl = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          vl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double acc = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          acc_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 age = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DynamicObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.DynamicObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_t(), target);
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_x(), target);
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_y(), target);
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_heading(), target);
  }

  // double length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_length(), target);
  }

  // double width = 7;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_width(), target);
  }

  // double height = 8;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_height(), target);
  }

  // int32 type = 9;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_type(), target);
  }

  // double v = 10;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_v(), target);
  }

  // double vl = 11;
  if (!(this->_internal_vl() <= 0 && this->_internal_vl() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_vl(), target);
  }

  // double acc = 12;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_acc(), target);
  }

  // int32 age = 13;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_age(), target);
  }

  // double z = 14;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.DynamicObstacle)
  return target;
}

size_t DynamicObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.DynamicObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double t = 2;
  if (!(this->_internal_t() <= 0 && this->_internal_t() >= 0)) {
    total_size += 1 + 8;
  }

  // double x = 3;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 4;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // double heading = 5;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 type = 9;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_type());
  }

  // double length = 6;
  if (!(this->_internal_length() <= 0 && this->_internal_length() >= 0)) {
    total_size += 1 + 8;
  }

  // double width = 7;
  if (!(this->_internal_width() <= 0 && this->_internal_width() >= 0)) {
    total_size += 1 + 8;
  }

  // double height = 8;
  if (!(this->_internal_height() <= 0 && this->_internal_height() >= 0)) {
    total_size += 1 + 8;
  }

  // double v = 10;
  if (!(this->_internal_v() <= 0 && this->_internal_v() >= 0)) {
    total_size += 1 + 8;
  }

  // double vl = 11;
  if (!(this->_internal_vl() <= 0 && this->_internal_vl() >= 0)) {
    total_size += 1 + 8;
  }

  // double acc = 12;
  if (!(this->_internal_acc() <= 0 && this->_internal_acc() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 14;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 age = 13;
  if (this->_internal_age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicObstacle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DynamicObstacle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicObstacle::GetClassData() const { return &_class_data_; }

void DynamicObstacle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DynamicObstacle *>(to)->MergeFrom(
      static_cast<const DynamicObstacle &>(from));
}


void DynamicObstacle::MergeFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.DynamicObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_t() <= 0 && from._internal_t() >= 0)) {
    _internal_set_t(from._internal_t());
  }
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from._internal_heading() <= 0 && from._internal_heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (!(from._internal_length() <= 0 && from._internal_length() >= 0)) {
    _internal_set_length(from._internal_length());
  }
  if (!(from._internal_width() <= 0 && from._internal_width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from._internal_height() <= 0 && from._internal_height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from._internal_v() <= 0 && from._internal_v() >= 0)) {
    _internal_set_v(from._internal_v());
  }
  if (!(from._internal_vl() <= 0 && from._internal_vl() >= 0)) {
    _internal_set_vl(from._internal_vl());
  }
  if (!(from._internal_acc() <= 0 && from._internal_acc() >= 0)) {
    _internal_set_acc(from._internal_acc());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicObstacle::CopyFrom(const DynamicObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.DynamicObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicObstacle::IsInitialized() const {
  return true;
}

void DynamicObstacle::InternalSwap(DynamicObstacle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicObstacle, age_)
      + sizeof(DynamicObstacle::age_)
      - PROTOBUF_FIELD_OFFSET(DynamicObstacle, t_)>(
          reinterpret_cast<char*>(&t_),
          reinterpret_cast<char*>(&other->t_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[5]);
}

// ===================================================================

class LaneUid::_Internal {
 public:
};

LaneUid::LaneUid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.LaneUid)
}
LaneUid::LaneUid(const LaneUid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tx_road_id_, &from.tx_road_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneUid)
}

inline void LaneUid::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tx_road_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tx_lane_id_) -
    reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
}

LaneUid::~LaneUid() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneUid)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void LaneUid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void LaneUid::ArenaDtor(void* object) {
  LaneUid* _this = reinterpret_cast< LaneUid* >(object);
  (void)_this;
}
void LaneUid::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneUid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneUid::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&tx_road_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tx_lane_id_) -
      reinterpret_cast<char*>(&tx_road_id_)) + sizeof(tx_lane_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneUid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 tx_road_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneUid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneUid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 tx_road_id = 1;
  if (this->_internal_tx_road_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_tx_road_id(), target);
  }

  // uint64 tx_section_id = 2;
  if (this->_internal_tx_section_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_tx_section_id(), target);
  }

  // int64 tx_lane_id = 3;
  if (this->_internal_tx_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_tx_lane_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneUid)
  return target;
}

size_t LaneUid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneUid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 tx_road_id = 1;
  if (this->_internal_tx_road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_road_id());
  }

  // uint64 tx_section_id = 2;
  if (this->_internal_tx_section_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_section_id());
  }

  // int64 tx_lane_id = 3;
  if (this->_internal_tx_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tx_lane_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LaneUid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    LaneUid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LaneUid::GetClassData() const { return &_class_data_; }

void LaneUid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<LaneUid *>(to)->MergeFrom(
      static_cast<const LaneUid &>(from));
}


void LaneUid::MergeFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneUid)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_tx_road_id() != 0) {
    _internal_set_tx_road_id(from._internal_tx_road_id());
  }
  if (from._internal_tx_section_id() != 0) {
    _internal_set_tx_section_id(from._internal_tx_section_id());
  }
  if (from._internal_tx_lane_id() != 0) {
    _internal_set_tx_lane_id(from._internal_tx_lane_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LaneUid::CopyFrom(const LaneUid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneUid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneUid::IsInitialized() const {
  return true;
}

void LaneUid::InternalSwap(LaneUid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneUid, tx_lane_id_)
      + sizeof(LaneUid::tx_lane_id_)
      - PROTOBUF_FIELD_OFFSET(LaneUid, tx_road_id_)>(
          reinterpret_cast<char*>(&tx_road_id_),
          reinterpret_cast<char*>(&other->tx_road_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneUid::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[6]);
}

// ===================================================================

class TrafficLight::_Internal {
 public:
};

TrafficLight::TrafficLight(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  control_lanes_(arena),
  control_phases_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.TrafficLight)
}
TrafficLight::TrafficLight(const TrafficLight& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      control_lanes_(from.control_lanes_),
      control_phases_(from.control_phases_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&x_)) + sizeof(age_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.TrafficLight)
}

inline void TrafficLight::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&age_) -
    reinterpret_cast<char*>(&x_)) + sizeof(age_));
}

TrafficLight::~TrafficLight() {
  // @@protoc_insertion_point(destructor:sim_msg.TrafficLight)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrafficLight::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrafficLight::ArenaDtor(void* object) {
  TrafficLight* _this = reinterpret_cast< TrafficLight* >(object);
  (void)_this;
}
void TrafficLight::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrafficLight::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrafficLight::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_lanes_.Clear();
  control_phases_.Clear();
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&age_) -
      reinterpret_cast<char*>(&x_)) + sizeof(age_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrafficLight::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double heading = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          color_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 age = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          age_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double z = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // uint64 tx_road_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          tx_road_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 tx_section_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          tx_section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 tx_lane_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          tx_lane_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.LaneUid control_lanes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_lanes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.Phase control_phases = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_control_phases(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_control_phases(static_cast<::sim_msg::Phase>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrafficLight::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.TrafficLight)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // double x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_x(), target);
  }

  // double y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_y(), target);
  }

  // double heading = 4;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_heading(), target);
  }

  // int32 color = 5;
  if (this->_internal_color() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_color(), target);
  }

  // int32 age = 6;
  if (this->_internal_age() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_age(), target);
  }

  // double z = 7;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_z(), target);
  }

  // uint64 tx_road_id = 8;
  if (this->_internal_tx_road_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_tx_road_id(), target);
  }

  // uint64 tx_section_id = 9;
  if (this->_internal_tx_section_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tx_section_id(), target);
  }

  // int64 tx_lane_id = 10;
  if (this->_internal_tx_lane_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_tx_lane_id(), target);
  }

  // repeated .sim_msg.LaneUid control_lanes = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_lanes_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_control_lanes(i), target, stream);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  {
    int byte_size = _control_phases_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          12, control_phases_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.TrafficLight)
  return target;
}

size_t TrafficLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.TrafficLight)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.LaneUid control_lanes = 11;
  total_size += 1UL * this->_internal_control_lanes_size();
  for (const auto& msg : this->control_lanes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sim_msg.Phase control_phases = 12;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_control_phases_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_control_phases(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _control_phases_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // double x = 2;
  if (!(this->_internal_x() <= 0 && this->_internal_x() >= 0)) {
    total_size += 1 + 8;
  }

  // double y = 3;
  if (!(this->_internal_y() <= 0 && this->_internal_y() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  // int32 color = 5;
  if (this->_internal_color() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_color());
  }

  // double heading = 4;
  if (!(this->_internal_heading() <= 0 && this->_internal_heading() >= 0)) {
    total_size += 1 + 8;
  }

  // double z = 7;
  if (!(this->_internal_z() <= 0 && this->_internal_z() >= 0)) {
    total_size += 1 + 8;
  }

  // uint64 tx_road_id = 8;
  if (this->_internal_tx_road_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_road_id());
  }

  // uint64 tx_section_id = 9;
  if (this->_internal_tx_section_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_tx_section_id());
  }

  // int64 tx_lane_id = 10;
  if (this->_internal_tx_lane_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tx_lane_id());
  }

  // int32 age = 6;
  if (this->_internal_age() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_age());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrafficLight::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrafficLight::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrafficLight::GetClassData() const { return &_class_data_; }

void TrafficLight::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TrafficLight *>(to)->MergeFrom(
      static_cast<const TrafficLight &>(from));
}


void TrafficLight::MergeFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.TrafficLight)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  control_lanes_.MergeFrom(from.control_lanes_);
  control_phases_.MergeFrom(from.control_phases_);
  if (!(from._internal_x() <= 0 && from._internal_x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from._internal_y() <= 0 && from._internal_y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_color() != 0) {
    _internal_set_color(from._internal_color());
  }
  if (!(from._internal_heading() <= 0 && from._internal_heading() >= 0)) {
    _internal_set_heading(from._internal_heading());
  }
  if (!(from._internal_z() <= 0 && from._internal_z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
  if (from._internal_tx_road_id() != 0) {
    _internal_set_tx_road_id(from._internal_tx_road_id());
  }
  if (from._internal_tx_section_id() != 0) {
    _internal_set_tx_section_id(from._internal_tx_section_id());
  }
  if (from._internal_tx_lane_id() != 0) {
    _internal_set_tx_lane_id(from._internal_tx_lane_id());
  }
  if (from._internal_age() != 0) {
    _internal_set_age(from._internal_age());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrafficLight::CopyFrom(const TrafficLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.TrafficLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrafficLight::IsInitialized() const {
  return true;
}

void TrafficLight::InternalSwap(TrafficLight* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  control_lanes_.InternalSwap(&other->control_lanes_);
  control_phases_.InternalSwap(&other->control_phases_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrafficLight, age_)
      + sizeof(TrafficLight::age_)
      - PROTOBUF_FIELD_OFFSET(TrafficLight, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrafficLight::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[7]);
}

// ===================================================================

class Traffic::_Internal {
 public:
};

Traffic::Traffic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cars_(arena),
  staticobstacles_(arena),
  dynamicobstacles_(arena),
  trafficlights_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:sim_msg.Traffic)
}
Traffic::Traffic(const Traffic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cars_(from.cars_),
      staticobstacles_(from.staticobstacles_),
      dynamicobstacles_(from.dynamicobstacles_),
      trafficlights_(from.trafficlights_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:sim_msg.Traffic)
}

inline void Traffic::SharedCtor() {
}

Traffic::~Traffic() {
  // @@protoc_insertion_point(destructor:sim_msg.Traffic)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Traffic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Traffic::ArenaDtor(void* object) {
  Traffic* _this = reinterpret_cast< Traffic* >(object);
  (void)_this;
}
void Traffic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Traffic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Traffic::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cars_.Clear();
  staticobstacles_.Clear();
  dynamicobstacles_.Clear();
  trafficlights_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Traffic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .sim_msg.Car cars = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cars(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.StaticObstacle staticObstacles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_staticobstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dynamicobstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .sim_msg.TrafficLight trafficLights = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trafficlights(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Traffic::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.Traffic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .sim_msg.Car cars = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cars_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cars(i), target, stream);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_staticobstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_staticobstacles(i), target, stream);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dynamicobstacles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_dynamicobstacles(i), target, stream);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trafficlights_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_trafficlights(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.Traffic)
  return target;
}

size_t Traffic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.Traffic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .sim_msg.Car cars = 1;
  total_size += 1UL * this->_internal_cars_size();
  for (const auto& msg : this->cars_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sim_msg.StaticObstacle staticObstacles = 2;
  total_size += 1UL * this->_internal_staticobstacles_size();
  for (const auto& msg : this->staticobstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sim_msg.DynamicObstacle dynamicObstacles = 3;
  total_size += 1UL * this->_internal_dynamicobstacles_size();
  for (const auto& msg : this->dynamicobstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .sim_msg.TrafficLight trafficLights = 4;
  total_size += 1UL * this->_internal_trafficlights_size();
  for (const auto& msg : this->trafficlights_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Traffic::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Traffic::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Traffic::GetClassData() const { return &_class_data_; }

void Traffic::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Traffic *>(to)->MergeFrom(
      static_cast<const Traffic &>(from));
}


void Traffic::MergeFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.Traffic)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cars_.MergeFrom(from.cars_);
  staticobstacles_.MergeFrom(from.staticobstacles_);
  dynamicobstacles_.MergeFrom(from.dynamicobstacles_);
  trafficlights_.MergeFrom(from.trafficlights_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Traffic::CopyFrom(const Traffic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.Traffic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Traffic::IsInitialized() const {
  return true;
}

void Traffic::InternalSwap(Traffic* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cars_.InternalSwap(&other->cars_);
  staticobstacles_.InternalSwap(&other->staticobstacles_);
  dynamicobstacles_.InternalSwap(&other->dynamicobstacles_);
  trafficlights_.InternalSwap(&other->trafficlights_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Traffic::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_traffic_2eproto_getter, &descriptor_table_traffic_2eproto_once,
      file_level_metadata_traffic_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace sim_msg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::sim_msg::ManualVehicleControlInfo* Arena::CreateMaybeMessage< ::sim_msg::ManualVehicleControlInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::ManualVehicleControlInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::ManualVehicleControlInfoArray* Arena::CreateMaybeMessage< ::sim_msg::ManualVehicleControlInfoArray >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::ManualVehicleControlInfoArray >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::NearestObject* Arena::CreateMaybeMessage< ::sim_msg::NearestObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::NearestObject >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Car* Arena::CreateMaybeMessage< ::sim_msg::Car >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Car >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::StaticObstacle* Arena::CreateMaybeMessage< ::sim_msg::StaticObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::StaticObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::DynamicObstacle* Arena::CreateMaybeMessage< ::sim_msg::DynamicObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::DynamicObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::LaneUid* Arena::CreateMaybeMessage< ::sim_msg::LaneUid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::LaneUid >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::TrafficLight* Arena::CreateMaybeMessage< ::sim_msg::TrafficLight >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::TrafficLight >(arena);
}
template<> PROTOBUF_NOINLINE ::sim_msg::Traffic* Arena::CreateMaybeMessage< ::sim_msg::Traffic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::sim_msg::Traffic >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
