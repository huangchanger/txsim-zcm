// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: laneMarks.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "laneMarks.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace sim_msg {
class LaneMarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneMark> {
} _LaneMark_default_instance_;
class LaneMarksDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneMarks> {
} _LaneMarks_default_instance_;

namespace protobuf_laneMarks_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, color_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, confidence_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, points_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMark, backward_points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LaneMarks, remain_length_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LaneMark)},
  { 9, -1, sizeof(LaneMarks)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMark_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LaneMarks_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "laneMarks.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _LaneMark_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LaneMarks_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::sim_msg::protobuf_header_2eproto::InitDefaults();
  ::sim_msg::protobuf_basic_2eproto::InitDefaults();
  _LaneMark_default_instance_.DefaultConstruct();
  _LaneMarks_default_instance_.DefaultConstruct();
  _LaneMarks_default_instance_.get_mutable()->header_ = const_cast< ::sim_msg::Header*>(
      ::sim_msg::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\017laneMarks.proto\022\007sim_msg\032\014header.proto"
      "\032\013basic.proto\"\202\001\n\010LaneMark\022\r\n\005color\030\001 \001("
      "\005\022\014\n\004type\030\002 \001(\005\022\022\n\nconfidence\030\003 \001(\002\022\035\n\006p"
      "oints\030\004 \003(\0132\r.sim_msg.Vec3\022&\n\017backward_p"
      "oints\030\005 \003(\0132\r.sim_msg.Vec3\"\206\001\n\tLaneMarks"
      "\022\037\n\006header\030\001 \001(\0132\017.sim_msg.Header\022\037\n\004lef"
      "t\030\002 \003(\0132\021.sim_msg.LaneMark\022 \n\005right\030\003 \003("
      "\0132\021.sim_msg.LaneMark\022\025\n\rremain_length\030\004 "
      "\001(\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 331);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "laneMarks.proto", &protobuf_RegisterTypes);
  ::sim_msg::protobuf_header_2eproto::AddDescriptors();
  ::sim_msg::protobuf_basic_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_laneMarks_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMark::kColorFieldNumber;
const int LaneMark::kTypeFieldNumber;
const int LaneMark::kConfidenceFieldNumber;
const int LaneMark::kPointsFieldNumber;
const int LaneMark::kBackwardPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMark::LaneMark()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_laneMarks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneMark)
}
LaneMark::LaneMark(const LaneMark& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      backward_points_(from.backward_points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&color_, &from.color_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneMark)
}

void LaneMark::SharedCtor() {
  ::memset(&color_, 0, reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_) + sizeof(confidence_));
  _cached_size_ = 0;
}

LaneMark::~LaneMark() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneMark)
  SharedDtor();
}

void LaneMark::SharedDtor() {
}

void LaneMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMark::descriptor() {
  protobuf_laneMarks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_laneMarks_2eproto::file_level_metadata[0].descriptor;
}

const LaneMark& LaneMark::default_instance() {
  protobuf_laneMarks_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMark* LaneMark::New(::google::protobuf::Arena* arena) const {
  LaneMark* n = new LaneMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMark::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneMark)
  points_.Clear();
  backward_points_.Clear();
  ::memset(&color_, 0, reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&color_) + sizeof(confidence_));
}

bool LaneMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 color = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &color_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float confidence = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.Vec3 points = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.Vec3 backward_points = 5;
      case 5: {
        if (tag == 42u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_backward_points()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneMark)
  return false;
#undef DO_
}

void LaneMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneMark)
  // int32 color = 1;
  if (this->color() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->color(), output);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // float confidence = 3;
  if (this->confidence() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->confidence(), output);
  }

  // repeated .sim_msg.Vec3 points = 4;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->points(i), output);
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  for (unsigned int i = 0, n = this->backward_points_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->backward_points(i), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.LaneMark)
}

::google::protobuf::uint8* LaneMark::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneMark)
  // int32 color = 1;
  if (this->color() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->color(), target);
  }

  // int32 type = 2;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // float confidence = 3;
  if (this->confidence() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->confidence(), target);
  }

  // repeated .sim_msg.Vec3 points = 4;
  for (unsigned int i = 0, n = this->points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->points(i), false, target);
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  for (unsigned int i = 0, n = this->backward_points_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->backward_points(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneMark)
  return target;
}

size_t LaneMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneMark)
  size_t total_size = 0;

  // repeated .sim_msg.Vec3 points = 4;
  {
    unsigned int count = this->points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(i));
    }
  }

  // repeated .sim_msg.Vec3 backward_points = 5;
  {
    unsigned int count = this->backward_points_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->backward_points(i));
    }
  }

  // int32 color = 1;
  if (this->color() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->color());
  }

  // int32 type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // float confidence = 3;
  if (this->confidence() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMark::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMark* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMark>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneMark)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneMark)
    MergeFrom(*source);
  }
}

void LaneMark::MergeFrom(const LaneMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  points_.MergeFrom(from.points_);
  backward_points_.MergeFrom(from.backward_points_);
  if (from.color() != 0) {
    set_color(from.color());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.confidence() != 0) {
    set_confidence(from.confidence());
  }
}

void LaneMark::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMark::CopyFrom(const LaneMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMark::IsInitialized() const {
  return true;
}

void LaneMark::Swap(LaneMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMark::InternalSwap(LaneMark* other) {
  points_.UnsafeArenaSwap(&other->points_);
  backward_points_.UnsafeArenaSwap(&other->backward_points_);
  std::swap(color_, other->color_);
  std::swap(type_, other->type_);
  std::swap(confidence_, other->confidence_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMark::GetMetadata() const {
  protobuf_laneMarks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_laneMarks_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMark

// int32 color = 1;
void LaneMark::clear_color() {
  color_ = 0;
}
::google::protobuf::int32 LaneMark::color() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.color)
  return color_;
}
void LaneMark::set_color(::google::protobuf::int32 value) {
  
  color_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.color)
}

// int32 type = 2;
void LaneMark::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 LaneMark::type() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.type)
  return type_;
}
void LaneMark::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.type)
}

// float confidence = 3;
void LaneMark::clear_confidence() {
  confidence_ = 0;
}
float LaneMark::confidence() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.confidence)
  return confidence_;
}
void LaneMark::set_confidence(float value) {
  
  confidence_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMark.confidence)
}

// repeated .sim_msg.Vec3 points = 4;
int LaneMark::points_size() const {
  return points_.size();
}
void LaneMark::clear_points() {
  points_.Clear();
}
const ::sim_msg::Vec3& LaneMark::points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.points)
  return points_.Get(index);
}
::sim_msg::Vec3* LaneMark::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMark.points)
  return points_.Mutable(index);
}
::sim_msg::Vec3* LaneMark::add_points() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMark.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
LaneMark::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMark.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
LaneMark::points() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMark.points)
  return points_;
}

// repeated .sim_msg.Vec3 backward_points = 5;
int LaneMark::backward_points_size() const {
  return backward_points_.size();
}
void LaneMark::clear_backward_points() {
  backward_points_.Clear();
}
const ::sim_msg::Vec3& LaneMark::backward_points(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMark.backward_points)
  return backward_points_.Get(index);
}
::sim_msg::Vec3* LaneMark::mutable_backward_points(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMark.backward_points)
  return backward_points_.Mutable(index);
}
::sim_msg::Vec3* LaneMark::add_backward_points() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMark.backward_points)
  return backward_points_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >*
LaneMark::mutable_backward_points() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMark.backward_points)
  return &backward_points_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::Vec3 >&
LaneMark::backward_points() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMark.backward_points)
  return backward_points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneMarks::kHeaderFieldNumber;
const int LaneMarks::kLeftFieldNumber;
const int LaneMarks::kRightFieldNumber;
const int LaneMarks::kRemainLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneMarks::LaneMarks()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_laneMarks_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:sim_msg.LaneMarks)
}
LaneMarks::LaneMarks(const LaneMarks& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      left_(from.left_),
      right_(from.right_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::sim_msg::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  remain_length_ = from.remain_length_;
  // @@protoc_insertion_point(copy_constructor:sim_msg.LaneMarks)
}

void LaneMarks::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&remain_length_) -
    reinterpret_cast<char*>(&header_) + sizeof(remain_length_));
  _cached_size_ = 0;
}

LaneMarks::~LaneMarks() {
  // @@protoc_insertion_point(destructor:sim_msg.LaneMarks)
  SharedDtor();
}

void LaneMarks::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void LaneMarks::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LaneMarks::descriptor() {
  protobuf_laneMarks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_laneMarks_2eproto::file_level_metadata[1].descriptor;
}

const LaneMarks& LaneMarks::default_instance() {
  protobuf_laneMarks_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneMarks* LaneMarks::New(::google::protobuf::Arena* arena) const {
  LaneMarks* n = new LaneMarks;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneMarks::Clear() {
// @@protoc_insertion_point(message_clear_start:sim_msg.LaneMarks)
  left_.Clear();
  right_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  remain_length_ = 0;
}

bool LaneMarks::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:sim_msg.LaneMarks)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .sim_msg.Header header = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .sim_msg.LaneMark left = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_left()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .sim_msg.LaneMark right = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_right()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // double remain_length = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remain_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:sim_msg.LaneMarks)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:sim_msg.LaneMarks)
  return false;
#undef DO_
}

void LaneMarks::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:sim_msg.LaneMarks)
  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // repeated .sim_msg.LaneMark left = 2;
  for (unsigned int i = 0, n = this->left_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->left(i), output);
  }

  // repeated .sim_msg.LaneMark right = 3;
  for (unsigned int i = 0, n = this->right_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->right(i), output);
  }

  // double remain_length = 4;
  if (this->remain_length() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->remain_length(), output);
  }

  // @@protoc_insertion_point(serialize_end:sim_msg.LaneMarks)
}

::google::protobuf::uint8* LaneMarks::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:sim_msg.LaneMarks)
  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->header_, false, target);
  }

  // repeated .sim_msg.LaneMark left = 2;
  for (unsigned int i = 0, n = this->left_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->left(i), false, target);
  }

  // repeated .sim_msg.LaneMark right = 3;
  for (unsigned int i = 0, n = this->right_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->right(i), false, target);
  }

  // double remain_length = 4;
  if (this->remain_length() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->remain_length(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:sim_msg.LaneMarks)
  return target;
}

size_t LaneMarks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:sim_msg.LaneMarks)
  size_t total_size = 0;

  // repeated .sim_msg.LaneMark left = 2;
  {
    unsigned int count = this->left_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->left(i));
    }
  }

  // repeated .sim_msg.LaneMark right = 3;
  {
    unsigned int count = this->right_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->right(i));
    }
  }

  // .sim_msg.Header header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  // double remain_length = 4;
  if (this->remain_length() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneMarks::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:sim_msg.LaneMarks)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneMarks* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LaneMarks>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:sim_msg.LaneMarks)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:sim_msg.LaneMarks)
    MergeFrom(*source);
  }
}

void LaneMarks::MergeFrom(const LaneMarks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:sim_msg.LaneMarks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  left_.MergeFrom(from.left_);
  right_.MergeFrom(from.right_);
  if (from.has_header()) {
    mutable_header()->::sim_msg::Header::MergeFrom(from.header());
  }
  if (from.remain_length() != 0) {
    set_remain_length(from.remain_length());
  }
}

void LaneMarks::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:sim_msg.LaneMarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneMarks::CopyFrom(const LaneMarks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:sim_msg.LaneMarks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneMarks::IsInitialized() const {
  return true;
}

void LaneMarks::Swap(LaneMarks* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneMarks::InternalSwap(LaneMarks* other) {
  left_.UnsafeArenaSwap(&other->left_);
  right_.UnsafeArenaSwap(&other->right_);
  std::swap(header_, other->header_);
  std::swap(remain_length_, other->remain_length_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LaneMarks::GetMetadata() const {
  protobuf_laneMarks_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_laneMarks_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneMarks

// .sim_msg.Header header = 1;
bool LaneMarks::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
void LaneMarks::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) delete header_;
  header_ = NULL;
}
const ::sim_msg::Header& LaneMarks::header() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.header)
  return header_ != NULL ? *header_
                         : *::sim_msg::Header::internal_default_instance();
}
::sim_msg::Header* LaneMarks::mutable_header() {
  
  if (header_ == NULL) {
    header_ = new ::sim_msg::Header;
  }
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.header)
  return header_;
}
::sim_msg::Header* LaneMarks::release_header() {
  // @@protoc_insertion_point(field_release:sim_msg.LaneMarks.header)
  
  ::sim_msg::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LaneMarks::set_allocated_header(::sim_msg::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:sim_msg.LaneMarks.header)
}

// repeated .sim_msg.LaneMark left = 2;
int LaneMarks::left_size() const {
  return left_.size();
}
void LaneMarks::clear_left() {
  left_.Clear();
}
const ::sim_msg::LaneMark& LaneMarks::left(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.left)
  return left_.Get(index);
}
::sim_msg::LaneMark* LaneMarks::mutable_left(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.left)
  return left_.Mutable(index);
}
::sim_msg::LaneMark* LaneMarks::add_left() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMarks.left)
  return left_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
LaneMarks::mutable_left() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMarks.left)
  return &left_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
LaneMarks::left() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMarks.left)
  return left_;
}

// repeated .sim_msg.LaneMark right = 3;
int LaneMarks::right_size() const {
  return right_.size();
}
void LaneMarks::clear_right() {
  right_.Clear();
}
const ::sim_msg::LaneMark& LaneMarks::right(int index) const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.right)
  return right_.Get(index);
}
::sim_msg::LaneMark* LaneMarks::mutable_right(int index) {
  // @@protoc_insertion_point(field_mutable:sim_msg.LaneMarks.right)
  return right_.Mutable(index);
}
::sim_msg::LaneMark* LaneMarks::add_right() {
  // @@protoc_insertion_point(field_add:sim_msg.LaneMarks.right)
  return right_.Add();
}
::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >*
LaneMarks::mutable_right() {
  // @@protoc_insertion_point(field_mutable_list:sim_msg.LaneMarks.right)
  return &right_;
}
const ::google::protobuf::RepeatedPtrField< ::sim_msg::LaneMark >&
LaneMarks::right() const {
  // @@protoc_insertion_point(field_list:sim_msg.LaneMarks.right)
  return right_;
}

// double remain_length = 4;
void LaneMarks::clear_remain_length() {
  remain_length_ = 0;
}
double LaneMarks::remain_length() const {
  // @@protoc_insertion_point(field_get:sim_msg.LaneMarks.remain_length)
  return remain_length_;
}
void LaneMarks::set_remain_length(double value) {
  
  remain_length_ = value;
  // @@protoc_insertion_point(field_set:sim_msg.LaneMarks.remain_length)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace sim_msg

// @@protoc_insertion_point(global_scope)
